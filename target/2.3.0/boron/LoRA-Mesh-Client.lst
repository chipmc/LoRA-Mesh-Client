
/Users/chipmc/Documents/Maker/Particle/Utilities/LoRA-Mesh-Client/target/2.3.0/boron/LoRA-Mesh-Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005ba0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000008  2003f400  000d9bc0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003def8  000d9bc8  0001def8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000884  2003df70  2003df70  0002df70  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d9c3c  000d9c3c  00029c3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9c64  000d9c64  00029c64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0020887e  00000000  00000000  00029c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0002081e  00000000  00000000  002324e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00032414  00000000  00000000  00252d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003058  00000000  00000000  00285118  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000085b0  00000000  00000000  00288170  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00045752  00000000  00000000  00290720  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000501b9  00000000  00000000  002d5e72  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00114941  00000000  00000000  0032602b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000085a0  00000000  00000000  0043a96c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fff3 	bl	d901c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f815 	bl	d906c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003def8 	.word	0x2003def8
   d404c:	000d9bc8 	.word	0x000d9bc8
   d4050:	2003df6c 	.word	0x2003df6c
   d4054:	2003df70 	.word	0x2003df70
   d4058:	2003e7f1 	.word	0x2003e7f1

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 fb05 	bl	d8670 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9b8c 	.word	0x000d9b8c
   d4080:	000d9bb4 	.word	0x000d9bb4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8d8 	b.w	d4238 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa37 	bl	d44fc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 baa5 	b.w	d85e0 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 b85b 	b.w	d6150 <malloc>

000d409a <_Znaj>:
   d409a:	f002 b859 	b.w	d6150 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 b85f 	b.w	d6160 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f001 ff52 	bl	d5f54 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d5c75 	.word	0x000d5c75

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z9sensorISRv>:

	if (sensorDetect) recordCount();                // The ISR had raised the sensor flag - this will service interrupts regardless of state
}

void sensorISR() {
	sensorDetect = true;
   d40d4:	4b01      	ldr	r3, [pc, #4]	; (d40dc <_Z9sensorISRv+0x8>)
   d40d6:	2201      	movs	r2, #1
   d40d8:	701a      	strb	r2, [r3, #0]
}
   d40da:	4770      	bx	lr
   d40dc:	2003e32c 	.word	0x2003e32c

000d40e0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40e0:	4b0a      	ldr	r3, [pc, #40]	; (d410c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40e2:	b510      	push	{r4, lr}
   d40e4:	4604      	mov	r4, r0
   d40e6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40e8:	f002 ffdc 	bl	d70a4 <_ZN5spark10LogManager8instanceEv>
   d40ec:	4621      	mov	r1, r4
   d40ee:	f003 f9da 	bl	d74a6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40f2:	f004 fa2d 	bl	d8550 <_Z16_fetch_usbserialv>
   d40f6:	f004 fa1f 	bl	d8538 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d40fa:	4620      	mov	r0, r4
   d40fc:	4b04      	ldr	r3, [pc, #16]	; (d4110 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40fe:	f840 3b04 	str.w	r3, [r0], #4
   d4102:	f003 f8bd 	bl	d7280 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4106:	4620      	mov	r0, r4
   d4108:	bd10      	pop	{r4, pc}
   d410a:	bf00      	nop
   d410c:	000d9568 	.word	0x000d9568
   d4110:	000d9550 	.word	0x000d9550

000d4114 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4114:	b510      	push	{r4, lr}
   d4116:	4604      	mov	r4, r0
    }
   d4118:	f7ff ffe2 	bl	d40e0 <_ZN5spark16SerialLogHandlerD1Ev>
   d411c:	4620      	mov	r0, r4
   d411e:	2124      	movs	r1, #36	; 0x24
   d4120:	f004 fb7e 	bl	d8820 <_ZdlPvj>
   d4124:	4620      	mov	r0, r4
   d4126:	bd10      	pop	{r4, pc}

000d4128 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4128:	b40e      	push	{r1, r2, r3}
   d412a:	b510      	push	{r4, lr}
   d412c:	b08d      	sub	sp, #52	; 0x34
   d412e:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4130:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4132:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4136:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4138:	2300      	movs	r3, #0
   d413a:	2020      	movs	r0, #32
   d413c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4140:	e9cd 4200 	strd	r4, r2, [sp]
   d4144:	201e      	movs	r0, #30
   d4146:	aa04      	add	r2, sp, #16
   d4148:	f001 ff0c 	bl	d5f64 <log_message_v>
}
   d414c:	b00d      	add	sp, #52	; 0x34
   d414e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4152:	b003      	add	sp, #12
   d4154:	4770      	bx	lr
	...

000d4158 <_Z11recordCountv>:

void recordCount() {
   d4158:	b538      	push	{r3, r4, r5, lr}
	static time_t lastCount = Time.now();
   d415a:	4d17      	ldr	r5, [pc, #92]	; (d41b8 <_Z11recordCountv+0x60>)
   d415c:	4c17      	ldr	r4, [pc, #92]	; (d41bc <_Z11recordCountv+0x64>)
   d415e:	782b      	ldrb	r3, [r5, #0]
   d4160:	f3bf 8f5b 	dmb	ish
   d4164:	f013 0f01 	tst.w	r3, #1
   d4168:	d10b      	bne.n	d4182 <_Z11recordCountv+0x2a>
   d416a:	4628      	mov	r0, r5
   d416c:	f7ff ffa4 	bl	d40b8 <__cxa_guard_acquire>
   d4170:	b138      	cbz	r0, d4182 <_Z11recordCountv+0x2a>
   d4172:	f004 f8ed 	bl	d8350 <_ZN9TimeClass3nowEv>
   d4176:	17c1      	asrs	r1, r0, #31
   d4178:	e9c4 0100 	strd	r0, r1, [r4]
   d417c:	4628      	mov	r0, r5
   d417e:	f7ff ffa0 	bl	d40c2 <__cxa_guard_release>
	if (Time.now() - lastCount) {
   d4182:	f004 f8e5 	bl	d8350 <_ZN9TimeClass3nowEv>
   d4186:	e9d4 2300 	ldrd	r2, r3, [r4]
   d418a:	17c1      	asrs	r1, r0, #31
   d418c:	4299      	cmp	r1, r3
   d418e:	bf08      	it	eq
   d4190:	4290      	cmpeq	r0, r2
   d4192:	d00f      	beq.n	d41b4 <_Z11recordCountv+0x5c>
		lastCount = Time.now();
   d4194:	f004 f8dc 	bl	d8350 <_ZN9TimeClass3nowEv>
		hourly++;
   d4198:	4a09      	ldr	r2, [pc, #36]	; (d41c0 <_Z11recordCountv+0x68>)
   d419a:	8813      	ldrh	r3, [r2, #0]
   d419c:	3301      	adds	r3, #1
   d419e:	8013      	strh	r3, [r2, #0]
		daily++;
   d41a0:	4a08      	ldr	r2, [pc, #32]	; (d41c4 <_Z11recordCountv+0x6c>)
   d41a2:	8813      	ldrh	r3, [r2, #0]
		lastCount = Time.now();
   d41a4:	17c1      	asrs	r1, r0, #31
		daily++;
   d41a6:	3301      	adds	r3, #1
   d41a8:	8013      	strh	r3, [r2, #0]
		lastCount = Time.now();
   d41aa:	e9c4 0100 	strd	r0, r1, [r4]
		sensorDetect = false;
   d41ae:	4b06      	ldr	r3, [pc, #24]	; (d41c8 <_Z11recordCountv+0x70>)
   d41b0:	2200      	movs	r2, #0
   d41b2:	701a      	strb	r2, [r3, #0]
	}
}
   d41b4:	bd38      	pop	{r3, r4, r5, pc}
   d41b6:	bf00      	nop
   d41b8:	2003df7c 	.word	0x2003df7c
   d41bc:	2003df88 	.word	0x2003df88
   d41c0:	2003e1cc 	.word	0x2003e1cc
   d41c4:	2003e09a 	.word	0x2003e09a
   d41c8:	2003e32c 	.word	0x2003e32c

000d41cc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d41cc:	b530      	push	{r4, r5, lr}
   d41ce:	b085      	sub	sp, #20
   d41d0:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d41d2:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d41d4:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d41d6:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d41d8:	f001 fedc 	bl	d5f94 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d41dc:	b9b0      	cbnz	r0, d420c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d41de:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d41e0:	b10c      	cbz	r4, d41e6 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d41e2:	6923      	ldr	r3, [r4, #16]
   d41e4:	b923      	cbnz	r3, d41f0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d41e6:	4a0a      	ldr	r2, [pc, #40]	; (d4210 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d41e8:	2100      	movs	r1, #0
   d41ea:	200a      	movs	r0, #10
   d41ec:	f001 feb2 	bl	d5f54 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d41f0:	2300      	movs	r3, #0
   d41f2:	f8ad 3006 	strh.w	r3, [sp, #6]
   d41f6:	230c      	movs	r3, #12
   d41f8:	f8ad 3004 	strh.w	r3, [sp, #4]
   d41fc:	2304      	movs	r3, #4
   d41fe:	9303      	str	r3, [sp, #12]
   d4200:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4202:	6923      	ldr	r3, [r4, #16]
   d4204:	aa01      	add	r2, sp, #4
   d4206:	2101      	movs	r1, #1
   d4208:	4620      	mov	r0, r4
   d420a:	4798      	blx	r3
}
   d420c:	b005      	add	sp, #20
   d420e:	bd30      	pop	{r4, r5, pc}
   d4210:	000d5c75 	.word	0x000d5c75

000d4214 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
            return r;
        }
        return val;
    }

    float batteryCharge() const {
   d4214:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4216:	2003      	movs	r0, #3
   d4218:	a901      	add	r1, sp, #4
   d421a:	f7ff ffd7 	bl	d41cc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d421e:	b940      	cbnz	r0, d4232 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4220:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d4224:	ee00 3a10 	vmov	s0, r3
   d4228:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
   d422c:	b003      	add	sp, #12
   d422e:	f85d fb04 	ldr.w	pc, [sp], #4
            return -1.0f;
   d4232:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d4236:	e7f9      	b.n	d422c <_ZNK11SystemClass13batteryChargeEv.isra.0+0x18>

000d4238 <setup>:
{
   d4238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	pinMode(blueLED,OUTPUT);						// Blue led signals sends
   d423a:	2101      	movs	r1, #1
   d423c:	2007      	movs	r0, #7
   d423e:	f004 fa87 	bl	d8750 <pinMode>
	pinMode(intPin, INPUT_PULLDOWN);				// Initialize sensor interrupt pin
   d4242:	2103      	movs	r1, #3
   d4244:	4608      	mov	r0, r1
   d4246:	f004 fa83 	bl	d8750 <pinMode>
        int reason = RESET_REASON_NONE;
   d424a:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d424c:	4611      	mov	r1, r2
   d424e:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d4250:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4252:	f001 fcff 	bl	d5c54 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d4256:	9b03      	ldr	r3, [sp, #12]
  	if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d4258:	2b14      	cmp	r3, #20
   d425a:	f04f 0200 	mov.w	r2, #0
   d425e:	d135      	bne.n	d42cc <setup+0x94>
    	resetCount++;
   d4260:	4a21      	ldr	r2, [pc, #132]	; (d42e8 <setup+0xb0>)
   d4262:	7813      	ldrb	r3, [r2, #0]
   d4264:	3301      	adds	r3, #1
   d4266:	b2db      	uxtb	r3, r3
    	if (resetCount > 6) alerts = 13;                 // Excessive resets
   d4268:	2b06      	cmp	r3, #6
    	resetCount++;
   d426a:	7013      	strb	r3, [r2, #0]
    	if (resetCount > 6) alerts = 13;                 // Excessive resets
   d426c:	d837      	bhi.n	d42de <setup+0xa6>
	if (!manager.init()) Log.info("init failed"); // Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   d426e:	481f      	ldr	r0, [pc, #124]	; (d42ec <setup+0xb4>)
   d4270:	f000 ff8a 	bl	d5188 <_ZN8RHRouter4initEv>
   d4274:	b918      	cbnz	r0, d427e <setup+0x46>
   d4276:	491e      	ldr	r1, [pc, #120]	; (d42f0 <setup+0xb8>)
   d4278:	481e      	ldr	r0, [pc, #120]	; (d42f4 <setup+0xbc>)
   d427a:	f7ff ff55 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
	driver.setFrequency(RF95_FREQ);					// Setup ISM frequency - typically 868.0 or 915.0 in the Americas, or 433.0 in the EU
   d427e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; d42f8 <setup+0xc0>
   d4282:	481e      	ldr	r0, [pc, #120]	; (d42fc <setup+0xc4>)
   d4284:	f001 fa58 	bl	d5738 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);
   d4288:	481c      	ldr	r0, [pc, #112]	; (d42fc <setup+0xc4>)
   d428a:	2200      	movs	r2, #0
   d428c:	2117      	movs	r1, #23
   d428e:	f001 fbcd 	bl	d5a2c <_ZN7RH_RF9510setTxPowerEab>
	attachInterrupt(intPin, sensorISR, RISING);                        // Pressure Sensor interrupt from low to high
   d4292:	2300      	movs	r3, #0
   d4294:	2201      	movs	r2, #1
   d4296:	491a      	ldr	r1, [pc, #104]	; (d4300 <setup+0xc8>)
   d4298:	9300      	str	r3, [sp, #0]
   d429a:	2003      	movs	r0, #3
   d429c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d42a0:	f002 fb3e 	bl	d6920 <_Z15attachInterrupttPFvvE13InterruptModeah>
	Log.info("Startup complete - battery %4.2f", System.batteryCharge());
   d42a4:	f7ff ffb6 	bl	d4214 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   d42a8:	ee10 0a10 	vmov	r0, s0
   d42ac:	f004 fc26 	bl	d8afc <__aeabi_f2d>
   d42b0:	4602      	mov	r2, r0
   d42b2:	460b      	mov	r3, r1
   d42b4:	480f      	ldr	r0, [pc, #60]	; (d42f4 <setup+0xbc>)
   d42b6:	4913      	ldr	r1, [pc, #76]	; (d4304 <setup+0xcc>)
   d42b8:	f7ff ff36 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;	// We got through setup without error
   d42bc:	4b12      	ldr	r3, [pc, #72]	; (d4308 <setup+0xd0>)
   d42be:	781a      	ldrb	r2, [r3, #0]
   d42c0:	b90a      	cbnz	r2, d42c6 <setup+0x8e>
   d42c2:	2202      	movs	r2, #2
   d42c4:	701a      	strb	r2, [r3, #0]
}
   d42c6:	b005      	add	sp, #20
   d42c8:	f85d fb04 	ldr.w	pc, [sp], #4
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d42cc:	4611      	mov	r1, r2
   d42ce:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d42d0:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d42d2:	f001 fcbf 	bl	d5c54 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d42d6:	9b03      	ldr	r3, [sp, #12]
  	if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d42d8:	2b8c      	cmp	r3, #140	; 0x8c
   d42da:	d1c8      	bne.n	d426e <setup+0x36>
   d42dc:	e7c0      	b.n	d4260 <setup+0x28>
    	if (resetCount > 6) alerts = 13;                 // Excessive resets
   d42de:	4b0b      	ldr	r3, [pc, #44]	; (d430c <setup+0xd4>)
   d42e0:	220d      	movs	r2, #13
   d42e2:	701a      	strb	r2, [r3, #0]
   d42e4:	e7c3      	b.n	d426e <setup+0x36>
   d42e6:	bf00      	nop
   d42e8:	2003f400 	.word	0x2003f400
   d42ec:	2003e1f4 	.word	0x2003e1f4
   d42f0:	000d9400 	.word	0x000d9400
   d42f4:	2003e5a4 	.word	0x2003e5a4
   d42f8:	4464c000 	.word	0x4464c000
   d42fc:	2003e09c 	.word	0x2003e09c
   d4300:	000d40d5 	.word	0x000d40d5
   d4304:	000d940c 	.word	0x000d940c
   d4308:	2003e32d 	.word	0x2003e32d
   d430c:	2003dfa0 	.word	0x2003dfa0

000d4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4310:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4312:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4314:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4316:	b17c      	cbz	r4, d4338 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4318:	6863      	ldr	r3, [r4, #4]
   d431a:	3b01      	subs	r3, #1
   d431c:	6063      	str	r3, [r4, #4]
   d431e:	b95b      	cbnz	r3, d4338 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4320:	6823      	ldr	r3, [r4, #0]
   d4322:	4620      	mov	r0, r4
   d4324:	689b      	ldr	r3, [r3, #8]
   d4326:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4328:	68a3      	ldr	r3, [r4, #8]
   d432a:	3b01      	subs	r3, #1
   d432c:	60a3      	str	r3, [r4, #8]
   d432e:	b91b      	cbnz	r3, d4338 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4330:	6823      	ldr	r3, [r4, #0]
   d4332:	4620      	mov	r0, r4
   d4334:	68db      	ldr	r3, [r3, #12]
   d4336:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4338:	4628      	mov	r0, r5
   d433a:	bd38      	pop	{r3, r4, r5, pc}

000d433c <_Z11sendMessagev>:

void sendMessage() {
   d433c:	b530      	push	{r4, r5, lr}
	Log.info("Sending to manager_mesh_server1");
   d433e:	495a      	ldr	r1, [pc, #360]	; (d44a8 <_Z11sendMessagev+0x16c>)
   d4340:	485a      	ldr	r0, [pc, #360]	; (d44ac <_Z11sendMessagev+0x170>)
void sendMessage() {
   d4342:	b0a3      	sub	sp, #140	; 0x8c
	Log.info("Sending to manager_mesh_server1");
   d4344:	f7ff fef0 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(blueLED,HIGH);
   d4348:	2101      	movs	r1, #1
   d434a:	2007      	movs	r0, #7
   d434c:	f004 fa11 	bl	d8772 <digitalWrite>

	const uint8_t temp = 85;
	uint8_t battChg = System.batteryCharge();
   d4350:	f7ff ff60 	bl	d4214 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   d4354:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   d4358:	a912      	add	r1, sp, #72	; 0x48
   d435a:	edcd 7a07 	vstr	s15, [sp, #28]
   d435e:	2007      	movs	r0, #7
   d4360:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d4364:	f7ff ff32 	bl	d41cc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   d4368:	1e04      	subs	r4, r0, #0
	uint8_t battState = System.batteryState();
    int16_t rssi = driver.lastRssi();
   d436a:	4851      	ldr	r0, [pc, #324]	; (d44b0 <_Z11sendMessagev+0x174>)
        return val;
   d436c:	bfa8      	it	ge
   d436e:	9c12      	ldrge	r4, [sp, #72]	; 0x48
   d4370:	f000 fa85 	bl	d487e <_ZN15RHGenericDriver8lastRssiEv>
	static uint8_t msgCnt = 0;
	uint8_t payload[22];

	payload[0] = 0; 								// to be replaced/updated
   d4374:	4b4f      	ldr	r3, [pc, #316]	; (d44b4 <_Z11sendMessagev+0x178>)
   d4376:	930c      	str	r3, [sp, #48]	; 0x30
	payload[1] = 0; 								// to be replaced/updated
	payload[2] = highByte(devID);					// Set for device
	payload[3] = lowByte(devID);
	payload[4] = firmVersion;						// Set for code release
   d4378:	2301      	movs	r3, #1
   d437a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	payload[5] = highByte(hourly);
   d437e:	4b4e      	ldr	r3, [pc, #312]	; (d44b8 <_Z11sendMessagev+0x17c>)
	payload[6] = lowByte(hourly); 
	payload[7] = highByte(daily);
	payload[8] = lowByte(daily); 
	payload[9] = temp;
	payload[10] = battChg;
   d4380:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
	payload[5] = highByte(hourly);
   d4384:	881b      	ldrh	r3, [r3, #0]
	payload[6] = lowByte(hourly); 
   d4386:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	payload[5] = highByte(hourly);
   d438a:	121a      	asrs	r2, r3, #8
	payload[7] = highByte(daily);
   d438c:	4b4b      	ldr	r3, [pc, #300]	; (d44bc <_Z11sendMessagev+0x180>)
	payload[5] = highByte(hourly);
   d438e:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	payload[7] = highByte(daily);
   d4392:	881b      	ldrh	r3, [r3, #0]
	payload[8] = lowByte(daily); 
   d4394:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	payload[7] = highByte(daily);
   d4398:	121a      	asrs	r2, r3, #8
	payload[9] = temp;
   d439a:	2355      	movs	r3, #85	; 0x55
   d439c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	payload[11] = battState;	
	payload[12] = resetCount;
   d43a0:	4b47      	ldr	r3, [pc, #284]	; (d44c0 <_Z11sendMessagev+0x184>)
	payload[7] = highByte(daily);
   d43a2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	payload[12] = resetCount;
   d43a6:	781b      	ldrb	r3, [r3, #0]
   d43a8:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	payload[13] = alerts;
   d43ac:	4b45      	ldr	r3, [pc, #276]	; (d44c4 <_Z11sendMessagev+0x188>)
	uint8_t battState = System.batteryState();
   d43ae:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
	payload[13] = alerts;
   d43b2:	781b      	ldrb	r3, [r3, #0]
   d43b4:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	payload[14] = highByte(rssi);
	payload[15] = lowByte(rssi); 
	payload[16] = msgCnt++;
   d43b8:	4b43      	ldr	r3, [pc, #268]	; (d44c8 <_Z11sendMessagev+0x18c>)
   d43ba:	781a      	ldrb	r2, [r3, #0]
   d43bc:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
   d43c0:	1c51      	adds	r1, r2, #1
	payload[14] = highByte(rssi);
   d43c2:	ba40      	rev16	r0, r0
	payload[16] = msgCnt++;
   d43c4:	7019      	strb	r1, [r3, #0]
	payload[14] = highByte(rssi);
   d43c6:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("sending message %d", payload[16]);
   d43ca:	4940      	ldr	r1, [pc, #256]	; (d44cc <_Z11sendMessagev+0x190>)
   d43cc:	4837      	ldr	r0, [pc, #220]	; (d44ac <_Z11sendMessagev+0x170>)
   d43ce:	f7ff feab 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d43d2:	f001 fe3d 	bl	d6050 <spark_cloud_flag_connected>
	if (Particle.connected()) Particle.publish("sending","payload to server1",PRIVATE);
   d43d6:	b160      	cbz	r0, d43f2 <_Z11sendMessagev+0xb6>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d43d8:	4b3d      	ldr	r3, [pc, #244]	; (d44d0 <_Z11sendMessagev+0x194>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43da:	4a3e      	ldr	r2, [pc, #248]	; (d44d4 <_Z11sendMessagev+0x198>)
   d43dc:	781b      	ldrb	r3, [r3, #0]
   d43de:	f88d 3000 	strb.w	r3, [sp]
   d43e2:	a812      	add	r0, sp, #72	; 0x48
   d43e4:	493c      	ldr	r1, [pc, #240]	; (d44d8 <_Z11sendMessagev+0x19c>)
   d43e6:	233c      	movs	r3, #60	; 0x3c
   d43e8:	f002 f8a6 	bl	d6538 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d43ec:	a813      	add	r0, sp, #76	; 0x4c
   d43ee:	f7ff ff8f 	bl	d4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	if (manager.sendtoWait(payload, sizeof(payload), SERVER1_ADDRESS) == RH_ROUTER_ERROR_NONE) {
   d43f2:	2300      	movs	r3, #0
   d43f4:	9300      	str	r3, [sp, #0]
   d43f6:	4839      	ldr	r0, [pc, #228]	; (d44dc <_Z11sendMessagev+0x1a0>)
   d43f8:	2302      	movs	r3, #2
   d43fa:	2216      	movs	r2, #22
   d43fc:	a90c      	add	r1, sp, #48	; 0x30
   d43fe:	f000 fc5b 	bl	d4cb8 <_ZN6RHMesh10sendtoWaitEPhhhh>
   d4402:	4604      	mov	r4, r0
   d4404:	2800      	cmp	r0, #0
   d4406:	d14c      	bne.n	d44a2 <_Z11sendMessagev+0x166>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server
		uint8_t len = sizeof(buf);
   d4408:	23f9      	movs	r3, #249	; 0xf9
		uint8_t from;     
		if (manager.recvfromAckTimeout(buf, &len, 3000, &from)) {
   d440a:	4d35      	ldr	r5, [pc, #212]	; (d44e0 <_Z11sendMessagev+0x1a4>)
		uint8_t len = sizeof(buf);
   d440c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		if (manager.recvfromAckTimeout(buf, &len, 3000, &from)) {
   d4410:	f10d 0327 	add.w	r3, sp, #39	; 0x27
   d4414:	e9cd 0003 	strd	r0, r0, [sp, #12]
   d4418:	e9cd 0001 	strd	r0, r0, [sp, #4]
   d441c:	9300      	str	r3, [sp, #0]
   d441e:	482f      	ldr	r0, [pc, #188]	; (d44dc <_Z11sendMessagev+0x1a0>)
   d4420:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d4424:	f10d 0226 	add.w	r2, sp, #38	; 0x26
   d4428:	4629      	mov	r1, r5
   d442a:	f000 fd4b 	bl	d4ec4 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>
   d442e:	2800      	cmp	r0, #0
   d4430:	d032      	beq.n	d4498 <_Z11sendMessagev+0x15c>
			buf[len] = 0;
   d4432:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
			char data[64];
			snprintf(data, sizeof(data),"Response: 0x%02x rssi=%d - delivery %s", from, driver.lastRssi(), (buf[0] == payload[16]) ? "successful":"unsuccessful");
   d4436:	481e      	ldr	r0, [pc, #120]	; (d44b0 <_Z11sendMessagev+0x174>)
			buf[len] = 0;
   d4438:	54ec      	strb	r4, [r5, r3]
			snprintf(data, sizeof(data),"Response: 0x%02x rssi=%d - delivery %s", from, driver.lastRssi(), (buf[0] == payload[16]) ? "successful":"unsuccessful");
   d443a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   d443e:	9307      	str	r3, [sp, #28]
   d4440:	f000 fa1d 	bl	d487e <_ZN15RHGenericDriver8lastRssiEv>
   d4444:	782d      	ldrb	r5, [r5, #0]
   d4446:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
   d444a:	4926      	ldr	r1, [pc, #152]	; (d44e4 <_Z11sendMessagev+0x1a8>)
   d444c:	4a26      	ldr	r2, [pc, #152]	; (d44e8 <_Z11sendMessagev+0x1ac>)
   d444e:	9b07      	ldr	r3, [sp, #28]
   d4450:	42a5      	cmp	r5, r4
   d4452:	bf18      	it	ne
   d4454:	460a      	movne	r2, r1
   d4456:	e9cd 0200 	strd	r0, r2, [sp]
   d445a:	2140      	movs	r1, #64	; 0x40
   d445c:	4a23      	ldr	r2, [pc, #140]	; (d44ec <_Z11sendMessagev+0x1b0>)
   d445e:	a812      	add	r0, sp, #72	; 0x48
   d4460:	f001 fe8e 	bl	d6180 <snprintf>
			Log.info(data);
   d4464:	4811      	ldr	r0, [pc, #68]	; (d44ac <_Z11sendMessagev+0x170>)
   d4466:	a912      	add	r1, sp, #72	; 0x48
   d4468:	f7ff fe5e 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d446c:	f001 fdf0 	bl	d6050 <spark_cloud_flag_connected>
			if (Particle.connected()) Particle.publish("Update",data,PRIVATE);
   d4470:	b160      	cbz	r0, d448c <_Z11sendMessagev+0x150>
   d4472:	4b17      	ldr	r3, [pc, #92]	; (d44d0 <_Z11sendMessagev+0x194>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4474:	491e      	ldr	r1, [pc, #120]	; (d44f0 <_Z11sendMessagev+0x1b4>)
   d4476:	781b      	ldrb	r3, [r3, #0]
   d4478:	f88d 3000 	strb.w	r3, [sp]
   d447c:	a80a      	add	r0, sp, #40	; 0x28
   d447e:	233c      	movs	r3, #60	; 0x3c
   d4480:	aa12      	add	r2, sp, #72	; 0x48
   d4482:	f002 f859 	bl	d6538 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4486:	a80b      	add	r0, sp, #44	; 0x2c
   d4488:	f7ff ff42 	bl	d4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
			Log.info("No reply, is rf95_mesh_server1, rf95_mesh_server2 and rf95_mesh_server3 running?");
		}
	}
	else Log.info("sendtoWait failed. Are the intermediate mesh servers running?");

	digitalWrite(blueLED,LOW);
   d448c:	2100      	movs	r1, #0
   d448e:	2007      	movs	r0, #7
   d4490:	f004 f96f 	bl	d8772 <digitalWrite>
}
   d4494:	b023      	add	sp, #140	; 0x8c
   d4496:	bd30      	pop	{r4, r5, pc}
			Log.info("No reply, is rf95_mesh_server1, rf95_mesh_server2 and rf95_mesh_server3 running?");
   d4498:	4916      	ldr	r1, [pc, #88]	; (d44f4 <_Z11sendMessagev+0x1b8>)
	else Log.info("sendtoWait failed. Are the intermediate mesh servers running?");
   d449a:	4804      	ldr	r0, [pc, #16]	; (d44ac <_Z11sendMessagev+0x170>)
   d449c:	f7ff fe44 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
   d44a0:	e7f4      	b.n	d448c <_Z11sendMessagev+0x150>
   d44a2:	4915      	ldr	r1, [pc, #84]	; (d44f8 <_Z11sendMessagev+0x1bc>)
   d44a4:	e7f9      	b.n	d449a <_Z11sendMessagev+0x15e>
   d44a6:	bf00      	nop
   d44a8:	000d943a 	.word	0x000d943a
   d44ac:	2003e5a4 	.word	0x2003e5a4
   d44b0:	2003e09c 	.word	0x2003e09c
   d44b4:	feff0000 	.word	0xfeff0000
   d44b8:	2003e1cc 	.word	0x2003e1cc
   d44bc:	2003e09a 	.word	0x2003e09a
   d44c0:	2003f400 	.word	0x2003f400
   d44c4:	2003dfa0 	.word	0x2003dfa0
   d44c8:	2003df90 	.word	0x2003df90
   d44cc:	000d945a 	.word	0x000d945a
   d44d0:	2003df80 	.word	0x2003df80
   d44d4:	000d946d 	.word	0x000d946d
   d44d8:	000d9480 	.word	0x000d9480
   d44dc:	2003e1f4 	.word	0x2003e1f4
   d44e0:	2003dfa1 	.word	0x2003dfa1
   d44e4:	000d942d 	.word	0x000d942d
   d44e8:	000d942f 	.word	0x000d942f
   d44ec:	000d9488 	.word	0x000d9488
   d44f0:	000d94af 	.word	0x000d94af
   d44f4:	000d94b6 	.word	0x000d94b6
   d44f8:	000d9507 	.word	0x000d9507

000d44fc <loop>:
{
   d44fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (state) {
   d4500:	4d16      	ldr	r5, [pc, #88]	; (d455c <loop+0x60>)
   d4502:	f8df 8060 	ldr.w	r8, [pc, #96]	; d4564 <loop+0x68>
   d4506:	782b      	ldrb	r3, [r5, #0]
   d4508:	2b02      	cmp	r3, #2
   d450a:	d008      	beq.n	d451e <loop+0x22>
   d450c:	2b06      	cmp	r3, #6
   d450e:	d01f      	beq.n	d4550 <loop+0x54>
	if (sensorDetect) recordCount();                // The ISR had raised the sensor flag - this will service interrupts regardless of state
   d4510:	f898 3000 	ldrb.w	r3, [r8]
   d4514:	b303      	cbz	r3, d4558 <loop+0x5c>
}
   d4516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (sensorDetect) recordCount();                // The ISR had raised the sensor flag - this will service interrupts regardless of state
   d451a:	f7ff be1d 	b.w	d4158 <_Z11recordCountv>
			if (millis() - lastTransmit > sendFrequency * 1000L) {	// Using the sendFrequency set above, we go to the reporing state
   d451e:	4c10      	ldr	r4, [pc, #64]	; (d4560 <loop+0x64>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4520:	f001 fbb0 	bl	d5c84 <HAL_Timer_Get_Milli_Seconds>
   d4524:	e9d4 3200 	ldrd	r3, r2, [r4]
   d4528:	1ac6      	subs	r6, r0, r3
   d452a:	eb62 0742 	sbc.w	r7, r2, r2, lsl #1
   d452e:	f247 5230 	movw	r2, #30000	; 0x7530
   d4532:	2300      	movs	r3, #0
   d4534:	42b2      	cmp	r2, r6
   d4536:	41bb      	sbcs	r3, r7
   d4538:	daea      	bge.n	d4510 <loop+0x14>
				sensorDetect = true;
   d453a:	2301      	movs	r3, #1
   d453c:	f888 3000 	strb.w	r3, [r8]
   d4540:	f001 fba0 	bl	d5c84 <HAL_Timer_Get_Milli_Seconds>
				lastTransmit = millis();
   d4544:	2300      	movs	r3, #0
   d4546:	6063      	str	r3, [r4, #4]
   d4548:	6020      	str	r0, [r4, #0]
				state = REPORTING_STATE;
   d454a:	2306      	movs	r3, #6
			state = IDLE_STATE;
   d454c:	702b      	strb	r3, [r5, #0]
		break;
   d454e:	e7df      	b.n	d4510 <loop+0x14>
			sendMessage();
   d4550:	f7ff fef4 	bl	d433c <_Z11sendMessagev>
			state = IDLE_STATE;
   d4554:	2302      	movs	r3, #2
   d4556:	e7f9      	b.n	d454c <loop+0x50>
}
   d4558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d455c:	2003e32d 	.word	0x2003e32d
   d4560:	2003df98 	.word	0x2003df98
   d4564:	2003e32c 	.word	0x2003e32c

000d4568 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4568:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d456a:	e9d0 5300 	ldrd	r5, r3, [r0]
   d456e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4570:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4572:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d4576:	42ae      	cmp	r6, r5
   d4578:	d004      	beq.n	d4584 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d457a:	4628      	mov	r0, r5
   d457c:	f003 fe1e 	bl	d81bc <_ZN6StringD1Ev>
   d4580:	3514      	adds	r5, #20
   d4582:	e7f8      	b.n	d4576 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4584:	6820      	ldr	r0, [r4, #0]
   d4586:	f001 fdeb 	bl	d6160 <free>
    AllocatorT::free(data_);
}
   d458a:	4620      	mov	r0, r4
   d458c:	bd70      	pop	{r4, r5, r6, pc}

000d458e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d458e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4592:	4604      	mov	r4, r0
   d4594:	460d      	mov	r5, r1
   d4596:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4598:	d916      	bls.n	d45c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d459a:	4290      	cmp	r0, r2
   d459c:	d215      	bcs.n	d45ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d459e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d45a2:	1a75      	subs	r5, r6, r1
   d45a4:	f1a1 0714 	sub.w	r7, r1, #20
   d45a8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d45aa:	42b7      	cmp	r7, r6
   d45ac:	d01c      	beq.n	d45e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d45ae:	b12c      	cbz	r4, d45bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d45b0:	4631      	mov	r1, r6
   d45b2:	4620      	mov	r0, r4
   d45b4:	f003 fe6a 	bl	d828c <_ZN6StringC1EOS_>
   d45b8:	7c33      	ldrb	r3, [r6, #16]
   d45ba:	7423      	strb	r3, [r4, #16]
   d45bc:	4630      	mov	r0, r6
   d45be:	f003 fdfd 	bl	d81bc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d45c2:	3e14      	subs	r6, #20
   d45c4:	3c14      	subs	r4, #20
   d45c6:	e7f0      	b.n	d45aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d45c8:	d00e      	beq.n	d45e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d45ca:	42b5      	cmp	r5, r6
   d45cc:	d00c      	beq.n	d45e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d45ce:	b12c      	cbz	r4, d45dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d45d0:	4629      	mov	r1, r5
   d45d2:	4620      	mov	r0, r4
   d45d4:	f003 fe5a 	bl	d828c <_ZN6StringC1EOS_>
   d45d8:	7c2b      	ldrb	r3, [r5, #16]
   d45da:	7423      	strb	r3, [r4, #16]
   d45dc:	4628      	mov	r0, r5
   d45de:	f003 fded 	bl	d81bc <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d45e2:	3514      	adds	r5, #20
   d45e4:	3414      	adds	r4, #20
   d45e6:	e7f0      	b.n	d45ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d45e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d45ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d45ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d45ee:	2300      	movs	r3, #0
   d45f0:	e9c0 3300 	strd	r3, r3, [r0]
   d45f4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d45f6:	684f      	ldr	r7, [r1, #4]
   d45f8:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d45fa:	4604      	mov	r4, r0
   d45fc:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d45fe:	dd23      	ble.n	d4648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4600:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4604:	fb08 f007 	mul.w	r0, r8, r7
   d4608:	f001 fda2 	bl	d6150 <malloc>
            if (!d) {
   d460c:	4605      	mov	r5, r0
   d460e:	b1d8      	cbz	r0, d4648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4610:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4614:	fb08 1202 	mla	r2, r8, r2, r1
   d4618:	f7ff ffb9 	bl	d458e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d461c:	6820      	ldr	r0, [r4, #0]
   d461e:	f001 fd9f 	bl	d6160 <free>
        data_ = d;
   d4622:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4624:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4626:	e9d6 7300 	ldrd	r7, r3, [r6]
   d462a:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d462e:	45b8      	cmp	r8, r7
   d4630:	d008      	beq.n	d4644 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d4632:	4639      	mov	r1, r7
   d4634:	4628      	mov	r0, r5
   d4636:	f003 fe43 	bl	d82c0 <_ZN6StringC1ERKS_>
   d463a:	7c3b      	ldrb	r3, [r7, #16]
   d463c:	742b      	strb	r3, [r5, #16]
   d463e:	3714      	adds	r7, #20
   d4640:	3514      	adds	r5, #20
   d4642:	e7f4      	b.n	d462e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d4644:	6873      	ldr	r3, [r6, #4]
   d4646:	6063      	str	r3, [r4, #4]
}
   d4648:	4620      	mov	r0, r4
   d464a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4650 <_GLOBAL__sub_I_SystemMode>:
}
   d4650:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d4652:	4b2e      	ldr	r3, [pc, #184]	; (d470c <_GLOBAL__sub_I_SystemMode+0xbc>)
    SleepResult() {}
   d4654:	4a2e      	ldr	r2, [pc, #184]	; (d4710 <_GLOBAL__sub_I_SystemMode+0xc0>)
   d4656:	2501      	movs	r5, #1
   d4658:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   d465a:	4b2e      	ldr	r3, [pc, #184]	; (d4714 <_GLOBAL__sub_I_SystemMode+0xc4>)
   d465c:	2400      	movs	r4, #0
   d465e:	b08d      	sub	sp, #52	; 0x34
    SleepResult() {}
   d4660:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4662:	601c      	str	r4, [r3, #0]
   d4664:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d4666:	719c      	strb	r4, [r3, #6]
        set_system_mode(mode);
   d4668:	2003      	movs	r0, #3
   d466a:	f001 fca5 	bl	d5fb8 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d466e:	4621      	mov	r1, r4
   d4670:	4628      	mov	r0, r5
   d4672:	f001 fcb1 	bl	d5fd8 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d4676:	4629      	mov	r1, r5
   d4678:	2004      	movs	r0, #4
   d467a:	f001 fae3 	bl	d5c44 <HAL_Feature_Set>
        capacity_(0) {
   d467e:	e9cd 4400 	strd	r4, r4, [sp]
   d4682:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d4684:	f003 ff64 	bl	d8550 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d4688:	4c23      	ldr	r4, [pc, #140]	; (d4718 <_GLOBAL__sub_I_SystemMode+0xc8>)
   d468a:	4606      	mov	r6, r0
   d468c:	4669      	mov	r1, sp
   d468e:	a803      	add	r0, sp, #12
   d4690:	f7ff ffab 	bl	d45ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4694:	4627      	mov	r7, r4
        stream_(&stream) {
   d4696:	a903      	add	r1, sp, #12
   d4698:	a806      	add	r0, sp, #24
   d469a:	f7ff ffa6 	bl	d45ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d469e:	4b1f      	ldr	r3, [pc, #124]	; (d471c <_GLOBAL__sub_I_SystemMode+0xcc>)
   d46a0:	f847 3b04 	str.w	r3, [r7], #4
   d46a4:	a906      	add	r1, sp, #24
   d46a6:	a809      	add	r0, sp, #36	; 0x24
   d46a8:	f7ff ff9f 	bl	d45ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d46ac:	aa09      	add	r2, sp, #36	; 0x24
   d46ae:	211e      	movs	r1, #30
   d46b0:	4638      	mov	r0, r7
   d46b2:	f003 f852 	bl	d775a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d46b6:	a809      	add	r0, sp, #36	; 0x24
   d46b8:	f7ff ff56 	bl	d4568 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d46bc:	a806      	add	r0, sp, #24
   d46be:	f7ff ff53 	bl	d4568 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d46c2:	4b17      	ldr	r3, [pc, #92]	; (d4720 <_GLOBAL__sub_I_SystemMode+0xd0>)
   d46c4:	6023      	str	r3, [r4, #0]
   d46c6:	6226      	str	r6, [r4, #32]
   d46c8:	a803      	add	r0, sp, #12
   d46ca:	f7ff ff4d 	bl	d4568 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d46ce:	4b15      	ldr	r3, [pc, #84]	; (d4724 <_GLOBAL__sub_I_SystemMode+0xd4>)
   d46d0:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d46d2:	f003 ff3d 	bl	d8550 <_Z16_fetch_usbserialv>
   d46d6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d46da:	f003 ff29 	bl	d8530 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d46de:	f002 fce1 	bl	d70a4 <_ZN5spark10LogManager8instanceEv>
   d46e2:	4621      	mov	r1, r4
RH_RF95 driver(RFM95_CS, RFM95_INT);
   d46e4:	4c10      	ldr	r4, [pc, #64]	; (d4728 <_GLOBAL__sub_I_SystemMode+0xd8>)
   d46e6:	f002 ffca 	bl	d767e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   d46ea:	4668      	mov	r0, sp
   d46ec:	f7ff ff3c 	bl	d4568 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
RH_RF95 driver(RFM95_CS, RFM95_INT);
   d46f0:	4b0e      	ldr	r3, [pc, #56]	; (d472c <_GLOBAL__sub_I_SystemMode+0xdc>)
   d46f2:	2202      	movs	r2, #2
   d46f4:	2106      	movs	r1, #6
   d46f6:	4620      	mov	r0, r4
   d46f8:	f000 ffde 	bl	d56b8 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, CLIENT_ADDRESS);
   d46fc:	462a      	mov	r2, r5
   d46fe:	4621      	mov	r1, r4
   d4700:	480b      	ldr	r0, [pc, #44]	; (d4730 <_GLOBAL__sub_I_SystemMode+0xe0>)
   d4702:	f000 facf 	bl	d4ca4 <_ZN6RHMeshC1ER15RHGenericDriverh>
}
   d4706:	b00d      	add	sp, #52	; 0x34
   d4708:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d470a:	bf00      	nop
   d470c:	2003df80 	.word	0x2003df80
   d4710:	ffff0000 	.word	0xffff0000
   d4714:	2003df70 	.word	0x2003df70
   d4718:	2003e1d0 	.word	0x2003e1d0
   d471c:	000d9550 	.word	0x000d9550
   d4720:	000d9970 	.word	0x000d9970
   d4724:	000d9568 	.word	0x000d9568
   d4728:	2003e09c 	.word	0x2003e09c
   d472c:	2003e33c 	.word	0x2003e33c
   d4730:	2003e1f4 	.word	0x2003e1f4

000d4734 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   d4734:	6001      	str	r1, [r0, #0]
   d4736:	7102      	strb	r2, [r0, #4]
{
}
   d4738:	4770      	bx	lr

000d473a <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   d473a:	6800      	ldr	r0, [r0, #0]
   d473c:	6803      	ldr	r3, [r0, #0]
   d473e:	68db      	ldr	r3, [r3, #12]
   d4740:	4718      	bx	r3

000d4742 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   d4742:	6800      	ldr	r0, [r0, #0]
   d4744:	6803      	ldr	r3, [r0, #0]
   d4746:	6a1b      	ldr	r3, [r3, #32]
   d4748:	4718      	bx	r3

000d474a <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   d474a:	6800      	ldr	r0, [r0, #0]
   d474c:	6803      	ldr	r3, [r0, #0]
   d474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4750:	4718      	bx	r3

000d4752 <_ZN10RHDatagram11setHeaderToEh>:
    return _thisAddress;
}

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   d4752:	6800      	ldr	r0, [r0, #0]
   d4754:	6803      	ldr	r3, [r0, #0]
   d4756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4758:	4718      	bx	r3

000d475a <_ZN10RHDatagram6sendtoEPhhh>:
{
   d475a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d475c:	4605      	mov	r5, r0
   d475e:	460c      	mov	r4, r1
    setHeaderTo(address);
   d4760:	4619      	mov	r1, r3
{
   d4762:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   d4764:	f7ff fff5 	bl	d4752 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   d4768:	6828      	ldr	r0, [r5, #0]
   d476a:	9a01      	ldr	r2, [sp, #4]
   d476c:	6803      	ldr	r3, [r0, #0]
   d476e:	695b      	ldr	r3, [r3, #20]
   d4770:	4621      	mov	r1, r4
}
   d4772:	b003      	add	sp, #12
   d4774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   d4778:	4718      	bx	r3

000d477a <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   d477a:	6800      	ldr	r0, [r0, #0]
   d477c:	6803      	ldr	r3, [r0, #0]
   d477e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4780:	4718      	bx	r3

000d4782 <_ZN10RHDatagram14setThisAddressEh>:
{
   d4782:	b538      	push	{r3, r4, r5, lr}
   d4784:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   d4786:	6800      	ldr	r0, [r0, #0]
   d4788:	6803      	ldr	r3, [r0, #0]
{
   d478a:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   d478c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d478e:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   d4790:	4629      	mov	r1, r5
   d4792:	4620      	mov	r0, r4
   d4794:	f7ff fff1 	bl	d477a <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   d4798:	7125      	strb	r5, [r4, #4]
}
   d479a:	bd38      	pop	{r3, r4, r5, pc}

000d479c <_ZN10RHDatagram4initEv>:
{
   d479c:	b538      	push	{r3, r4, r5, lr}
   d479e:	4604      	mov	r4, r0
    bool ret = _driver.init();
   d47a0:	6800      	ldr	r0, [r0, #0]
   d47a2:	6803      	ldr	r3, [r0, #0]
   d47a4:	689b      	ldr	r3, [r3, #8]
   d47a6:	4798      	blx	r3
    if (ret)
   d47a8:	4605      	mov	r5, r0
   d47aa:	b118      	cbz	r0, d47b4 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   d47ac:	7921      	ldrb	r1, [r4, #4]
   d47ae:	4620      	mov	r0, r4
   d47b0:	f7ff ffe7 	bl	d4782 <_ZN10RHDatagram14setThisAddressEh>
}
   d47b4:	4628      	mov	r0, r5
   d47b6:	bd38      	pop	{r3, r4, r5, pc}

000d47b8 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   d47b8:	6800      	ldr	r0, [r0, #0]
   d47ba:	6803      	ldr	r3, [r0, #0]
   d47bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d47be:	4718      	bx	r3

000d47c0 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   d47c0:	6800      	ldr	r0, [r0, #0]
   d47c2:	6803      	ldr	r3, [r0, #0]
   d47c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d47c6:	4718      	bx	r3

000d47c8 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   d47c8:	6800      	ldr	r0, [r0, #0]
   d47ca:	6803      	ldr	r3, [r0, #0]
   d47cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d47ce:	4718      	bx	r3

000d47d0 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   d47d0:	6800      	ldr	r0, [r0, #0]
   d47d2:	6803      	ldr	r3, [r0, #0]
   d47d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d47d6:	4718      	bx	r3

000d47d8 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   d47d8:	6800      	ldr	r0, [r0, #0]
   d47da:	6803      	ldr	r3, [r0, #0]
   d47dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d47de:	4718      	bx	r3

000d47e0 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   d47e0:	6800      	ldr	r0, [r0, #0]
   d47e2:	6803      	ldr	r3, [r0, #0]
   d47e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d47e6:	4718      	bx	r3

000d47e8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   d47e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d47ec:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   d47ee:	6800      	ldr	r0, [r0, #0]
{
   d47f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   d47f2:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   d47f4:	6803      	ldr	r3, [r0, #0]
   d47f6:	691b      	ldr	r3, [r3, #16]
{
   d47f8:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   d47fc:	4798      	blx	r3
   d47fe:	4605      	mov	r5, r0
   d4800:	b1c8      	cbz	r0, d4836 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   d4802:	b11e      	cbz	r6, d480c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   d4804:	4620      	mov	r0, r4
   d4806:	f7ff ffe3 	bl	d47d0 <_ZN10RHDatagram10headerFromEv>
   d480a:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   d480c:	f1b9 0f00 	cmp.w	r9, #0
   d4810:	d004      	beq.n	d481c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   d4812:	4620      	mov	r0, r4
   d4814:	f7ff ffd8 	bl	d47c8 <_ZN10RHDatagram8headerToEv>
   d4818:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   d481c:	f1b8 0f00 	cmp.w	r8, #0
   d4820:	d004      	beq.n	d482c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   d4822:	4620      	mov	r0, r4
   d4824:	f7ff ffd8 	bl	d47d8 <_ZN10RHDatagram8headerIdEv>
   d4828:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   d482c:	b11f      	cbz	r7, d4836 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   d482e:	4620      	mov	r0, r4
   d4830:	f7ff ffd6 	bl	d47e0 <_ZN10RHDatagram11headerFlagsEv>
   d4834:	7038      	strb	r0, [r7, #0]
}
   d4836:	4628      	mov	r0, r5
   d4838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d483c <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   d483c:	2001      	movs	r0, #1
   d483e:	4770      	bx	lr

000d4840 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   d4840:	7903      	ldrb	r3, [r0, #4]
   d4842:	2b03      	cmp	r3, #3
   d4844:	d0fc      	beq.n	d4840 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   d4846:	2001      	movs	r0, #1
   d4848:	4770      	bx	lr

000d484a <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   d484a:	2000      	movs	r0, #0
   d484c:	4770      	bx	lr

000d484e <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   d484e:	7181      	strb	r1, [r0, #6]
}
   d4850:	4770      	bx	lr

000d4852 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   d4852:	7141      	strb	r1, [r0, #5]
}
   d4854:	4770      	bx	lr

000d4856 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   d4856:	72c1      	strb	r1, [r0, #11]
}
   d4858:	4770      	bx	lr

000d485a <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   d485a:	7301      	strb	r1, [r0, #12]
}
   d485c:	4770      	bx	lr

000d485e <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   d485e:	7341      	strb	r1, [r0, #13]
}
   d4860:	4770      	bx	lr

000d4862 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   d4862:	7b83      	ldrb	r3, [r0, #14]
   d4864:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   d4868:	4311      	orrs	r1, r2
   d486a:	7381      	strb	r1, [r0, #14]
}
   d486c:	4770      	bx	lr

000d486e <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   d486e:	79c0      	ldrb	r0, [r0, #7]
}
   d4870:	4770      	bx	lr

000d4872 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   d4872:	7a00      	ldrb	r0, [r0, #8]
}
   d4874:	4770      	bx	lr

000d4876 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   d4876:	7a40      	ldrb	r0, [r0, #9]
}
   d4878:	4770      	bx	lr

000d487a <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   d487a:	7a80      	ldrb	r0, [r0, #10]
}
   d487c:	4770      	bx	lr

000d487e <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   d487e:	8a00      	ldrh	r0, [r0, #16]
}
   d4880:	b200      	sxth	r0, r0
   d4882:	4770      	bx	lr

000d4884 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   d4884:	7900      	ldrb	r0, [r0, #4]
}
   d4886:	4770      	bx	lr

000d4888 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   d4888:	7101      	strb	r1, [r0, #4]
}
   d488a:	4770      	bx	lr

000d488c <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   d488c:	8a40      	ldrh	r0, [r0, #18]
}
   d488e:	b280      	uxth	r0, r0
   d4890:	4770      	bx	lr

000d4892 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   d4892:	8a80      	ldrh	r0, [r0, #20]
}
   d4894:	b280      	uxth	r0, r0
   d4896:	4770      	bx	lr

000d4898 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   d4898:	8ac0      	ldrh	r0, [r0, #22]
}
   d489a:	b280      	uxth	r0, r0
   d489c:	4770      	bx	lr

000d489e <_ZN15RHGenericDriver13waitAvailableEt>:
{
   d489e:	b538      	push	{r3, r4, r5, lr}
   d48a0:	4605      	mov	r5, r0
   d48a2:	460c      	mov	r4, r1
    while (!available())
   d48a4:	682b      	ldr	r3, [r5, #0]
   d48a6:	4628      	mov	r0, r5
   d48a8:	68db      	ldr	r3, [r3, #12]
   d48aa:	4798      	blx	r3
   d48ac:	b928      	cbnz	r0, d48ba <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   d48ae:	2c00      	cmp	r4, #0
   d48b0:	d0f8      	beq.n	d48a4 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   d48b2:	4620      	mov	r0, r4
   d48b4:	f001 fc8c 	bl	d61d0 <delay>
   d48b8:	e7f4      	b.n	d48a4 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   d48ba:	bd38      	pop	{r3, r4, r5, pc}

000d48bc <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   d48bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d48be:	4605      	mov	r5, r0
   d48c0:	460f      	mov	r7, r1
   d48c2:	4614      	mov	r4, r2
   d48c4:	f001 f9de 	bl	d5c84 <HAL_Timer_Get_Milli_Seconds>
   d48c8:	4606      	mov	r6, r0
   d48ca:	f001 f9db 	bl	d5c84 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d48ce:	1b80      	subs	r0, r0, r6
   d48d0:	42b8      	cmp	r0, r7
   d48d2:	d20a      	bcs.n	d48ea <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   d48d4:	682b      	ldr	r3, [r5, #0]
   d48d6:	4628      	mov	r0, r5
   d48d8:	68db      	ldr	r3, [r3, #12]
   d48da:	4798      	blx	r3
   d48dc:	b930      	cbnz	r0, d48ec <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   d48de:	2c00      	cmp	r4, #0
   d48e0:	d0f3      	beq.n	d48ca <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   d48e2:	4620      	mov	r0, r4
   d48e4:	f001 fc74 	bl	d61d0 <delay>
   d48e8:	e7ef      	b.n	d48ca <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   d48ea:	2000      	movs	r0, #0
}
   d48ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d48ee <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   d48ee:	b570      	push	{r4, r5, r6, lr}
   d48f0:	4604      	mov	r4, r0
   d48f2:	460e      	mov	r6, r1
   d48f4:	f001 f9c6 	bl	d5c84 <HAL_Timer_Get_Milli_Seconds>
   d48f8:	4605      	mov	r5, r0
   d48fa:	f001 f9c3 	bl	d5c84 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d48fe:	1b40      	subs	r0, r0, r5
   d4900:	42b0      	cmp	r0, r6
   d4902:	d204      	bcs.n	d490e <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   d4904:	7923      	ldrb	r3, [r4, #4]
   d4906:	2b03      	cmp	r3, #3
   d4908:	d0f7      	beq.n	d48fa <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   d490a:	2001      	movs	r0, #1
}
   d490c:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d490e:	2000      	movs	r0, #0
   d4910:	e7fc      	b.n	d490c <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000d4912 <_ZN15RHGenericDriver7waitCADEv>:
{
   d4912:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   d4914:	69c3      	ldr	r3, [r0, #28]
{
   d4916:	4604      	mov	r4, r0
    if (!_cad_timeout)
   d4918:	b1b3      	cbz	r3, d4948 <_ZN15RHGenericDriver7waitCADEv+0x36>
   d491a:	f001 f9b3 	bl	d5c84 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d491e:	2664      	movs	r6, #100	; 0x64
   d4920:	4605      	mov	r5, r0
    while (isChannelActive())
   d4922:	6823      	ldr	r3, [r4, #0]
   d4924:	4620      	mov	r0, r4
   d4926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4928:	4798      	blx	r3
   d492a:	b168      	cbz	r0, d4948 <_ZN15RHGenericDriver7waitCADEv+0x36>
   d492c:	f001 f9aa 	bl	d5c84 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   d4930:	69e3      	ldr	r3, [r4, #28]
   d4932:	1b40      	subs	r0, r0, r5
   d4934:	4298      	cmp	r0, r3
   d4936:	d809      	bhi.n	d494c <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d4938:	210a      	movs	r1, #10
   d493a:	2001      	movs	r0, #1
   d493c:	f003 fb6d 	bl	d801a <_Z6randomii>
   d4940:	4370      	muls	r0, r6
   d4942:	f001 fc45 	bl	d61d0 <delay>
    while (isChannelActive())
   d4946:	e7ec      	b.n	d4922 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   d4948:	2001      	movs	r0, #1
}
   d494a:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   d494c:	2000      	movs	r0, #0
   d494e:	e7fc      	b.n	d494a <_ZN15RHGenericDriver7waitCADEv+0x38>

000d4950 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   d4950:	4a06      	ldr	r2, [pc, #24]	; (d496c <_ZN15RHGenericDriverC1Ev+0x1c>)
   d4952:	6002      	str	r2, [r0, #0]
   d4954:	21ff      	movs	r1, #255	; 0xff
   d4956:	2200      	movs	r2, #0
   d4958:	7102      	strb	r2, [r0, #4]
   d495a:	7141      	strb	r1, [r0, #5]
   d495c:	8242      	strh	r2, [r0, #18]
   d495e:	72c1      	strb	r1, [r0, #11]
   d4960:	8282      	strh	r2, [r0, #20]
   d4962:	8181      	strh	r1, [r0, #12]
   d4964:	7382      	strb	r2, [r0, #14]
   d4966:	82c2      	strh	r2, [r0, #22]
   d4968:	61c2      	str	r2, [r0, #28]
}
   d496a:	4770      	bx	lr
   d496c:	000d9580 	.word	0x000d9580

000d4970 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   d4970:	4770      	bx	lr

000d4972 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   d4972:	4770      	bx	lr

000d4974 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   d4974:	4770      	bx	lr

000d4976 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   d4976:	4770      	bx	lr

000d4978 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   d4978:	4770      	bx	lr

000d497a <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   d497a:	7141      	strb	r1, [r0, #5]
}
   d497c:	4770      	bx	lr

000d497e <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   d497e:	7181      	strb	r1, [r0, #6]
}
   d4980:	4770      	bx	lr

000d4982 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   d4982:	7101      	strb	r1, [r0, #4]
}
   d4984:	4770      	bx	lr
	...

000d4988 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d4988:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   d498a:	4d03      	ldr	r5, [pc, #12]	; (d4998 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   d498c:	6005      	str	r5, [r0, #0]
   d498e:	7101      	strb	r1, [r0, #4]
   d4990:	7142      	strb	r2, [r0, #5]
   d4992:	7183      	strb	r3, [r0, #6]
}
   d4994:	bd30      	pop	{r4, r5, pc}
   d4996:	bf00      	nop
   d4998:	000d9600 	.word	0x000d9600

000d499c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d499c:	4770      	bx	lr

000d499e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d499e:	b510      	push	{r4, lr}
  }
   d49a0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d49a2:	4604      	mov	r4, r0
  }
   d49a4:	f003 ff3c 	bl	d8820 <_ZdlPvj>
   d49a8:	4620      	mov	r0, r4
   d49aa:	bd10      	pop	{r4, pc}

000d49ac <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d49ac:	b40e      	push	{r1, r2, r3}
   d49ae:	b503      	push	{r0, r1, lr}
   d49b0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d49b2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d49b4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d49b8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d49ba:	f003 faf2 	bl	d7fa2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d49be:	b002      	add	sp, #8
   d49c0:	f85d eb04 	ldr.w	lr, [sp], #4
   d49c4:	b003      	add	sp, #12
   d49c6:	4770      	bx	lr

000d49c8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d49c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d49ca:	4604      	mov	r4, r0
   d49cc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d49ce:	7922      	ldrb	r2, [r4, #4]
   d49d0:	68a3      	ldr	r3, [r4, #8]
   d49d2:	b132      	cbz	r2, d49e2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d49d4:	b9a3      	cbnz	r3, d4a00 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d49d6:	490b      	ldr	r1, [pc, #44]	; (d4a04 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d49d8:	b002      	add	sp, #8
   d49da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d49de:	f003 baaf 	b.w	d7f40 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d49e2:	4a09      	ldr	r2, [pc, #36]	; (d4a08 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d49e4:	7b26      	ldrb	r6, [r4, #12]
   d49e6:	4d09      	ldr	r5, [pc, #36]	; (d4a0c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d49e8:	4909      	ldr	r1, [pc, #36]	; (d4a10 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d49ea:	7b64      	ldrb	r4, [r4, #13]
   d49ec:	2e01      	cmp	r6, #1
   d49ee:	bf18      	it	ne
   d49f0:	4629      	movne	r1, r5
   d49f2:	e9cd 1400 	strd	r1, r4, [sp]
   d49f6:	4907      	ldr	r1, [pc, #28]	; (d4a14 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d49f8:	f7ff ffd8 	bl	d49ac <_ZN5Print6printfEPKcz>
  }
   d49fc:	b002      	add	sp, #8
   d49fe:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4a00:	4a05      	ldr	r2, [pc, #20]	; (d4a18 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4a02:	e7ef      	b.n	d49e4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4a04:	000d963d 	.word	0x000d963d
   d4a08:	000d9937 	.word	0x000d9937
   d4a0c:	000d9639 	.word	0x000d9639
   d4a10:	000d9635 	.word	0x000d9635
   d4a14:	000d9653 	.word	0x000d9653
   d4a18:	000d962c 	.word	0x000d962c

000d4a1c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d4a1c:	b510      	push	{r4, lr}
   d4a1e:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   d4a20:	f7ff ffb2 	bl	d4988 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   d4a24:	4b05      	ldr	r3, [pc, #20]	; (d4a3c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   d4a26:	6023      	str	r3, [r4, #0]
  {
   d4a28:	4b05      	ldr	r3, [pc, #20]	; (d4a40 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   d4a2a:	60a3      	str	r3, [r4, #8]
   d4a2c:	2301      	movs	r3, #1
   d4a2e:	7323      	strb	r3, [r4, #12]
   d4a30:	2300      	movs	r3, #0
   d4a32:	6123      	str	r3, [r4, #16]
   d4a34:	82a3      	strh	r3, [r4, #20]
{
}
   d4a36:	4620      	mov	r0, r4
   d4a38:	bd10      	pop	{r4, pc}
   d4a3a:	bf00      	nop
   d4a3c:	000d968c 	.word	0x000d968c
   d4a40:	000d9678 	.word	0x000d9678

000d4a44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4a44:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4a46:	4c0b      	ldr	r4, [pc, #44]	; (d4a74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4a48:	7821      	ldrb	r1, [r4, #0]
   d4a4a:	f3bf 8f5b 	dmb	ish
   d4a4e:	f011 0101 	ands.w	r1, r1, #1
   d4a52:	d10b      	bne.n	d4a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4a54:	4620      	mov	r0, r4
   d4a56:	9101      	str	r1, [sp, #4]
   d4a58:	f7ff fb2e 	bl	d40b8 <__cxa_guard_acquire>
   d4a5c:	9901      	ldr	r1, [sp, #4]
   d4a5e:	b128      	cbz	r0, d4a6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4a60:	4805      	ldr	r0, [pc, #20]	; (d4a78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4a62:	f003 faf1 	bl	d8048 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4a66:	4620      	mov	r0, r4
   d4a68:	f7ff fb2b 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d4a6c:	4802      	ldr	r0, [pc, #8]	; (d4a78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4a6e:	b002      	add	sp, #8
   d4a70:	bd10      	pop	{r4, pc}
   d4a72:	bf00      	nop
   d4a74:	2003e330 	.word	0x2003e330
   d4a78:	2003e334 	.word	0x2003e334

000d4a7c <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   d4a7c:	b507      	push	{r0, r1, r2, lr}
   d4a7e:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4a80:	f7ff ffe0 	bl	d4a44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4a84:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   d4a86:	b003      	add	sp, #12
   d4a88:	f85d eb04 	ldr.w	lr, [sp], #4
   d4a8c:	f003 bb8e 	b.w	d81ac <_ZN8SPIClass8transferEh>

000d4a90 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   d4a90:	b508      	push	{r3, lr}
    }
    void transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   d4a92:	f7ff ffd7 	bl	d4a44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   d4a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4a9a:	f003 bb8d 	b.w	d81b8 <_ZN8SPIClass15attachInterruptEv>

000d4a9e <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   d4a9e:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   d4aa0:	f7ff ffd0 	bl	d4a44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   d4aa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4aa8:	f003 bb87 	b.w	d81ba <_ZN8SPIClass15detachInterruptEv>

000d4aac <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   d4aac:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   d4aae:	7903      	ldrb	r3, [r0, #4]
   d4ab0:	2b04      	cmp	r3, #4
   d4ab2:	d020      	beq.n	d4af6 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   d4ab4:	2b03      	cmp	r3, #3
   d4ab6:	d020      	beq.n	d4afa <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   d4ab8:	2b02      	cmp	r3, #2
   d4aba:	d020      	beq.n	d4afe <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   d4abc:	4a11      	ldr	r2, [pc, #68]	; (d4b04 <_ZN13RHHardwareSPI5beginEv+0x58>)
   d4abe:	4912      	ldr	r1, [pc, #72]	; (d4b08 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   d4ac0:	2b01      	cmp	r3, #1
   d4ac2:	bf18      	it	ne
   d4ac4:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   d4ac6:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   d4ac8:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   d4aca:	3901      	subs	r1, #1
   d4acc:	bf18      	it	ne
   d4ace:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   d4ad0:	b133      	cbz	r3, d4ae0 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   d4ad2:	2b01      	cmp	r3, #1
   d4ad4:	d004      	beq.n	d4ae0 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   d4ad6:	2b02      	cmp	r3, #2
   d4ad8:	d002      	beq.n	d4ae0 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   d4ada:	2b03      	cmp	r3, #3
   d4adc:	bf18      	it	ne
   d4ade:	2300      	movne	r3, #0
class SPISettings : public Printable {
   d4ae0:	2400      	movs	r4, #0
   d4ae2:	7304      	strb	r4, [r0, #12]
   d4ae4:	6102      	str	r2, [r0, #16]
   d4ae6:	7501      	strb	r1, [r0, #20]
   d4ae8:	7543      	strb	r3, [r0, #21]
        instance().begin();
   d4aea:	f7ff ffab 	bl	d4a44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   d4aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4af2:	f003 bab3 	b.w	d805c <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   d4af6:	4a05      	ldr	r2, [pc, #20]	; (d4b0c <_ZN13RHHardwareSPI5beginEv+0x60>)
   d4af8:	e7e5      	b.n	d4ac6 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   d4afa:	4a05      	ldr	r2, [pc, #20]	; (d4b10 <_ZN13RHHardwareSPI5beginEv+0x64>)
   d4afc:	e7e3      	b.n	d4ac6 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   d4afe:	4a05      	ldr	r2, [pc, #20]	; (d4b14 <_ZN13RHHardwareSPI5beginEv+0x68>)
   d4b00:	e7e1      	b.n	d4ac6 <_ZN13RHHardwareSPI5beginEv+0x1a>
   d4b02:	bf00      	nop
   d4b04:	001e8480 	.word	0x001e8480
   d4b08:	000f4240 	.word	0x000f4240
   d4b0c:	00f42400 	.word	0x00f42400
   d4b10:	007a1200 	.word	0x007a1200
   d4b14:	003d0900 	.word	0x003d0900

000d4b18 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   d4b18:	b508      	push	{r3, lr}
        instance().end();
   d4b1a:	f7ff ff93 	bl	d4a44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   d4b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4b22:	f003 baac 	b.w	d807e <_ZN8SPIClass3endEv>

000d4b26 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   d4b26:	b510      	push	{r4, lr}
   d4b28:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d4b2a:	f7ff ff8b 	bl	d4a44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4b2e:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   d4b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4b36:	f003 bacb 	b.w	d80d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d4b3a <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   d4b3a:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4b3c:	f7ff ff82 	bl	d4a44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   d4b40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4b44:	f003 baaa 	b.w	d809c <_ZN8SPIClass14endTransactionEv>

000d4b48 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   d4b48:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   d4b4a:	f7ff ff7b 	bl	d4a44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   d4b4e:	bd08      	pop	{r3, pc}

000d4b50 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   d4b50:	2300      	movs	r3, #0
   d4b52:	4802      	ldr	r0, [pc, #8]	; (d4b5c <_GLOBAL__sub_I_hardware_spi+0xc>)
   d4b54:	461a      	mov	r2, r3
   d4b56:	4619      	mov	r1, r3
   d4b58:	f7ff bf60 	b.w	d4a1c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   d4b5c:	2003e33c 	.word	0x2003e33c

000d4b60 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   d4b60:	2a01      	cmp	r2, #1
   d4b62:	d105      	bne.n	d4b70 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   d4b64:	7a00      	ldrb	r0, [r0, #8]
   d4b66:	780b      	ldrb	r3, [r1, #0]
   d4b68:	1a1b      	subs	r3, r3, r0
   d4b6a:	4258      	negs	r0, r3
   d4b6c:	4158      	adcs	r0, r3
   d4b6e:	4770      	bx	lr
   d4b70:	2000      	movs	r0, #0
}
   d4b72:	4770      	bx	lr

000d4b74 <_ZN6RHMesh5doArpEh>:
{
   d4b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d4b78:	4d26      	ldr	r5, [pc, #152]	; (d4c14 <_ZN6RHMesh5doArpEh+0xa0>)
   d4b7a:	2301      	movs	r3, #1
{
   d4b7c:	b087      	sub	sp, #28
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d4b7e:	702b      	strb	r3, [r5, #0]
    p->destlen = 1; 
   d4b80:	706b      	strb	r3, [r5, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d4b82:	2300      	movs	r3, #0
{
   d4b84:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   d4b86:	70a9      	strb	r1, [r5, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d4b88:	9300      	str	r3, [sp, #0]
   d4b8a:	2203      	movs	r2, #3
   d4b8c:	23ff      	movs	r3, #255	; 0xff
   d4b8e:	4629      	mov	r1, r5
{
   d4b90:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d4b92:	f000 fbe7 	bl	d5364 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   d4b96:	b120      	cbz	r0, d4ba2 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   d4b98:	2400      	movs	r4, #0
}
   d4b9a:	4620      	mov	r0, r4
   d4b9c:	b007      	add	sp, #28
   d4b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   d4ba2:	23fa      	movs	r3, #250	; 0xfa
   d4ba4:	f88d 3017 	strb.w	r3, [sp, #23]
   d4ba8:	f001 f86c 	bl	d5c84 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   d4bac:	f106 0904 	add.w	r9, r6, #4
   d4bb0:	4680      	mov	r8, r0
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d4bb2:	46aa      	mov	sl, r5
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   d4bb4:	f508 647a 	add.w	r4, r8, #4000	; 0xfa0
   d4bb8:	f001 f864 	bl	d5c84 <HAL_Timer_Get_Milli_Seconds>
   d4bbc:	1a20      	subs	r0, r4, r0
   d4bbe:	2800      	cmp	r0, #0
   d4bc0:	ddea      	ble.n	d4b98 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   d4bc2:	b281      	uxth	r1, r0
   d4bc4:	2200      	movs	r2, #0
   d4bc6:	4648      	mov	r0, r9
   d4bc8:	f7ff fdbf 	bl	d474a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d4bcc:	2800      	cmp	r0, #0
   d4bce:	d0f3      	beq.n	d4bb8 <_ZN6RHMesh5doArpEh+0x44>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d4bd0:	2300      	movs	r3, #0
   d4bd2:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d4bd6:	e9cd 3300 	strd	r3, r3, [sp]
   d4bda:	f10d 0217 	add.w	r2, sp, #23
   d4bde:	4651      	mov	r1, sl
   d4be0:	4630      	mov	r0, r6
   d4be2:	f000 fbc9 	bl	d5378 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d4be6:	4604      	mov	r4, r0
   d4be8:	2800      	cmp	r0, #0
   d4bea:	d0e3      	beq.n	d4bb4 <_ZN6RHMesh5doArpEh+0x40>
		if (   messageLen > 1
   d4bec:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d4bf0:	2b01      	cmp	r3, #1
   d4bf2:	d9df      	bls.n	d4bb4 <_ZN6RHMesh5doArpEh+0x40>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d4bf4:	f895 b000 	ldrb.w	fp, [r5]
   d4bf8:	f1bb 0f02 	cmp.w	fp, #2
   d4bfc:	d1da      	bne.n	d4bb4 <_ZN6RHMesh5doArpEh+0x40>
		    addRouteTo(address, headerFrom());
   d4bfe:	4648      	mov	r0, r9
   d4c00:	f7ff fde6 	bl	d47d0 <_ZN10RHDatagram10headerFromEv>
   d4c04:	465b      	mov	r3, fp
   d4c06:	4602      	mov	r2, r0
   d4c08:	4639      	mov	r1, r7
   d4c0a:	4630      	mov	r0, r6
   d4c0c:	f000 fb21 	bl	d5252 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   d4c10:	e7c3      	b.n	d4b9a <_ZN6RHMesh5doArpEh+0x26>
   d4c12:	bf00      	nop
   d4c14:	2003e354 	.word	0x2003e354

000d4c18 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   d4c18:	2a01      	cmp	r2, #1
{
   d4c1a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4c1e:	4607      	mov	r7, r0
   d4c20:	460e      	mov	r6, r1
   d4c22:	4614      	mov	r4, r2
    if (   messageLen > 1 
   d4c24:	d93b      	bls.n	d4c9e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d4c26:	794d      	ldrb	r5, [r1, #5]
   d4c28:	2d02      	cmp	r5, #2
   d4c2a:	d130      	bne.n	d4c8e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   d4c2c:	f100 0804 	add.w	r8, r0, #4
   d4c30:	79c9      	ldrb	r1, [r1, #7]
   d4c32:	9101      	str	r1, [sp, #4]
   d4c34:	4640      	mov	r0, r8
   d4c36:	f7ff fdcb 	bl	d47d0 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d4c3a:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   d4c3c:	462b      	mov	r3, r5
   d4c3e:	4602      	mov	r2, r0
   d4c40:	9901      	ldr	r1, [sp, #4]
   d4c42:	4638      	mov	r0, r7
   d4c44:	f000 fb05 	bl	d5252 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d4c48:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   d4c4a:	f106 0308 	add.w	r3, r6, #8
   d4c4e:	2400      	movs	r4, #0
   d4c50:	4622      	mov	r2, r4
   d4c52:	4295      	cmp	r5, r2
   d4c54:	f104 0401 	add.w	r4, r4, #1
   d4c58:	b2e4      	uxtb	r4, r4
   d4c5a:	d904      	bls.n	d4c66 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   d4c5c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d4c60:	7a39      	ldrb	r1, [r7, #8]
   d4c62:	4291      	cmp	r1, r2
   d4c64:	d1f4      	bne.n	d4c50 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   d4c66:	f104 0108 	add.w	r1, r4, #8
   d4c6a:	440e      	add	r6, r1
	while (i < numRoutes)
   d4c6c:	42a5      	cmp	r5, r4
   d4c6e:	d916      	bls.n	d4c9e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   d4c70:	f816 1b01 	ldrb.w	r1, [r6], #1
   d4c74:	9101      	str	r1, [sp, #4]
   d4c76:	4640      	mov	r0, r8
   d4c78:	f7ff fdaa 	bl	d47d0 <_ZN10RHDatagram10headerFromEv>
   d4c7c:	3401      	adds	r4, #1
   d4c7e:	4602      	mov	r2, r0
   d4c80:	9901      	ldr	r1, [sp, #4]
   d4c82:	2302      	movs	r3, #2
   d4c84:	4638      	mov	r0, r7
   d4c86:	b2e4      	uxtb	r4, r4
   d4c88:	f000 fae3 	bl	d5252 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   d4c8c:	e7ee      	b.n	d4c6c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   d4c8e:	2d03      	cmp	r5, #3
   d4c90:	d105      	bne.n	d4c9e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   d4c92:	7989      	ldrb	r1, [r1, #6]
}
   d4c94:	b002      	add	sp, #8
   d4c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   d4c9a:	f000 bac3 	b.w	d5224 <_ZN8RHRouter13deleteRouteToEh>
}
   d4c9e:	b002      	add	sp, #8
   d4ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4ca4 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   d4ca4:	b510      	push	{r4, lr}
   d4ca6:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   d4ca8:	f000 fb14 	bl	d52d4 <_ZN8RHRouterC1ER15RHGenericDriverh>
   d4cac:	4b01      	ldr	r3, [pc, #4]	; (d4cb4 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   d4cae:	6023      	str	r3, [r4, #0]
}
   d4cb0:	4620      	mov	r0, r4
   d4cb2:	bd10      	pop	{r4, pc}
   d4cb4:	000d96c0 	.word	0x000d96c0

000d4cb8 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   d4cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d4cbc:	2af9      	cmp	r2, #249	; 0xf9
{
   d4cbe:	f89d 9020 	ldrb.w	r9, [sp, #32]
   d4cc2:	4606      	mov	r6, r0
   d4cc4:	460f      	mov	r7, r1
   d4cc6:	4614      	mov	r4, r2
   d4cc8:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d4cca:	d825      	bhi.n	d4d18 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   d4ccc:	2bff      	cmp	r3, #255	; 0xff
   d4cce:	d114      	bne.n	d4cfa <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d4cd0:	f8df 8048 	ldr.w	r8, [pc, #72]	; d4d1c <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   d4cd4:	4640      	mov	r0, r8
   d4cd6:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   d4cd8:	4622      	mov	r2, r4
   d4cda:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d4cdc:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   d4ce0:	f004 f99c 	bl	d901c <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d4ce4:	1c62      	adds	r2, r4, #1
   d4ce6:	f8cd 9020 	str.w	r9, [sp, #32]
   d4cea:	462b      	mov	r3, r5
   d4cec:	4641      	mov	r1, r8
   d4cee:	4630      	mov	r0, r6
   d4cf0:	b2d2      	uxtb	r2, r2
}
   d4cf2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d4cf6:	f000 bb35 	b.w	d5364 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   d4cfa:	4619      	mov	r1, r3
   d4cfc:	f000 fa4e 	bl	d519c <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   d4d00:	2800      	cmp	r0, #0
   d4d02:	d1e5      	bne.n	d4cd0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   d4d04:	6833      	ldr	r3, [r6, #0]
   d4d06:	4629      	mov	r1, r5
   d4d08:	689b      	ldr	r3, [r3, #8]
   d4d0a:	4630      	mov	r0, r6
   d4d0c:	4798      	blx	r3
   d4d0e:	2800      	cmp	r0, #0
   d4d10:	d1de      	bne.n	d4cd0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d4d12:	2002      	movs	r0, #2
}
   d4d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   d4d18:	2001      	movs	r0, #1
   d4d1a:	e7fb      	b.n	d4d14 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   d4d1c:	2003e354 	.word	0x2003e354

000d4d20 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   d4d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d24:	b089      	sub	sp, #36	; 0x24
   d4d26:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d4d28:	23fa      	movs	r3, #250	; 0xfa
   d4d2a:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d4d2e:	f10d 031f 	add.w	r3, sp, #31
   d4d32:	9303      	str	r3, [sp, #12]
   d4d34:	f10d 031e 	add.w	r3, sp, #30
   d4d38:	f8df a180 	ldr.w	sl, [pc, #384]	; d4ebc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>
   d4d3c:	9302      	str	r3, [sp, #8]
   d4d3e:	f10d 031d 	add.w	r3, sp, #29
   d4d42:	9301      	str	r3, [sp, #4]
   d4d44:	ab07      	add	r3, sp, #28
   d4d46:	9300      	str	r3, [sp, #0]
{     
   d4d48:	4689      	mov	r9, r1
   d4d4a:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d4d4c:	f10d 031b 	add.w	r3, sp, #27
   d4d50:	f10d 021a 	add.w	r2, sp, #26
   d4d54:	4651      	mov	r1, sl
{     
   d4d56:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   d4d5a:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d4d5c:	f000 fb0c 	bl	d5378 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d4d60:	4656      	mov	r6, sl
   d4d62:	4604      	mov	r4, r0
   d4d64:	b920      	cbnz	r0, d4d70 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x50>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   d4d66:	2400      	movs	r4, #0
}
   d4d68:	4620      	mov	r0, r4
   d4d6a:	b009      	add	sp, #36	; 0x24
   d4d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   d4d70:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d4d74:	b373      	cbz	r3, d4dd4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   d4d76:	f89a 2000 	ldrb.w	r2, [sl]
   d4d7a:	bb5a      	cbnz	r2, d4dd4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    if (source) *source = _source;
   d4d7c:	f1b8 0f00 	cmp.w	r8, #0
   d4d80:	d003      	beq.n	d4d8a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x6a>
   d4d82:	f89d 201b 	ldrb.w	r2, [sp, #27]
   d4d86:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   d4d8a:	f1bb 0f00 	cmp.w	fp, #0
   d4d8e:	d003      	beq.n	d4d98 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x78>
   d4d90:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d4d94:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   d4d98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d4d9a:	b11a      	cbz	r2, d4da4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d4d9c:	9913      	ldr	r1, [sp, #76]	; 0x4c
   d4d9e:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d4da2:	700a      	strb	r2, [r1, #0]
	    if (flags)  *flags  = _flags;
   d4da4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d4da6:	b11a      	cbz	r2, d4db0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d4da8:	9914      	ldr	r1, [sp, #80]	; 0x50
   d4daa:	f89d 201e 	ldrb.w	r2, [sp, #30]
   d4dae:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   d4db0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   d4db2:	b11a      	cbz	r2, d4dbc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d4db4:	9915      	ldr	r1, [sp, #84]	; 0x54
   d4db6:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d4dba:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   d4dbc:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   d4dbe:	493d      	ldr	r1, [pc, #244]	; (d4eb4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   d4dc0:	3b01      	subs	r3, #1
   d4dc2:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d4dc4:	429a      	cmp	r2, r3
		*len = msgLen;
   d4dc6:	bf88      	it	hi
   d4dc8:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   d4dca:	783a      	ldrb	r2, [r7, #0]
   d4dcc:	4648      	mov	r0, r9
   d4dce:	f004 f925 	bl	d901c <memcpy>
	    return true;
   d4dd2:	e7c9      	b.n	d4d68 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   d4dd4:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d4dd8:	2aff      	cmp	r2, #255	; 0xff
   d4dda:	d1c4      	bne.n	d4d66 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && tmpMessageLen > 1 
   d4ddc:	2b01      	cmp	r3, #1
   d4dde:	d9c2      	bls.n	d4d66 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   d4de0:	7832      	ldrb	r2, [r6, #0]
   d4de2:	2a01      	cmp	r2, #1
   d4de4:	d1bf      	bne.n	d4d66 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    if (_source == _thisAddress)
   d4de6:	7a2a      	ldrb	r2, [r5, #8]
   d4de8:	f89d 401b 	ldrb.w	r4, [sp, #27]
   d4dec:	42a2      	cmp	r2, r4
   d4dee:	d0ba      	beq.n	d4d66 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   d4df0:	1edf      	subs	r7, r3, #3
   d4df2:	4931      	ldr	r1, [pc, #196]	; (d4eb8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   d4df4:	b2ff      	uxtb	r7, r7
   d4df6:	2300      	movs	r3, #0
   d4df8:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   d4dfc:	4547      	cmp	r7, r8
   d4dfe:	d906      	bls.n	d4e0e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xee>
		if (d->route[i] == _thisAddress)
   d4e00:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4e04:	4282      	cmp	r2, r0
   d4e06:	f103 0301 	add.w	r3, r3, #1
   d4e0a:	d1f5      	bne.n	d4df8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd8>
   d4e0c:	e7ab      	b.n	d4d66 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   d4e0e:	f105 0904 	add.w	r9, r5, #4
   d4e12:	4648      	mov	r0, r9
   d4e14:	f7ff fcdc 	bl	d47d0 <_ZN10RHDatagram10headerFromEv>
   d4e18:	2302      	movs	r3, #2
   d4e1a:	4602      	mov	r2, r0
   d4e1c:	4621      	mov	r1, r4
   d4e1e:	4628      	mov	r0, r5
   d4e20:	f000 fa17 	bl	d5252 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   d4e24:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d4e28:	b193      	cbz	r3, d4e50 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x130>
   d4e2a:	4c24      	ldr	r4, [pc, #144]	; (d4ebc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
	        for (i = 0; i < numRoutes; i++)
   d4e2c:	1ba3      	subs	r3, r4, r6
   d4e2e:	b2db      	uxtb	r3, r3
   d4e30:	429f      	cmp	r7, r3
   d4e32:	d90c      	bls.n	d4e4e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12e>
		    addRouteTo(d->route[i], headerFrom());
   d4e34:	78e1      	ldrb	r1, [r4, #3]
   d4e36:	9105      	str	r1, [sp, #20]
   d4e38:	4648      	mov	r0, r9
   d4e3a:	f7ff fcc9 	bl	d47d0 <_ZN10RHDatagram10headerFromEv>
   d4e3e:	9905      	ldr	r1, [sp, #20]
   d4e40:	4602      	mov	r2, r0
   d4e42:	2302      	movs	r3, #2
   d4e44:	4628      	mov	r0, r5
   d4e46:	f000 fa04 	bl	d5252 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   d4e4a:	3401      	adds	r4, #1
   d4e4c:	e7ee      	b.n	d4e2c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x10c>
   d4e4e:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   d4e50:	682b      	ldr	r3, [r5, #0]
   d4e52:	7872      	ldrb	r2, [r6, #1]
   d4e54:	68db      	ldr	r3, [r3, #12]
   d4e56:	491a      	ldr	r1, [pc, #104]	; (d4ec0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x1a0>)
   d4e58:	4628      	mov	r0, r5
   d4e5a:	4798      	blx	r3
   d4e5c:	4604      	mov	r4, r0
   d4e5e:	b160      	cbz	r0, d4e7a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x15a>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d4e60:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d4e62:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d4e64:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d4e66:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d4e6a:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d4e6e:	4913      	ldr	r1, [pc, #76]	; (d4ebc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   d4e70:	9400      	str	r4, [sp, #0]
   d4e72:	4628      	mov	r0, r5
   d4e74:	f000 fa76 	bl	d5364 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d4e78:	e776      	b.n	d4d68 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	    else if ((i < _max_hops) && _isa_router)
   d4e7a:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   d4e7e:	4543      	cmp	r3, r8
   d4e80:	f67f af71 	bls.w	d4d66 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
   d4e84:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d4e88:	2b00      	cmp	r3, #0
   d4e8a:	f43f af6c 	beq.w	d4d66 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		tmpMessageLen++;
   d4e8e:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   d4e92:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d4e94:	4909      	ldr	r1, [pc, #36]	; (d4ebc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
		d->route[numRoutes] = _thisAddress;
   d4e96:	443e      	add	r6, r7
		tmpMessageLen++;
   d4e98:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   d4e9a:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d4e9c:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d4ea0:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   d4ea2:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d4ea4:	9300      	str	r3, [sp, #0]
   d4ea6:	4628      	mov	r0, r5
   d4ea8:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   d4eaa:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d4eae:	f000 fa23 	bl	d52f8 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   d4eb2:	e759      	b.n	d4d68 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
   d4eb4:	2003e355 	.word	0x2003e355
   d4eb8:	2003e357 	.word	0x2003e357
   d4ebc:	2003e354 	.word	0x2003e354
   d4ec0:	2003e356 	.word	0x2003e356

000d4ec4 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAckTimeout(uint8_t* buf, uint8_t* len, uint16_t timeout, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d4ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ec8:	b085      	sub	sp, #20
   d4eca:	4680      	mov	r8, r0
   d4ecc:	461c      	mov	r4, r3
   d4ece:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
   d4ed2:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d4ed4:	4689      	mov	r9, r1
   d4ed6:	4692      	mov	sl, r2
   d4ed8:	f000 fed4 	bl	d5c84 <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    int32_t timeLeft;
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
    {
	if (waitAvailableTimeout(timeLeft))
   d4edc:	f108 0b04 	add.w	fp, r8, #4
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
   d4ee0:	4404      	add	r4, r0
   d4ee2:	f000 fecf 	bl	d5c84 <HAL_Timer_Get_Milli_Seconds>
   d4ee6:	1a20      	subs	r0, r4, r0
   d4ee8:	2800      	cmp	r0, #0
   d4eea:	dd16      	ble.n	d4f1a <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x56>
	if (waitAvailableTimeout(timeLeft))
   d4eec:	b281      	uxth	r1, r0
   d4eee:	2200      	movs	r2, #0
   d4ef0:	4658      	mov	r0, fp
   d4ef2:	f7ff fc2a 	bl	d474a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d4ef6:	2800      	cmp	r0, #0
   d4ef8:	d0f3      	beq.n	d4ee2 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
	{
	    if (recvfromAck(buf, len, from, to, id, flags, hops))
   d4efa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4efc:	9300      	str	r3, [sp, #0]
   d4efe:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d4f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d4f04:	9501      	str	r5, [sp, #4]
   d4f06:	4652      	mov	r2, sl
   d4f08:	4649      	mov	r1, r9
   d4f0a:	4640      	mov	r0, r8
   d4f0c:	f7ff ff08 	bl	d4d20 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d4f10:	2800      	cmp	r0, #0
   d4f12:	d0e6      	beq.n	d4ee2 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
		return true;
	    YIELD;
	}
    }
    return false;
}
   d4f14:	b005      	add	sp, #20
   d4f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
   d4f1a:	2000      	movs	r0, #0
   d4f1c:	e7fa      	b.n	d4f14 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x50>
	...

000d4f20 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   d4f20:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f22:	b085      	sub	sp, #20
   d4f24:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d4f26:	3004      	adds	r0, #4
{
   d4f28:	460e      	mov	r6, r1
   d4f2a:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d4f2c:	f7ff fc50 	bl	d47d0 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   d4f30:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d4f32:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   d4f34:	4631      	mov	r1, r6
   d4f36:	4628      	mov	r0, r5
   d4f38:	f000 f947 	bl	d51ca <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d4f3c:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   d4f3e:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d4f40:	d001      	beq.n	d4f46 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   d4f42:	2805      	cmp	r0, #5
   d4f44:	d11b      	bne.n	d4f7e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   d4f46:	7831      	ldrb	r1, [r6, #0]
   d4f48:	4628      	mov	r0, r5
   d4f4a:	f000 f96b 	bl	d5224 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   d4f4e:	7872      	ldrb	r2, [r6, #1]
   d4f50:	7a2b      	ldrb	r3, [r5, #8]
   d4f52:	429a      	cmp	r2, r3
   d4f54:	d013      	beq.n	d4f7e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   d4f56:	4c0b      	ldr	r4, [pc, #44]	; (d4f84 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   d4f58:	2303      	movs	r3, #3
   d4f5a:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   d4f5c:	7833      	ldrb	r3, [r6, #0]
   d4f5e:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   d4f60:	7871      	ldrb	r1, [r6, #1]
   d4f62:	2302      	movs	r3, #2
   d4f64:	463a      	mov	r2, r7
   d4f66:	4628      	mov	r0, r5
   d4f68:	f000 f973 	bl	d5252 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   d4f6c:	2300      	movs	r3, #0
   d4f6e:	9300      	str	r3, [sp, #0]
   d4f70:	4621      	mov	r1, r4
   d4f72:	7873      	ldrb	r3, [r6, #1]
   d4f74:	2202      	movs	r2, #2
   d4f76:	4628      	mov	r0, r5
   d4f78:	f000 f9f4 	bl	d5364 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d4f7c:	4604      	mov	r4, r0
}
   d4f7e:	4620      	mov	r0, r4
   d4f80:	b005      	add	sp, #20
   d4f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4f84:	2003e354 	.word	0x2003e354

000d4f88 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   d4f88:	b510      	push	{r4, lr}
   d4f8a:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   d4f8c:	f7ff fbd2 	bl	d4734 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   d4f90:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   d4f92:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   d4f94:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   d4f96:	2303      	movs	r3, #3
    _retransmissions = 0;
   d4f98:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   d4f9a:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   d4f9c:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   d4f9e:	f44f 7280 	mov.w	r2, #256	; 0x100
   d4fa2:	f104 0011 	add.w	r0, r4, #17
   d4fa6:	f004 f861 	bl	d906c <memset>
}
   d4faa:	4620      	mov	r0, r4
   d4fac:	bd10      	pop	{r4, pc}

000d4fae <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   d4fae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4fb0:	4604      	mov	r4, r0
   d4fb2:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   d4fb4:	f7ff fc00 	bl	d47b8 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   d4fb8:	4620      	mov	r0, r4
   d4fba:	2200      	movs	r2, #0
   d4fbc:	2180      	movs	r1, #128	; 0x80
   d4fbe:	f7ff fbff 	bl	d47c0 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   d4fc2:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   d4fc4:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   d4fc6:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   d4fca:	f10d 010f 	add.w	r1, sp, #15
   d4fce:	2201      	movs	r2, #1
   d4fd0:	4620      	mov	r0, r4
   d4fd2:	f7ff fbc2 	bl	d475a <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   d4fd6:	4620      	mov	r0, r4
   d4fd8:	f7ff fbb3 	bl	d4742 <_ZN10RHDatagram14waitPacketSentEv>
}
   d4fdc:	b004      	add	sp, #16
   d4fde:	bd10      	pop	{r4, pc}

000d4fe0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   d4fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d4fe4:	7b05      	ldrb	r5, [r0, #12]
   d4fe6:	3501      	adds	r5, #1
   d4fe8:	b2ed      	uxtb	r5, r5
{
   d4fea:	b087      	sub	sp, #28
   d4fec:	4604      	mov	r4, r0
   d4fee:	4689      	mov	r9, r1
   d4ff0:	4692      	mov	sl, r2
   d4ff2:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d4ff4:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   d4ff6:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   d4ff8:	7c22      	ldrb	r2, [r4, #16]
   d4ffa:	463b      	mov	r3, r7
   d4ffc:	429a      	cmp	r2, r3
   d4ffe:	f107 0701 	add.w	r7, r7, #1
   d5002:	b2ff      	uxtb	r7, r7
   d5004:	d36b      	bcc.n	d50de <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   d5006:	4629      	mov	r1, r5
   d5008:	4620      	mov	r0, r4
   d500a:	f7ff fbd5 	bl	d47b8 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   d500e:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   d5010:	bf0d      	iteet	eq
   d5012:	22c0      	moveq	r2, #192	; 0xc0
   d5014:	2280      	movne	r2, #128	; 0x80
   d5016:	2140      	movne	r1, #64	; 0x40
   d5018:	2100      	moveq	r1, #0
   d501a:	4620      	mov	r0, r4
   d501c:	f7ff fbd0 	bl	d47c0 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   d5020:	4643      	mov	r3, r8
   d5022:	4652      	mov	r2, sl
   d5024:	4649      	mov	r1, r9
   d5026:	4620      	mov	r0, r4
   d5028:	f7ff fb97 	bl	d475a <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   d502c:	4620      	mov	r0, r4
   d502e:	f7ff fb88 	bl	d4742 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   d5032:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d5036:	d054      	beq.n	d50e2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   d5038:	2f01      	cmp	r7, #1
	    _retransmissions++;
   d503a:	bf82      	ittt	hi
   d503c:	68a3      	ldrhi	r3, [r4, #8]
   d503e:	3301      	addhi	r3, #1
   d5040:	60a3      	strhi	r3, [r4, #8]
   d5042:	f000 fe1f 	bl	d5c84 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   d5046:	f44f 7180 	mov.w	r1, #256	; 0x100
   d504a:	4683      	mov	fp, r0
   d504c:	2000      	movs	r0, #0
   d504e:	89e6      	ldrh	r6, [r4, #14]
   d5050:	f002 ffe3 	bl	d801a <_Z6randomii>
   d5054:	4370      	muls	r0, r6
   d5056:	bf48      	it	mi
   d5058:	30ff      	addmi	r0, #255	; 0xff
   d505a:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   d505e:	fa1b f686 	uxtah	r6, fp, r6
   d5062:	f000 fe0f 	bl	d5c84 <HAL_Timer_Get_Milli_Seconds>
   d5066:	1a30      	subs	r0, r6, r0
   d5068:	2800      	cmp	r0, #0
   d506a:	ddc5      	ble.n	d4ff8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   d506c:	b281      	uxth	r1, r0
   d506e:	2200      	movs	r2, #0
   d5070:	4620      	mov	r0, r4
   d5072:	f7ff fb6a 	bl	d474a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d5076:	2800      	cmp	r0, #0
   d5078:	d0f3      	beq.n	d5062 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   d507a:	f10d 0317 	add.w	r3, sp, #23
   d507e:	9302      	str	r3, [sp, #8]
   d5080:	f10d 0316 	add.w	r3, sp, #22
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	2200      	movs	r2, #0
   d5088:	f10d 0315 	add.w	r3, sp, #21
   d508c:	9300      	str	r3, [sp, #0]
   d508e:	4611      	mov	r1, r2
   d5090:	ab05      	add	r3, sp, #20
   d5092:	4620      	mov	r0, r4
   d5094:	f7ff fba8 	bl	d47e8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d5098:	2800      	cmp	r0, #0
   d509a:	d0e2      	beq.n	d5062 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   d509c:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d50a0:	f99d 3017 	ldrsb.w	r3, [sp, #23]
   d50a4:	4542      	cmp	r2, r8
   d50a6:	d10e      	bne.n	d50c6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   d50a8:	f894 c004 	ldrb.w	ip, [r4, #4]
   d50ac:	f89d 1015 	ldrb.w	r1, [sp, #21]
   d50b0:	458c      	cmp	ip, r1
   d50b2:	d108      	bne.n	d50c6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   d50b4:	2b00      	cmp	r3, #0
   d50b6:	da08      	bge.n	d50ca <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   d50b8:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d50bc:	42ab      	cmp	r3, r5
   d50be:	d1d0      	bne.n	d5062 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   d50c0:	b007      	add	sp, #28
   d50c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   d50c6:	2b00      	cmp	r3, #0
   d50c8:	dbcb      	blt.n	d5062 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   d50ca:	18a1      	adds	r1, r4, r2
   d50cc:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d50d0:	7c49      	ldrb	r1, [r1, #17]
   d50d2:	4299      	cmp	r1, r3
   d50d4:	d1c5      	bne.n	d5062 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   d50d6:	4620      	mov	r0, r4
   d50d8:	f7ff ff69 	bl	d4fae <_ZN18RHReliableDatagram11acknowledgeEhh>
   d50dc:	e7c1      	b.n	d5062 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   d50de:	2000      	movs	r0, #0
   d50e0:	e7ee      	b.n	d50c0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   d50e2:	2001      	movs	r0, #1
   d50e4:	e7ec      	b.n	d50c0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000d50e6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   d50e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d50ea:	b089      	sub	sp, #36	; 0x24
   d50ec:	e9cd 2104 	strd	r2, r1, [sp, #16]
   d50f0:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   d50f4:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d50f6:	4604      	mov	r4, r0
   d50f8:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d50fa:	f7ff fb1e 	bl	d473a <_ZN10RHDatagram9availableEv>
   d50fe:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d5102:	b920      	cbnz	r0, d510e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   d5104:	2500      	movs	r5, #0
}
   d5106:	4628      	mov	r0, r5
   d5108:	b009      	add	sp, #36	; 0x24
   d510a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d510e:	f10d 031f 	add.w	r3, sp, #31
   d5112:	9302      	str	r3, [sp, #8]
   d5114:	f10d 031e 	add.w	r3, sp, #30
   d5118:	9301      	str	r3, [sp, #4]
   d511a:	f10d 031d 	add.w	r3, sp, #29
   d511e:	9300      	str	r3, [sp, #0]
   d5120:	4620      	mov	r0, r4
   d5122:	ab07      	add	r3, sp, #28
   d5124:	f7ff fb60 	bl	d47e8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d5128:	4605      	mov	r5, r0
   d512a:	2800      	cmp	r0, #0
   d512c:	d0ea      	beq.n	d5104 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   d512e:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   d5132:	2b00      	cmp	r3, #0
   d5134:	dbe6      	blt.n	d5104 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   d5136:	7922      	ldrb	r2, [r4, #4]
   d5138:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d513c:	429a      	cmp	r2, r3
   d513e:	d106      	bne.n	d514e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   d5140:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d5144:	f89d 101e 	ldrb.w	r1, [sp, #30]
   d5148:	4620      	mov	r0, r4
   d514a:	f7ff ff30 	bl	d4fae <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   d514e:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d5152:	f89d 301e 	ldrb.w	r3, [sp, #30]
   d5156:	4414      	add	r4, r2
   d5158:	7c61      	ldrb	r1, [r4, #17]
   d515a:	4299      	cmp	r1, r3
   d515c:	d0d2      	beq.n	d5104 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   d515e:	b106      	cbz	r6, d5162 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x7c>
   d5160:	7032      	strb	r2, [r6, #0]
		if (to)    *to =    _to;
   d5162:	f1b9 0f00 	cmp.w	r9, #0
   d5166:	d003      	beq.n	d5170 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x8a>
   d5168:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d516c:	f889 2000 	strb.w	r2, [r9]
		if (id)    *id =    _id;
   d5170:	f1b8 0f00 	cmp.w	r8, #0
   d5174:	d001      	beq.n	d517a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   d5176:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   d517a:	b117      	cbz	r7, d5182 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9c>
   d517c:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d5180:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   d5182:	7463      	strb	r3, [r4, #17]
		return true;
   d5184:	e7bf      	b.n	d5106 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000d5186 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   d5186:	4770      	bx	lr

000d5188 <_ZN8RHRouter4initEv>:
{
   d5188:	b510      	push	{r4, lr}
   d518a:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   d518c:	3004      	adds	r0, #4
   d518e:	f7ff fb05 	bl	d479c <_ZN10RHDatagram4initEv>
    if (ret)
   d5192:	b110      	cbz	r0, d519a <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   d5194:	231e      	movs	r3, #30
   d5196:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   d519a:	bd10      	pop	{r4, pc}

000d519c <_ZN8RHRouter10getRouteToEh>:
{
   d519c:	b510      	push	{r4, lr}
   d519e:	4602      	mov	r2, r0
   d51a0:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   d51a2:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   d51a6:	428c      	cmp	r4, r1
   d51a8:	d108      	bne.n	d51bc <_ZN8RHRouter10getRouteToEh+0x20>
   d51aa:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   d51ae:	b12c      	cbz	r4, d51bc <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   d51b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d51b4:	f503 738c 	add.w	r3, r3, #280	; 0x118
   d51b8:	4418      	add	r0, r3
}
   d51ba:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d51bc:	3301      	adds	r3, #1
   d51be:	2b0a      	cmp	r3, #10
   d51c0:	f102 0203 	add.w	r2, r2, #3
   d51c4:	d1ed      	bne.n	d51a2 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   d51c6:	2000      	movs	r0, #0
   d51c8:	e7f7      	b.n	d51ba <_ZN8RHRouter10getRouteToEh+0x1e>

000d51ca <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   d51ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d51cc:	780b      	ldrb	r3, [r1, #0]
   d51ce:	2bff      	cmp	r3, #255	; 0xff
{
   d51d0:	4605      	mov	r5, r0
   d51d2:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d51d4:	d006      	beq.n	d51e4 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   d51d6:	4619      	mov	r1, r3
   d51d8:	9201      	str	r2, [sp, #4]
   d51da:	f7ff ffdf 	bl	d519c <_ZN8RHRouter10getRouteToEh>
	if (!route)
   d51de:	b158      	cbz	r0, d51f8 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   d51e0:	7843      	ldrb	r3, [r0, #1]
   d51e2:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   d51e4:	4621      	mov	r1, r4
   d51e6:	1d28      	adds	r0, r5, #4
   d51e8:	f7ff fefa 	bl	d4fe0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   d51ec:	2800      	cmp	r0, #0
   d51ee:	bf14      	ite	ne
   d51f0:	2000      	movne	r0, #0
   d51f2:	2005      	moveq	r0, #5
}
   d51f4:	b003      	add	sp, #12
   d51f6:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d51f8:	2002      	movs	r0, #2
   d51fa:	e7fb      	b.n	d51f4 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000d51fc <_ZN8RHRouter11deleteRouteEh>:
{
   d51fc:	b510      	push	{r4, lr}
   d51fe:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   d5202:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   d5204:	f1c1 0209 	rsb	r2, r1, #9
    memcpy(&_routes[index], &_routes[index+1], 
   d5208:	f503 708c 	add.w	r0, r3, #280	; 0x118
   d520c:	f203 111b 	addw	r1, r3, #283	; 0x11b
   d5210:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d5214:	4421      	add	r1, r4
   d5216:	4420      	add	r0, r4
   d5218:	f003 ff00 	bl	d901c <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   d521c:	2300      	movs	r3, #0
   d521e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
}
   d5222:	bd10      	pop	{r4, pc}

000d5224 <_ZN8RHRouter13deleteRouteToEh>:
{
   d5224:	b538      	push	{r3, r4, r5, lr}
   d5226:	460a      	mov	r2, r1
   d5228:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d522a:	f500 748c 	add.w	r4, r0, #280	; 0x118
   d522e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   d5232:	b2d9      	uxtb	r1, r3
   d5234:	5d65      	ldrb	r5, [r4, r5]
   d5236:	4295      	cmp	r5, r2
   d5238:	d103      	bne.n	d5242 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   d523a:	f7ff ffdf 	bl	d51fc <_ZN8RHRouter11deleteRouteEh>
	    return true;
   d523e:	2001      	movs	r0, #1
}
   d5240:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d5242:	3301      	adds	r3, #1
   d5244:	2b0a      	cmp	r3, #10
   d5246:	d1f2      	bne.n	d522e <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   d5248:	2000      	movs	r0, #0
   d524a:	e7f9      	b.n	d5240 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000d524c <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   d524c:	2100      	movs	r1, #0
   d524e:	f7ff bfd5 	b.w	d51fc <_ZN8RHRouter11deleteRouteEh>

000d5252 <_ZN8RHRouter10addRouteToEhhh>:
{
   d5252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5254:	4616      	mov	r6, r2
   d5256:	461f      	mov	r7, r3
   d5258:	4604      	mov	r4, r0
   d525a:	460d      	mov	r5, r1
   d525c:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d525e:	f500 728c 	add.w	r2, r0, #280	; 0x118
   d5262:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d5266:	5c11      	ldrb	r1, [r2, r0]
   d5268:	42a9      	cmp	r1, r5
   d526a:	d105      	bne.n	d5278 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   d526c:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   d526e:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d5272:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   d5276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d5278:	3301      	adds	r3, #1
   d527a:	2b0a      	cmp	r3, #10
   d527c:	d1f1      	bne.n	d5262 <_ZN8RHRouter10addRouteToEhhh+0x10>
   d527e:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   d5280:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   d5284:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d5288:	5c11      	ldrb	r1, [r2, r0]
   d528a:	b919      	cbnz	r1, d5294 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   d528c:	4420      	add	r0, r4
   d528e:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   d5292:	e7ec      	b.n	d526e <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d5294:	3301      	adds	r3, #1
   d5296:	2b0a      	cmp	r3, #10
   d5298:	d1f4      	bne.n	d5284 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   d529a:	4620      	mov	r0, r4
   d529c:	f7ff ffd6 	bl	d524c <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d52a0:	4620      	mov	r0, r4
   d52a2:	f104 031e 	add.w	r3, r4, #30
	if (_routes[i].state == Invalid)
   d52a6:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   d52aa:	b92a      	cbnz	r2, d52b8 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   d52ac:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   d52b0:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d52b4:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d52b8:	3003      	adds	r0, #3
   d52ba:	4298      	cmp	r0, r3
   d52bc:	d1f3      	bne.n	d52a6 <_ZN8RHRouter10addRouteToEhhh+0x54>
   d52be:	e7da      	b.n	d5276 <_ZN8RHRouter10addRouteToEhhh+0x24>

000d52c0 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d52c0:	f100 031e 	add.w	r3, r0, #30
	_routes[i].state = Invalid;
   d52c4:	2200      	movs	r2, #0
   d52c6:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d52ca:	3003      	adds	r0, #3
   d52cc:	4298      	cmp	r0, r3
   d52ce:	d1fa      	bne.n	d52c6 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   d52d0:	4770      	bx	lr
	...

000d52d4 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   d52d4:	b510      	push	{r4, lr}
   d52d6:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   d52d8:	3004      	adds	r0, #4
   d52da:	f7ff fe55 	bl	d4f88 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   d52de:	4b05      	ldr	r3, [pc, #20]	; (d52f4 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   d52e0:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d52e2:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   d52e6:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d52e8:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   d52ec:	f7ff ffe8 	bl	d52c0 <_ZN8RHRouter17clearRoutingTableEv>
}
   d52f0:	4620      	mov	r0, r4
   d52f2:	bd10      	pop	{r4, pc}
   d52f4:	000d96d8 	.word	0x000d96d8

000d52f8 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   d52f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d52fc:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d52fe:	6840      	ldr	r0, [r0, #4]
{
   d5300:	9101      	str	r1, [sp, #4]
   d5302:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d5304:	6803      	ldr	r3, [r0, #0]
{
   d5306:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d530a:	699b      	ldr	r3, [r3, #24]
{
   d530c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d5310:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d5312:	4798      	blx	r3
   d5314:	f106 0805 	add.w	r8, r6, #5
   d5318:	4580      	cmp	r8, r0
   d531a:	d81c      	bhi.n	d5356 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   d531c:	4d10      	ldr	r5, [pc, #64]	; (d5360 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   d531e:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   d5320:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   d5324:	2300      	movs	r3, #0
   d5326:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   d5328:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   d532c:	70eb      	strb	r3, [r5, #3]
   d532e:	1c5a      	adds	r2, r3, #1
   d5330:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   d5334:	1d68      	adds	r0, r5, #5
   d5336:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   d5338:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   d533a:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   d533e:	f003 fe6d 	bl	d901c <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d5342:	6823      	ldr	r3, [r4, #0]
   d5344:	685b      	ldr	r3, [r3, #4]
   d5346:	fa5f f288 	uxtb.w	r2, r8
   d534a:	4629      	mov	r1, r5
   d534c:	4620      	mov	r0, r4
}
   d534e:	b002      	add	sp, #8
   d5350:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d5354:	4718      	bx	r3
}
   d5356:	2001      	movs	r0, #1
   d5358:	b002      	add	sp, #8
   d535a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d535e:	bf00      	nop
   d5360:	2003e44e 	.word	0x2003e44e

000d5364 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   d5364:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   d5366:	f89d 4010 	ldrb.w	r4, [sp, #16]
   d536a:	9401      	str	r4, [sp, #4]
   d536c:	7a04      	ldrb	r4, [r0, #8]
   d536e:	9400      	str	r4, [sp, #0]
   d5370:	f7ff ffc2 	bl	d52f8 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   d5374:	b002      	add	sp, #8
   d5376:	bd10      	pop	{r4, pc}

000d5378 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d5378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d537c:	b087      	sub	sp, #28
   d537e:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d5380:	23ff      	movs	r3, #255	; 0xff
   d5382:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d5386:	f10d 0317 	add.w	r3, sp, #23
   d538a:	9302      	str	r3, [sp, #8]
   d538c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d5460 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   d5390:	f10d 0316 	add.w	r3, sp, #22
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	f10d 0315 	add.w	r3, sp, #21
   d539a:	9300      	str	r3, [sp, #0]
{  
   d539c:	4604      	mov	r4, r0
   d539e:	4688      	mov	r8, r1
   d53a0:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d53a2:	ab05      	add	r3, sp, #20
   d53a4:	f10d 0213 	add.w	r2, sp, #19
   d53a8:	4649      	mov	r1, r9
   d53aa:	3004      	adds	r0, #4
{  
   d53ac:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d53b0:	f7ff fe99 	bl	d50e6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   d53b4:	4605      	mov	r5, r0
   d53b6:	b908      	cbnz	r0, d53bc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   d53b8:	2500      	movs	r5, #0
   d53ba:	e038      	b.n	d542e <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   d53bc:	6823      	ldr	r3, [r4, #0]
   d53be:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d53c2:	681b      	ldr	r3, [r3, #0]
   d53c4:	4649      	mov	r1, r9
   d53c6:	4620      	mov	r0, r4
   d53c8:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   d53ca:	f899 3000 	ldrb.w	r3, [r9]
   d53ce:	7a22      	ldrb	r2, [r4, #8]
   d53d0:	429a      	cmp	r2, r3
   d53d2:	d001      	beq.n	d53d8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   d53d4:	2bff      	cmp	r3, #255	; 0xff
   d53d6:	d12e      	bne.n	d5436 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   d53d8:	b117      	cbz	r7, d53e0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   d53da:	4b21      	ldr	r3, [pc, #132]	; (d5460 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d53dc:	785b      	ldrb	r3, [r3, #1]
   d53de:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   d53e0:	f1bb 0f00 	cmp.w	fp, #0
   d53e4:	d003      	beq.n	d53ee <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   d53e6:	4b1e      	ldr	r3, [pc, #120]	; (d5460 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d53e8:	781b      	ldrb	r3, [r3, #0]
   d53ea:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   d53ee:	f1ba 0f00 	cmp.w	sl, #0
   d53f2:	d003      	beq.n	d53fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d53f4:	4b1a      	ldr	r3, [pc, #104]	; (d5460 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d53f6:	78db      	ldrb	r3, [r3, #3]
   d53f8:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   d53fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d53fe:	b11b      	cbz	r3, d5408 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d5400:	4b17      	ldr	r3, [pc, #92]	; (d5460 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d5402:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d5404:	791b      	ldrb	r3, [r3, #4]
   d5406:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   d5408:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d540a:	b11b      	cbz	r3, d5414 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d540c:	4b14      	ldr	r3, [pc, #80]	; (d5460 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d540e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d5410:	789b      	ldrb	r3, [r3, #2]
   d5412:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d5414:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   d5418:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d541a:	4912      	ldr	r1, [pc, #72]	; (d5464 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d541c:	3b05      	subs	r3, #5
   d541e:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d5420:	429a      	cmp	r2, r3
		*len = msgLen;
   d5422:	bf88      	it	hi
   d5424:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d5426:	7832      	ldrb	r2, [r6, #0]
   d5428:	4640      	mov	r0, r8
   d542a:	f003 fdf7 	bl	d901c <memcpy>
}
   d542e:	4628      	mov	r0, r5
   d5430:	b007      	add	sp, #28
   d5432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   d5436:	f899 3002 	ldrb.w	r3, [r9, #2]
   d543a:	1c5a      	adds	r2, r3, #1
   d543c:	f889 2002 	strb.w	r2, [r9, #2]
   d5440:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   d5444:	429a      	cmp	r2, r3
   d5446:	d9b7      	bls.n	d53b8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   d5448:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   d544c:	2b00      	cmp	r3, #0
   d544e:	d0b3      	beq.n	d53b8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   d5450:	6823      	ldr	r3, [r4, #0]
   d5452:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d5456:	685b      	ldr	r3, [r3, #4]
   d5458:	4649      	mov	r1, r9
   d545a:	4620      	mov	r0, r4
   d545c:	4798      	blx	r3
   d545e:	e7ab      	b.n	d53b8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   d5460:	2003e44e 	.word	0x2003e44e
   d5464:	2003e453 	.word	0x2003e453

000d5468 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   d5468:	b510      	push	{r4, lr}
   d546a:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   d546c:	6a00      	ldr	r0, [r0, #32]
   d546e:	6803      	ldr	r3, [r0, #0]
   d5470:	68db      	ldr	r3, [r3, #12]
   d5472:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   d5474:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   d5478:	28ff      	cmp	r0, #255	; 0xff
   d547a:	d002      	beq.n	d5482 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   d547c:	2101      	movs	r1, #1
   d547e:	f003 f967 	bl	d8750 <pinMode>

    deselectSlave();
   d5482:	6823      	ldr	r3, [r4, #0]
   d5484:	4620      	mov	r0, r4
   d5486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d5488:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   d548a:	2064      	movs	r0, #100	; 0x64
   d548c:	f000 fea0 	bl	d61d0 <delay>
#endif
    
    return true;
}
   d5490:	2001      	movs	r0, #1
   d5492:	bd10      	pop	{r4, pc}

000d5494 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   d5494:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d5498:	2100      	movs	r1, #0
   d549a:	f003 b96a 	b.w	d8772 <digitalWrite>

000d549e <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   d549e:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d54a2:	2101      	movs	r1, #1
   d54a4:	f003 b965 	b.w	d8772 <digitalWrite>

000d54a8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   d54a8:	b570      	push	{r4, r5, r6, lr}
   d54aa:	4604      	mov	r4, r0
   d54ac:	460d      	mov	r5, r1
   d54ae:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   d54b0:	f7ff fa4e 	bl	d4950 <_ZN15RHGenericDriverC1Ev>
   d54b4:	4b03      	ldr	r3, [pc, #12]	; (d54c4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   d54b6:	6023      	str	r3, [r4, #0]
   d54b8:	6226      	str	r6, [r4, #32]
   d54ba:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   d54be:	4620      	mov	r0, r4
   d54c0:	bd70      	pop	{r4, r5, r6, pc}
   d54c2:	bf00      	nop
   d54c4:	000d96e8 	.word	0x000d96e8

000d54c8 <_ZN11RHSPIDriver7spiReadEh>:
{
   d54c8:	b538      	push	{r3, r4, r5, lr}
   d54ca:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d54cc:	6a00      	ldr	r0, [r0, #32]
   d54ce:	6803      	ldr	r3, [r0, #0]
   d54d0:	6a1b      	ldr	r3, [r3, #32]
{
   d54d2:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d54d4:	4798      	blx	r3
    selectSlave();
   d54d6:	6823      	ldr	r3, [r4, #0]
   d54d8:	4620      	mov	r0, r4
   d54da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d54dc:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   d54de:	6a20      	ldr	r0, [r4, #32]
   d54e0:	6803      	ldr	r3, [r0, #0]
   d54e2:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d54e6:	681b      	ldr	r3, [r3, #0]
   d54e8:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d54ea:	6a20      	ldr	r0, [r4, #32]
   d54ec:	6803      	ldr	r3, [r0, #0]
   d54ee:	2100      	movs	r1, #0
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	4798      	blx	r3
    deselectSlave();
   d54f4:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d54f6:	4605      	mov	r5, r0
    deselectSlave();
   d54f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d54fa:	4620      	mov	r0, r4
   d54fc:	4798      	blx	r3
    _spi.endTransaction();
   d54fe:	6a20      	ldr	r0, [r4, #32]
   d5500:	6803      	ldr	r3, [r0, #0]
   d5502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5504:	4798      	blx	r3
}
   d5506:	4628      	mov	r0, r5
   d5508:	bd38      	pop	{r3, r4, r5, pc}

000d550a <_ZN11RHSPIDriver8spiWriteEhh>:
{
   d550a:	b570      	push	{r4, r5, r6, lr}
   d550c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d550e:	6a00      	ldr	r0, [r0, #32]
   d5510:	6803      	ldr	r3, [r0, #0]
   d5512:	6a1b      	ldr	r3, [r3, #32]
{
   d5514:	4616      	mov	r6, r2
   d5516:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d5518:	4798      	blx	r3
    selectSlave();
   d551a:	6823      	ldr	r3, [r4, #0]
   d551c:	4620      	mov	r0, r4
   d551e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d5520:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   d5522:	6a20      	ldr	r0, [r4, #32]
   d5524:	6803      	ldr	r3, [r0, #0]
   d5526:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d552a:	681b      	ldr	r3, [r3, #0]
   d552c:	4798      	blx	r3
   d552e:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   d5530:	6a20      	ldr	r0, [r4, #32]
   d5532:	6803      	ldr	r3, [r0, #0]
   d5534:	4631      	mov	r1, r6
   d5536:	681b      	ldr	r3, [r3, #0]
   d5538:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d553a:	2001      	movs	r0, #1
   d553c:	f000 fb9a 	bl	d5c74 <HAL_Delay_Microseconds>
    deselectSlave();
   d5540:	6823      	ldr	r3, [r4, #0]
   d5542:	4620      	mov	r0, r4
   d5544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d5546:	4798      	blx	r3
    _spi.endTransaction();
   d5548:	6a20      	ldr	r0, [r4, #32]
   d554a:	6803      	ldr	r3, [r0, #0]
   d554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d554e:	4798      	blx	r3
}
   d5550:	4628      	mov	r0, r5
   d5552:	bd70      	pop	{r4, r5, r6, pc}

000d5554 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   d5554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5556:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d5558:	6a00      	ldr	r0, [r0, #32]
{
   d555a:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d555c:	6803      	ldr	r3, [r0, #0]
   d555e:	6a1b      	ldr	r3, [r3, #32]
{
   d5560:	460f      	mov	r7, r1
   d5562:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d5564:	4798      	blx	r3
    selectSlave();
   d5566:	6823      	ldr	r3, [r4, #0]
   d5568:	4620      	mov	r0, r4
   d556a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d556c:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   d556e:	6a20      	ldr	r0, [r4, #32]
   d5570:	6803      	ldr	r3, [r0, #0]
   d5572:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   d5576:	681b      	ldr	r3, [r3, #0]
   d5578:	4798      	blx	r3
   d557a:	442e      	add	r6, r5
   d557c:	4607      	mov	r7, r0
    while (len--)
   d557e:	42b5      	cmp	r5, r6
   d5580:	d007      	beq.n	d5592 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   d5582:	6a20      	ldr	r0, [r4, #32]
   d5584:	6803      	ldr	r3, [r0, #0]
   d5586:	2100      	movs	r1, #0
   d5588:	681b      	ldr	r3, [r3, #0]
   d558a:	4798      	blx	r3
   d558c:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   d5590:	e7f5      	b.n	d557e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   d5592:	6823      	ldr	r3, [r4, #0]
   d5594:	4620      	mov	r0, r4
   d5596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d5598:	4798      	blx	r3
    _spi.endTransaction();
   d559a:	6a20      	ldr	r0, [r4, #32]
   d559c:	6803      	ldr	r3, [r0, #0]
   d559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d55a0:	4798      	blx	r3
}
   d55a2:	4638      	mov	r0, r7
   d55a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d55a6 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   d55a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d55a8:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d55aa:	6a00      	ldr	r0, [r0, #32]
{
   d55ac:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d55ae:	6803      	ldr	r3, [r0, #0]
   d55b0:	6a1b      	ldr	r3, [r3, #32]
{
   d55b2:	460f      	mov	r7, r1
   d55b4:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d55b6:	4798      	blx	r3
    selectSlave();
   d55b8:	6823      	ldr	r3, [r4, #0]
   d55ba:	4620      	mov	r0, r4
   d55bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d55be:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   d55c0:	6a20      	ldr	r0, [r4, #32]
   d55c2:	6803      	ldr	r3, [r0, #0]
   d55c4:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	4798      	blx	r3
   d55cc:	442e      	add	r6, r5
   d55ce:	4607      	mov	r7, r0
    while (len--)
   d55d0:	42b5      	cmp	r5, r6
   d55d2:	d006      	beq.n	d55e2 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   d55d4:	6a20      	ldr	r0, [r4, #32]
   d55d6:	f815 1b01 	ldrb.w	r1, [r5], #1
   d55da:	6803      	ldr	r3, [r0, #0]
   d55dc:	681b      	ldr	r3, [r3, #0]
   d55de:	4798      	blx	r3
    while (len--)
   d55e0:	e7f6      	b.n	d55d0 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   d55e2:	6823      	ldr	r3, [r4, #0]
   d55e4:	4620      	mov	r0, r4
   d55e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d55e8:	4798      	blx	r3
    _spi.endTransaction();
   d55ea:	6a20      	ldr	r0, [r4, #32]
   d55ec:	6803      	ldr	r3, [r0, #0]
   d55ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d55f0:	4798      	blx	r3
}
   d55f2:	4638      	mov	r0, r7
   d55f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d55f6 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   d55f6:	6a00      	ldr	r0, [r0, #32]
   d55f8:	6803      	ldr	r3, [r0, #0]
   d55fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d55fc:	4718      	bx	r3

000d55fe <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   d55fe:	2001      	movs	r0, #1
   d5600:	4770      	bx	lr

000d5602 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   d5602:	20fb      	movs	r0, #251	; 0xfb
   d5604:	4770      	bx	lr

000d5606 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   d5606:	4770      	bx	lr

000d5608 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   d5608:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   d560a:	7903      	ldrb	r3, [r0, #4]
   d560c:	2b05      	cmp	r3, #5
{
   d560e:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   d5610:	d010      	beq.n	d5634 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   d5612:	6803      	ldr	r3, [r0, #0]
   d5614:	2105      	movs	r1, #5
   d5616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d561a:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   d561c:	2207      	movs	r2, #7
   d561e:	2101      	movs	r1, #1
   d5620:	4620      	mov	r0, r4
   d5622:	f7ff ff72 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   d5626:	2280      	movs	r2, #128	; 0x80
   d5628:	2140      	movs	r1, #64	; 0x40
   d562a:	4620      	mov	r0, r4
   d562c:	f7ff ff6d 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   d5630:	2305      	movs	r3, #5
   d5632:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   d5634:	7923      	ldrb	r3, [r4, #4]
   d5636:	2b05      	cmp	r3, #5
   d5638:	d0fc      	beq.n	d5634 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   d563a:	7e20      	ldrb	r0, [r4, #24]
}
   d563c:	bd10      	pop	{r4, pc}

000d563e <_ZN7RH_RF95D0Ev>:
   d563e:	b510      	push	{r4, lr}
   d5640:	f44f 7198 	mov.w	r1, #304	; 0x130
   d5644:	4604      	mov	r4, r0
   d5646:	f003 f8eb 	bl	d8820 <_ZdlPvj>
   d564a:	4620      	mov	r0, r4
   d564c:	bd10      	pop	{r4, pc}

000d564e <_ZN7RH_RF955sleepEv>:
{
   d564e:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   d5650:	7903      	ldrb	r3, [r0, #4]
   d5652:	2b01      	cmp	r3, #1
{
   d5654:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   d5656:	d00b      	beq.n	d5670 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   d5658:	6803      	ldr	r3, [r0, #0]
   d565a:	2101      	movs	r1, #1
   d565c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d5660:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   d5662:	2200      	movs	r2, #0
   d5664:	2101      	movs	r1, #1
   d5666:	4620      	mov	r0, r4
   d5668:	f7ff ff4f 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   d566c:	2301      	movs	r3, #1
   d566e:	7123      	strb	r3, [r4, #4]
}
   d5670:	2001      	movs	r0, #1
   d5672:	bd10      	pop	{r4, pc}

000d5674 <_ZN7RH_RF954recvEPhS0_>:
{
   d5674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   d5676:	6803      	ldr	r3, [r0, #0]
   d5678:	68db      	ldr	r3, [r3, #12]
{
   d567a:	4604      	mov	r4, r0
   d567c:	460f      	mov	r7, r1
   d567e:	4615      	mov	r5, r2
    if (!available())
   d5680:	4798      	blx	r3
   d5682:	4606      	mov	r6, r0
   d5684:	b1b0      	cbz	r0, d56b4 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   d5686:	b187      	cbz	r7, d56aa <_ZN7RH_RF954recvEPhS0_+0x36>
   d5688:	b17d      	cbz	r5, d56aa <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   d568a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d568e:	782a      	ldrb	r2, [r5, #0]
   d5690:	3b03      	subs	r3, #3
   d5692:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   d5694:	bfde      	ittt	le
   d5696:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   d569a:	3b04      	suble	r3, #4
   d569c:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   d569e:	782a      	ldrb	r2, [r5, #0]
   d56a0:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d56a4:	4638      	mov	r0, r7
   d56a6:	f003 fcb9 	bl	d901c <memcpy>
    _rxBufValid = false;
   d56aa:	2300      	movs	r3, #0
   d56ac:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d56b0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   d56b4:	4630      	mov	r0, r6
   d56b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56b8 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   d56b8:	b538      	push	{r3, r4, r5, lr}
   d56ba:	4604      	mov	r4, r0
   d56bc:	4615      	mov	r5, r2
    _rxBufValid(0)
   d56be:	461a      	mov	r2, r3
   d56c0:	f7ff fef2 	bl	d54a8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   d56c4:	4b09      	ldr	r3, [pc, #36]	; (d56ec <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   d56c6:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   d56c8:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   d56ca:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   d56cc:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   d56d0:	2201      	movs	r2, #1
    _rxBufValid(0)
   d56d2:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   d56d6:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   d56da:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   d56de:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   d56e2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   d56e6:	4620      	mov	r0, r4
   d56e8:	bd38      	pop	{r3, r4, r5, pc}
   d56ea:	bf00      	nop
   d56ec:	000d9780 	.word	0x000d9780

000d56f0 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   d56f0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   d56f4:	2b03      	cmp	r3, #3
   d56f6:	d91b      	bls.n	d5730 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   d56f8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d56fc:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   d56fe:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   d5702:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   d5704:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   d5708:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   d570a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d570e:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   d5710:	7983      	ldrb	r3, [r0, #6]
   d5712:	b933      	cbnz	r3, d5722 <_ZN7RH_RF9513validateRxBufEv+0x32>
   d5714:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   d5716:	7942      	ldrb	r2, [r0, #5]
   d5718:	429a      	cmp	r2, r3
   d571a:	d002      	beq.n	d5722 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   d571c:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   d571e:	2bff      	cmp	r3, #255	; 0xff
   d5720:	d106      	bne.n	d5730 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   d5722:	8a83      	ldrh	r3, [r0, #20]
   d5724:	3301      	adds	r3, #1
   d5726:	b29b      	uxth	r3, r3
   d5728:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   d572a:	2301      	movs	r3, #1
   d572c:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   d5730:	4770      	bx	lr
   d5732:	0000      	movs	r0, r0
   d5734:	0000      	movs	r0, r0
	...

000d5738 <_ZN7RH_RF9512setFrequencyEf>:
{
   d5738:	b538      	push	{r3, r4, r5, lr}
   d573a:	4604      	mov	r4, r0
   d573c:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d5740:	ee10 0a10 	vmov	r0, s0
{
   d5744:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d5748:	f003 f9d8 	bl	d8afc <__aeabi_f2d>
   d574c:	a317      	add	r3, pc, #92	; (adr r3, d57ac <_ZN7RH_RF9512setFrequencyEf+0x74>)
   d574e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5752:	f003 fa2b 	bl	d8bac <__aeabi_dmul>
   d5756:	a317      	add	r3, pc, #92	; (adr r3, d57b4 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   d5758:	e9d3 2300 	ldrd	r2, r3, [r3]
   d575c:	f003 fb50 	bl	d8e00 <__aeabi_ddiv>
   d5760:	f003 fc36 	bl	d8fd0 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d5764:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d5766:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d5768:	f3c0 4207 	ubfx	r2, r0, #16, #8
   d576c:	4620      	mov	r0, r4
   d576e:	f7ff fecc 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   d5772:	f3c5 2207 	ubfx	r2, r5, #8, #8
   d5776:	2107      	movs	r1, #7
   d5778:	4620      	mov	r0, r4
   d577a:	f7ff fec6 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   d577e:	b2ea      	uxtb	r2, r5
   d5780:	2108      	movs	r1, #8
   d5782:	4620      	mov	r0, r4
   d5784:	f7ff fec1 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   d5788:	eddf 7a07 	vldr	s15, [pc, #28]	; d57a8 <_ZN7RH_RF9512setFrequencyEf+0x70>
   d578c:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   d5790:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   d5794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5798:	bfac      	ite	ge
   d579a:	2301      	movge	r3, #1
   d579c:	2300      	movlt	r3, #0
}
   d579e:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   d57a0:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   d57a4:	bd38      	pop	{r3, r4, r5, pc}
   d57a6:	bf00      	nop
   d57a8:	4442c000 	.word	0x4442c000
   d57ac:	00000000 	.word	0x00000000
   d57b0:	412e8480 	.word	0x412e8480
   d57b4:	00000000 	.word	0x00000000
   d57b8:	404e8480 	.word	0x404e8480

000d57bc <_ZN7RH_RF9511setModeIdleEv>:
{
   d57bc:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   d57be:	7903      	ldrb	r3, [r0, #4]
   d57c0:	2b02      	cmp	r3, #2
{
   d57c2:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   d57c4:	d00b      	beq.n	d57de <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   d57c6:	6803      	ldr	r3, [r0, #0]
   d57c8:	2102      	movs	r1, #2
   d57ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d57ce:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   d57d0:	2201      	movs	r2, #1
   d57d2:	4611      	mov	r1, r2
   d57d4:	4620      	mov	r0, r4
   d57d6:	f7ff fe98 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   d57da:	2302      	movs	r3, #2
   d57dc:	7123      	strb	r3, [r4, #4]
}
   d57de:	bd10      	pop	{r4, pc}

000d57e0 <_ZN7RH_RF9515handleInterruptEv>:
{
   d57e0:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d57e2:	2112      	movs	r1, #18
{
   d57e4:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d57e6:	f7ff fe6f 	bl	d54c8 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d57ea:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d57ec:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d57ee:	4620      	mov	r0, r4
   d57f0:	f7ff fe6a 	bl	d54c8 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d57f4:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d57f6:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d57f8:	2112      	movs	r1, #18
   d57fa:	4620      	mov	r0, r4
   d57fc:	f7ff fe85 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   d5800:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   d5802:	2b04      	cmp	r3, #4
   d5804:	d107      	bne.n	d5816 <_ZN7RH_RF9515handleInterruptEv+0x36>
   d5806:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   d580a:	d117      	bne.n	d583c <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   d580c:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   d5810:	b10b      	cbz	r3, d5816 <_ZN7RH_RF9515handleInterruptEv+0x36>
   d5812:	0670      	lsls	r0, r6, #25
   d5814:	d512      	bpl.n	d583c <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   d5816:	7923      	ldrb	r3, [r4, #4]
   d5818:	2b04      	cmp	r3, #4
   d581a:	d101      	bne.n	d5820 <_ZN7RH_RF9515handleInterruptEv+0x40>
   d581c:	0669      	lsls	r1, r5, #25
   d581e:	d422      	bmi.n	d5866 <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   d5820:	7923      	ldrb	r3, [r4, #4]
   d5822:	2b03      	cmp	r3, #3
   d5824:	d101      	bne.n	d582a <_ZN7RH_RF9515handleInterruptEv+0x4a>
   d5826:	072a      	lsls	r2, r5, #28
   d5828:	d469      	bmi.n	d58fe <_ZN7RH_RF9515handleInterruptEv+0x11e>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   d582a:	7923      	ldrb	r3, [r4, #4]
   d582c:	2b05      	cmp	r3, #5
   d582e:	d10e      	bne.n	d584e <_ZN7RH_RF9515handleInterruptEv+0x6e>
   d5830:	076b      	lsls	r3, r5, #29
   d5832:	d50c      	bpl.n	d584e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   d5834:	f005 0501 	and.w	r5, r5, #1
   d5838:	7625      	strb	r5, [r4, #24]
   d583a:	e059      	b.n	d58f0 <_ZN7RH_RF9515handleInterruptEv+0x110>
	_rxBad++;
   d583c:	8a63      	ldrh	r3, [r4, #18]
   d583e:	3301      	adds	r3, #1
   d5840:	b29b      	uxth	r3, r3
   d5842:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   d5844:	2300      	movs	r3, #0
   d5846:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d584a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d584e:	22ff      	movs	r2, #255	; 0xff
   d5850:	2112      	movs	r1, #18
   d5852:	4620      	mov	r0, r4
   d5854:	f7ff fe59 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d5858:	4620      	mov	r0, r4
   d585a:	22ff      	movs	r2, #255	; 0xff
}
   d585c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d5860:	2112      	movs	r1, #18
   d5862:	f7ff be52 	b.w	d550a <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d5866:	2113      	movs	r1, #19
   d5868:	4620      	mov	r0, r4
   d586a:	f7ff fe2d 	bl	d54c8 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d586e:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d5870:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d5872:	4620      	mov	r0, r4
   d5874:	f7ff fe28 	bl	d54c8 <_ZN11RHSPIDriver7spiReadEh>
   d5878:	210d      	movs	r1, #13
   d587a:	4602      	mov	r2, r0
   d587c:	4620      	mov	r0, r4
   d587e:	f7ff fe44 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   d5882:	f104 0229 	add.w	r2, r4, #41	; 0x29
   d5886:	462b      	mov	r3, r5
   d5888:	2100      	movs	r1, #0
   d588a:	4620      	mov	r0, r4
   d588c:	f7ff fe62 	bl	d5554 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d5890:	2119      	movs	r1, #25
	_bufLen = len;
   d5892:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d5896:	4620      	mov	r0, r4
   d5898:	f7ff fe16 	bl	d54c8 <_ZN11RHSPIDriver7spiReadEh>
   d589c:	b240      	sxtb	r0, r0
   d589e:	2800      	cmp	r0, #0
   d58a0:	bfb8      	it	lt
   d58a2:	3003      	addlt	r0, #3
   d58a4:	1080      	asrs	r0, r0, #2
   d58a6:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d58aa:	211a      	movs	r1, #26
   d58ac:	4620      	mov	r0, r4
   d58ae:	f7ff fe0b 	bl	d54c8 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   d58b2:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d58b6:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   d58b8:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d58ba:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d58bc:	bfa9      	itett	ge
   d58be:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   d58c0:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d58c2:	b21b      	sxthge	r3, r3
   d58c4:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   d58c6:	bfb2      	itee	lt
   d58c8:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d58ca:	220f      	movge	r2, #15
   d58cc:	fb93 f3f2 	sdivge	r3, r3, r2
   d58d0:	b21b      	sxth	r3, r3
   d58d2:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   d58d4:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   d58d8:	b173      	cbz	r3, d58f8 <_ZN7RH_RF9515handleInterruptEv+0x118>
	    _lastRssi -= 157;
   d58da:	8a23      	ldrh	r3, [r4, #16]
   d58dc:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   d58de:	b21b      	sxth	r3, r3
   d58e0:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   d58e2:	4620      	mov	r0, r4
   d58e4:	f7ff ff04 	bl	d56f0 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   d58e8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   d58ec:	2b00      	cmp	r3, #0
   d58ee:	d0ae      	beq.n	d584e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   d58f0:	4620      	mov	r0, r4
   d58f2:	f7ff ff63 	bl	d57bc <_ZN7RH_RF9511setModeIdleEv>
   d58f6:	e7aa      	b.n	d584e <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   d58f8:	8a23      	ldrh	r3, [r4, #16]
   d58fa:	3ba4      	subs	r3, #164	; 0xa4
   d58fc:	e7ef      	b.n	d58de <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   d58fe:	8ae3      	ldrh	r3, [r4, #22]
   d5900:	3301      	adds	r3, #1
   d5902:	b29b      	uxth	r3, r3
   d5904:	82e3      	strh	r3, [r4, #22]
	setModeIdle();
   d5906:	e7f3      	b.n	d58f0 <_ZN7RH_RF9515handleInterruptEv+0x110>

000d5908 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   d5908:	4b02      	ldr	r3, [pc, #8]	; (d5914 <_ZN7RH_RF954isr0Ev+0xc>)
   d590a:	6818      	ldr	r0, [r3, #0]
   d590c:	b108      	cbz	r0, d5912 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   d590e:	f7ff bf67 	b.w	d57e0 <_ZN7RH_RF9515handleInterruptEv>
}
   d5912:	4770      	bx	lr
   d5914:	2003e550 	.word	0x2003e550

000d5918 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   d5918:	4b02      	ldr	r3, [pc, #8]	; (d5924 <_ZN7RH_RF954isr1Ev+0xc>)
   d591a:	6858      	ldr	r0, [r3, #4]
   d591c:	b108      	cbz	r0, d5922 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   d591e:	f7ff bf5f 	b.w	d57e0 <_ZN7RH_RF9515handleInterruptEv>
}
   d5922:	4770      	bx	lr
   d5924:	2003e550 	.word	0x2003e550

000d5928 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   d5928:	4b02      	ldr	r3, [pc, #8]	; (d5934 <_ZN7RH_RF954isr2Ev+0xc>)
   d592a:	6898      	ldr	r0, [r3, #8]
   d592c:	b108      	cbz	r0, d5932 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   d592e:	f7ff bf57 	b.w	d57e0 <_ZN7RH_RF9515handleInterruptEv>
}
   d5932:	4770      	bx	lr
   d5934:	2003e550 	.word	0x2003e550

000d5938 <_ZN7RH_RF959setModeRxEv>:
{
   d5938:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   d593a:	7903      	ldrb	r3, [r0, #4]
   d593c:	2b04      	cmp	r3, #4
{
   d593e:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   d5940:	d010      	beq.n	d5964 <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   d5942:	6803      	ldr	r3, [r0, #0]
   d5944:	2104      	movs	r1, #4
   d5946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d594a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   d594c:	2205      	movs	r2, #5
   d594e:	2101      	movs	r1, #1
   d5950:	4620      	mov	r0, r4
   d5952:	f7ff fdda 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   d5956:	2200      	movs	r2, #0
   d5958:	2140      	movs	r1, #64	; 0x40
   d595a:	4620      	mov	r0, r4
   d595c:	f7ff fdd5 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   d5960:	2304      	movs	r3, #4
   d5962:	7123      	strb	r3, [r4, #4]
}
   d5964:	bd10      	pop	{r4, pc}

000d5966 <_ZN7RH_RF959availableEv>:
{
   d5966:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   d5968:	7903      	ldrb	r3, [r0, #4]
   d596a:	2b03      	cmp	r3, #3
{
   d596c:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   d596e:	d005      	beq.n	d597c <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   d5970:	f7ff ffe2 	bl	d5938 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   d5974:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   d5978:	b2c0      	uxtb	r0, r0
}
   d597a:	bd10      	pop	{r4, pc}
	return false;
   d597c:	2000      	movs	r0, #0
   d597e:	e7fc      	b.n	d597a <_ZN7RH_RF959availableEv+0x14>

000d5980 <_ZN7RH_RF959setModeTxEv>:
{
   d5980:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   d5982:	7903      	ldrb	r3, [r0, #4]
   d5984:	2b03      	cmp	r3, #3
{
   d5986:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   d5988:	d010      	beq.n	d59ac <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   d598a:	6803      	ldr	r3, [r0, #0]
   d598c:	2103      	movs	r1, #3
   d598e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d5992:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   d5994:	2203      	movs	r2, #3
   d5996:	2101      	movs	r1, #1
   d5998:	4620      	mov	r0, r4
   d599a:	f7ff fdb6 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   d599e:	2240      	movs	r2, #64	; 0x40
   d59a0:	4611      	mov	r1, r2
   d59a2:	4620      	mov	r0, r4
   d59a4:	f7ff fdb1 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   d59a8:	2303      	movs	r3, #3
   d59aa:	7123      	strb	r3, [r4, #4]
}
   d59ac:	bd10      	pop	{r4, pc}

000d59ae <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d59ae:	2afb      	cmp	r2, #251	; 0xfb
{
   d59b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59b2:	4604      	mov	r4, r0
   d59b4:	460f      	mov	r7, r1
   d59b6:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d59b8:	d902      	bls.n	d59c0 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   d59ba:	2600      	movs	r6, #0
}
   d59bc:	4630      	mov	r0, r6
   d59be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   d59c0:	6803      	ldr	r3, [r0, #0]
   d59c2:	6a1b      	ldr	r3, [r3, #32]
   d59c4:	4798      	blx	r3
    setModeIdle();
   d59c6:	4620      	mov	r0, r4
   d59c8:	f7ff fef8 	bl	d57bc <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   d59cc:	6823      	ldr	r3, [r4, #0]
   d59ce:	4620      	mov	r0, r4
   d59d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d59d2:	4798      	blx	r3
   d59d4:	4606      	mov	r6, r0
   d59d6:	2800      	cmp	r0, #0
   d59d8:	d0ef      	beq.n	d59ba <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   d59da:	2200      	movs	r2, #0
   d59dc:	210d      	movs	r1, #13
   d59de:	4620      	mov	r0, r4
   d59e0:	f7ff fd93 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   d59e4:	7ae2      	ldrb	r2, [r4, #11]
   d59e6:	2100      	movs	r1, #0
   d59e8:	4620      	mov	r0, r4
   d59ea:	f7ff fd8e 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   d59ee:	7b22      	ldrb	r2, [r4, #12]
   d59f0:	2100      	movs	r1, #0
   d59f2:	4620      	mov	r0, r4
   d59f4:	f7ff fd89 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   d59f8:	7b62      	ldrb	r2, [r4, #13]
   d59fa:	2100      	movs	r1, #0
   d59fc:	4620      	mov	r0, r4
   d59fe:	f7ff fd84 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   d5a02:	7ba2      	ldrb	r2, [r4, #14]
   d5a04:	2100      	movs	r1, #0
   d5a06:	4620      	mov	r0, r4
   d5a08:	f7ff fd7f 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   d5a0c:	462b      	mov	r3, r5
   d5a0e:	463a      	mov	r2, r7
   d5a10:	2100      	movs	r1, #0
   d5a12:	4620      	mov	r0, r4
   d5a14:	f7ff fdc7 	bl	d55a6 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   d5a18:	1d2a      	adds	r2, r5, #4
   d5a1a:	b2d2      	uxtb	r2, r2
   d5a1c:	2122      	movs	r1, #34	; 0x22
   d5a1e:	4620      	mov	r0, r4
   d5a20:	f7ff fd73 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   d5a24:	4620      	mov	r0, r4
   d5a26:	f7ff ffab 	bl	d5980 <_ZN7RH_RF959setModeTxEv>
    return true;
   d5a2a:	e7c7      	b.n	d59bc <_ZN7RH_RF954sendEPKhh+0xe>

000d5a2c <_ZN7RH_RF9510setTxPowerEab>:
{
   d5a2c:	b538      	push	{r3, r4, r5, lr}
   d5a2e:	4605      	mov	r5, r0
   d5a30:	460c      	mov	r4, r1
    _useRFO = useRFO;
   d5a32:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   d5a36:	b172      	cbz	r2, d5a56 <_ZN7RH_RF9510setTxPowerEab+0x2a>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   d5a38:	f381 0204 	usat	r2, #4, r1
   d5a3c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d5a40:	b2d2      	uxtb	r2, r2
   d5a42:	2109      	movs	r1, #9
   d5a44:	f7ff fd61 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d5a48:	2204      	movs	r2, #4
   d5a4a:	214d      	movs	r1, #77	; 0x4d
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d5a4c:	4628      	mov	r0, r5
}
   d5a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d5a52:	f7ff bd5a 	b.w	d550a <_ZN11RHSPIDriver8spiWriteEhh>
	if (power > 20)
   d5a56:	2914      	cmp	r1, #20
   d5a58:	dc10      	bgt.n	d5a7c <_ZN7RH_RF9510setTxPowerEab+0x50>
	if (power < 2)
   d5a5a:	2901      	cmp	r1, #1
   d5a5c:	dd10      	ble.n	d5a80 <_ZN7RH_RF9510setTxPowerEab+0x54>
	if (power > 17)
   d5a5e:	2911      	cmp	r1, #17
   d5a60:	dd0f      	ble.n	d5a82 <_ZN7RH_RF9510setTxPowerEab+0x56>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   d5a62:	2207      	movs	r2, #7
   d5a64:	214d      	movs	r1, #77	; 0x4d
   d5a66:	4628      	mov	r0, r5
   d5a68:	f7ff fd4f 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   d5a6c:	3c03      	subs	r4, #3
   d5a6e:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d5a70:	1ea2      	subs	r2, r4, #2
   d5a72:	f062 027f 	orn	r2, r2, #127	; 0x7f
   d5a76:	b2d2      	uxtb	r2, r2
   d5a78:	2109      	movs	r1, #9
   d5a7a:	e7e7      	b.n	d5a4c <_ZN7RH_RF9510setTxPowerEab+0x20>
	    power = 20;
   d5a7c:	2414      	movs	r4, #20
   d5a7e:	e7f0      	b.n	d5a62 <_ZN7RH_RF9510setTxPowerEab+0x36>
	    power = 2;
   d5a80:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d5a82:	2204      	movs	r2, #4
   d5a84:	214d      	movs	r1, #77	; 0x4d
   d5a86:	4628      	mov	r0, r5
   d5a88:	f7ff fd3f 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
   d5a8c:	e7f0      	b.n	d5a70 <_ZN7RH_RF9510setTxPowerEab+0x44>

000d5a8e <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   d5a8e:	b538      	push	{r3, r4, r5, lr}
   d5a90:	460c      	mov	r4, r1
   d5a92:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   d5a94:	780a      	ldrb	r2, [r1, #0]
   d5a96:	211d      	movs	r1, #29
   d5a98:	f7ff fd37 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   d5a9c:	7862      	ldrb	r2, [r4, #1]
   d5a9e:	211e      	movs	r1, #30
   d5aa0:	4628      	mov	r0, r5
   d5aa2:	f7ff fd32 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d5aa6:	78a2      	ldrb	r2, [r4, #2]
   d5aa8:	4628      	mov	r0, r5
   d5aaa:	2126      	movs	r1, #38	; 0x26
}
   d5aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d5ab0:	f7ff bd2b 	b.w	d550a <_ZN11RHSPIDriver8spiWriteEhh>

000d5ab4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d5ab4:	2905      	cmp	r1, #5
{
   d5ab6:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d5ab8:	d80f      	bhi.n	d5ada <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d5aba:	4b09      	ldr	r3, [pc, #36]	; (d5ae0 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   d5abc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d5ac0:	185c      	adds	r4, r3, r1
   d5ac2:	5a5a      	ldrh	r2, [r3, r1]
   d5ac4:	78a3      	ldrb	r3, [r4, #2]
   d5ac6:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   d5aca:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d5acc:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   d5ad0:	f7ff ffdd 	bl	d5a8e <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   d5ad4:	2001      	movs	r0, #1
}
   d5ad6:	b002      	add	sp, #8
   d5ad8:	bd10      	pop	{r4, pc}
        return false;
   d5ada:	2000      	movs	r0, #0
   d5adc:	e7fb      	b.n	d5ad6 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   d5ade:	bf00      	nop
   d5ae0:	000d9768 	.word	0x000d9768

000d5ae4 <_ZN7RH_RF9517setPreambleLengthEt>:
{
   d5ae4:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d5ae6:	0a0a      	lsrs	r2, r1, #8
{
   d5ae8:	4605      	mov	r5, r0
   d5aea:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d5aec:	2120      	movs	r1, #32
   d5aee:	f7ff fd0c 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d5af2:	b2e2      	uxtb	r2, r4
   d5af4:	4628      	mov	r0, r5
   d5af6:	2121      	movs	r1, #33	; 0x21
}
   d5af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d5afc:	f7ff bd05 	b.w	d550a <_ZN11RHSPIDriver8spiWriteEhh>

000d5b00 <_ZN7RH_RF954initEv>:
{
   d5b00:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5b02:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   d5b04:	f7ff fcb0 	bl	d5468 <_ZN11RHSPIDriver4initEv>
   d5b08:	4606      	mov	r6, r0
   d5b0a:	b918      	cbnz	r0, d5b14 <_ZN7RH_RF954initEv+0x14>
	return false;
   d5b0c:	2600      	movs	r6, #0
}
   d5b0e:	4630      	mov	r0, r6
   d5b10:	b002      	add	sp, #8
   d5b12:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   d5b14:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   d5b18:	2dff      	cmp	r5, #255	; 0xff
   d5b1a:	d052      	beq.n	d5bc2 <_ZN7RH_RF954initEv+0xc2>
	spiUsingInterrupt(interruptNumber);
   d5b1c:	4629      	mov	r1, r5
   d5b1e:	4620      	mov	r0, r4
   d5b20:	f7ff fd69 	bl	d55f6 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   d5b24:	2280      	movs	r2, #128	; 0x80
   d5b26:	2101      	movs	r1, #1
   d5b28:	4620      	mov	r0, r4
   d5b2a:	f7ff fcee 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   d5b2e:	200a      	movs	r0, #10
   d5b30:	f000 fb4e 	bl	d61d0 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   d5b34:	2101      	movs	r1, #1
   d5b36:	4620      	mov	r0, r4
   d5b38:	f7ff fcc6 	bl	d54c8 <_ZN11RHSPIDriver7spiReadEh>
   d5b3c:	2880      	cmp	r0, #128	; 0x80
   d5b3e:	d1e5      	bne.n	d5b0c <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   d5b40:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   d5b44:	28ff      	cmp	r0, #255	; 0xff
   d5b46:	d01c      	beq.n	d5b82 <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   d5b48:	2100      	movs	r1, #0
   d5b4a:	f002 fe01 	bl	d8750 <pinMode>
	if (_myInterruptIndex == 0xff)
   d5b4e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d5b52:	2bff      	cmp	r3, #255	; 0xff
   d5b54:	d107      	bne.n	d5b66 <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   d5b56:	4a25      	ldr	r2, [pc, #148]	; (d5bec <_ZN7RH_RF954initEv+0xec>)
   d5b58:	7813      	ldrb	r3, [r2, #0]
   d5b5a:	2b03      	cmp	r3, #3
   d5b5c:	d8d6      	bhi.n	d5b0c <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   d5b5e:	1c59      	adds	r1, r3, #1
   d5b60:	7011      	strb	r1, [r2, #0]
   d5b62:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   d5b66:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   d5b6a:	4b21      	ldr	r3, [pc, #132]	; (d5bf0 <_ZN7RH_RF954initEv+0xf0>)
   d5b6c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   d5b70:	bb52      	cbnz	r2, d5bc8 <_ZN7RH_RF954initEv+0xc8>
	    attachInterrupt(interruptNumber, isr0, RISING);
   d5b72:	4920      	ldr	r1, [pc, #128]	; (d5bf4 <_ZN7RH_RF954initEv+0xf4>)
   d5b74:	9200      	str	r2, [sp, #0]
   d5b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5b7a:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   d5b7c:	b2a8      	uxth	r0, r5
   d5b7e:	f000 fecf 	bl	d6920 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   d5b82:	2200      	movs	r2, #0
   d5b84:	210e      	movs	r1, #14
   d5b86:	4620      	mov	r0, r4
   d5b88:	f7ff fcbf 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   d5b8c:	2200      	movs	r2, #0
   d5b8e:	210f      	movs	r1, #15
   d5b90:	4620      	mov	r0, r4
   d5b92:	f7ff fcba 	bl	d550a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   d5b96:	4620      	mov	r0, r4
   d5b98:	f7ff fe10 	bl	d57bc <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   d5b9c:	2100      	movs	r1, #0
   d5b9e:	4620      	mov	r0, r4
   d5ba0:	f7ff ff88 	bl	d5ab4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   d5ba4:	2108      	movs	r1, #8
   d5ba6:	4620      	mov	r0, r4
   d5ba8:	f7ff ff9c 	bl	d5ae4 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   d5bac:	ed9f 0a12 	vldr	s0, [pc, #72]	; d5bf8 <_ZN7RH_RF954initEv+0xf8>
   d5bb0:	4620      	mov	r0, r4
   d5bb2:	f7ff fdc1 	bl	d5738 <_ZN7RH_RF9512setFrequencyEf>
    setTxPower(13);
   d5bb6:	2200      	movs	r2, #0
   d5bb8:	210d      	movs	r1, #13
   d5bba:	4620      	mov	r0, r4
   d5bbc:	f7ff ff36 	bl	d5a2c <_ZN7RH_RF9510setTxPowerEab>
    return true;
   d5bc0:	e7a5      	b.n	d5b0e <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   d5bc2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d5bc6:	e7ad      	b.n	d5b24 <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   d5bc8:	2a01      	cmp	r2, #1
   d5bca:	f04f 0300 	mov.w	r3, #0
   d5bce:	d104      	bne.n	d5bda <_ZN7RH_RF954initEv+0xda>
	    attachInterrupt(interruptNumber, isr1, RISING);
   d5bd0:	9300      	str	r3, [sp, #0]
   d5bd2:	490a      	ldr	r1, [pc, #40]	; (d5bfc <_ZN7RH_RF954initEv+0xfc>)
   d5bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5bd8:	e7d0      	b.n	d5b7c <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   d5bda:	2a02      	cmp	r2, #2
   d5bdc:	d196      	bne.n	d5b0c <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   d5bde:	9300      	str	r3, [sp, #0]
   d5be0:	4907      	ldr	r1, [pc, #28]	; (d5c00 <_ZN7RH_RF954initEv+0x100>)
   d5be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5be6:	2201      	movs	r2, #1
   d5be8:	e7c8      	b.n	d5b7c <_ZN7RH_RF954initEv+0x7c>
   d5bea:	bf00      	nop
   d5bec:	2003e54d 	.word	0x2003e54d
   d5bf0:	2003e550 	.word	0x2003e550
   d5bf4:	000d5909 	.word	0x000d5909
   d5bf8:	43d90000 	.word	0x43d90000
   d5bfc:	000d5919 	.word	0x000d5919
   d5c00:	000d5929 	.word	0x000d5929

000d5c04 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5c04:	b508      	push	{r3, lr}
   d5c06:	4b02      	ldr	r3, [pc, #8]	; (d5c10 <os_mutex_recursive_create+0xc>)
   d5c08:	681b      	ldr	r3, [r3, #0]
   d5c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5c0c:	9301      	str	r3, [sp, #4]
   d5c0e:	bd08      	pop	{r3, pc}
   d5c10:	00030248 	.word	0x00030248

000d5c14 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5c14:	b508      	push	{r3, lr}
   d5c16:	4b02      	ldr	r3, [pc, #8]	; (d5c20 <os_mutex_recursive_destroy+0xc>)
   d5c18:	681b      	ldr	r3, [r3, #0]
   d5c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5c1c:	9301      	str	r3, [sp, #4]
   d5c1e:	bd08      	pop	{r3, pc}
   d5c20:	00030248 	.word	0x00030248

000d5c24 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5c24:	b508      	push	{r3, lr}
   d5c26:	4b02      	ldr	r3, [pc, #8]	; (d5c30 <os_mutex_recursive_lock+0xc>)
   d5c28:	681b      	ldr	r3, [r3, #0]
   d5c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5c2c:	9301      	str	r3, [sp, #4]
   d5c2e:	bd08      	pop	{r3, pc}
   d5c30:	00030248 	.word	0x00030248

000d5c34 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5c34:	b508      	push	{r3, lr}
   d5c36:	4b02      	ldr	r3, [pc, #8]	; (d5c40 <os_mutex_recursive_unlock+0xc>)
   d5c38:	681b      	ldr	r3, [r3, #0]
   d5c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5c3c:	9301      	str	r3, [sp, #4]
   d5c3e:	bd08      	pop	{r3, pc}
   d5c40:	00030248 	.word	0x00030248

000d5c44 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d5c44:	b508      	push	{r3, lr}
   d5c46:	4b02      	ldr	r3, [pc, #8]	; (d5c50 <HAL_Feature_Set+0xc>)
   d5c48:	681b      	ldr	r3, [r3, #0]
   d5c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5c4c:	9301      	str	r3, [sp, #4]
   d5c4e:	bd08      	pop	{r3, pc}
   d5c50:	00030234 	.word	0x00030234

000d5c54 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d5c54:	b508      	push	{r3, lr}
   d5c56:	4b02      	ldr	r3, [pc, #8]	; (d5c60 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d5c58:	681b      	ldr	r3, [r3, #0]
   d5c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5c5c:	9301      	str	r3, [sp, #4]
   d5c5e:	bd08      	pop	{r3, pc}
   d5c60:	00030234 	.word	0x00030234

000d5c64 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5c64:	b508      	push	{r3, lr}
   d5c66:	4b02      	ldr	r3, [pc, #8]	; (d5c70 <HAL_RNG_GetRandomNumber+0xc>)
   d5c68:	681b      	ldr	r3, [r3, #0]
   d5c6a:	685b      	ldr	r3, [r3, #4]
   d5c6c:	9301      	str	r3, [sp, #4]
   d5c6e:	bd08      	pop	{r3, pc}
   d5c70:	00030218 	.word	0x00030218

000d5c74 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5c74:	b508      	push	{r3, lr}
   d5c76:	4b02      	ldr	r3, [pc, #8]	; (d5c80 <HAL_Delay_Microseconds+0xc>)
   d5c78:	681b      	ldr	r3, [r3, #0]
   d5c7a:	68db      	ldr	r3, [r3, #12]
   d5c7c:	9301      	str	r3, [sp, #4]
   d5c7e:	bd08      	pop	{r3, pc}
   d5c80:	00030218 	.word	0x00030218

000d5c84 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5c84:	b508      	push	{r3, lr}
   d5c86:	4b02      	ldr	r3, [pc, #8]	; (d5c90 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5c88:	681b      	ldr	r3, [r3, #0]
   d5c8a:	695b      	ldr	r3, [r3, #20]
   d5c8c:	9301      	str	r3, [sp, #4]
   d5c8e:	bd08      	pop	{r3, pc}
   d5c90:	00030218 	.word	0x00030218

000d5c94 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d5c94:	b508      	push	{r3, lr}
   d5c96:	4b02      	ldr	r3, [pc, #8]	; (d5ca0 <hal_rtc_time_is_valid+0xc>)
   d5c98:	681b      	ldr	r3, [r3, #0]
   d5c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5c9c:	9301      	str	r3, [sp, #4]
   d5c9e:	bd08      	pop	{r3, pc}
   d5ca0:	00030218 	.word	0x00030218

000d5ca4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5ca4:	b508      	push	{r3, lr}
   d5ca6:	4b02      	ldr	r3, [pc, #8]	; (d5cb0 <hal_rtc_get_time+0xc>)
   d5ca8:	681b      	ldr	r3, [r3, #0]
   d5caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5cac:	9301      	str	r3, [sp, #4]
   d5cae:	bd08      	pop	{r3, pc}
   d5cb0:	00030218 	.word	0x00030218

000d5cb4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5cb4:	b508      	push	{r3, lr}
   d5cb6:	4b02      	ldr	r3, [pc, #8]	; (d5cc0 <HAL_Pin_Mode+0xc>)
   d5cb8:	681b      	ldr	r3, [r3, #0]
   d5cba:	689b      	ldr	r3, [r3, #8]
   d5cbc:	9301      	str	r3, [sp, #4]
   d5cbe:	bd08      	pop	{r3, pc}
   d5cc0:	0003022c 	.word	0x0003022c

000d5cc4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5cc4:	b508      	push	{r3, lr}
   d5cc6:	4b02      	ldr	r3, [pc, #8]	; (d5cd0 <HAL_Get_Pin_Mode+0xc>)
   d5cc8:	681b      	ldr	r3, [r3, #0]
   d5cca:	68db      	ldr	r3, [r3, #12]
   d5ccc:	9301      	str	r3, [sp, #4]
   d5cce:	bd08      	pop	{r3, pc}
   d5cd0:	0003022c 	.word	0x0003022c

000d5cd4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5cd4:	b508      	push	{r3, lr}
   d5cd6:	4b02      	ldr	r3, [pc, #8]	; (d5ce0 <HAL_GPIO_Write+0xc>)
   d5cd8:	681b      	ldr	r3, [r3, #0]
   d5cda:	691b      	ldr	r3, [r3, #16]
   d5cdc:	9301      	str	r3, [sp, #4]
   d5cde:	bd08      	pop	{r3, pc}
   d5ce0:	0003022c 	.word	0x0003022c

000d5ce4 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d5ce4:	b508      	push	{r3, lr}
   d5ce6:	4b02      	ldr	r3, [pc, #8]	; (d5cf0 <HAL_Interrupts_Attach+0xc>)
   d5ce8:	681b      	ldr	r3, [r3, #0]
   d5cea:	699b      	ldr	r3, [r3, #24]
   d5cec:	9301      	str	r3, [sp, #4]
   d5cee:	bd08      	pop	{r3, pc}
   d5cf0:	0003022c 	.word	0x0003022c

000d5cf4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d5cf4:	b508      	push	{r3, lr}
   d5cf6:	4b02      	ldr	r3, [pc, #8]	; (d5d00 <HAL_Interrupts_Detach+0xc>)
   d5cf8:	681b      	ldr	r3, [r3, #0]
   d5cfa:	69db      	ldr	r3, [r3, #28]
   d5cfc:	9301      	str	r3, [sp, #4]
   d5cfe:	bd08      	pop	{r3, pc}
   d5d00:	0003022c 	.word	0x0003022c

000d5d04 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5d04:	b508      	push	{r3, lr}
   d5d06:	4b02      	ldr	r3, [pc, #8]	; (d5d10 <hal_i2c_write+0xc>)
   d5d08:	681b      	ldr	r3, [r3, #0]
   d5d0a:	6a1b      	ldr	r3, [r3, #32]
   d5d0c:	9301      	str	r3, [sp, #4]
   d5d0e:	bd08      	pop	{r3, pc}
   d5d10:	00030228 	.word	0x00030228

000d5d14 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5d14:	b508      	push	{r3, lr}
   d5d16:	4b02      	ldr	r3, [pc, #8]	; (d5d20 <hal_i2c_available+0xc>)
   d5d18:	681b      	ldr	r3, [r3, #0]
   d5d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5d1c:	9301      	str	r3, [sp, #4]
   d5d1e:	bd08      	pop	{r3, pc}
   d5d20:	00030228 	.word	0x00030228

000d5d24 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5d24:	b508      	push	{r3, lr}
   d5d26:	4b02      	ldr	r3, [pc, #8]	; (d5d30 <hal_i2c_read+0xc>)
   d5d28:	681b      	ldr	r3, [r3, #0]
   d5d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d2c:	9301      	str	r3, [sp, #4]
   d5d2e:	bd08      	pop	{r3, pc}
   d5d30:	00030228 	.word	0x00030228

000d5d34 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5d34:	b508      	push	{r3, lr}
   d5d36:	4b02      	ldr	r3, [pc, #8]	; (d5d40 <hal_i2c_peek+0xc>)
   d5d38:	681b      	ldr	r3, [r3, #0]
   d5d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5d3c:	9301      	str	r3, [sp, #4]
   d5d3e:	bd08      	pop	{r3, pc}
   d5d40:	00030228 	.word	0x00030228

000d5d44 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5d44:	b508      	push	{r3, lr}
   d5d46:	4b02      	ldr	r3, [pc, #8]	; (d5d50 <hal_i2c_flush+0xc>)
   d5d48:	681b      	ldr	r3, [r3, #0]
   d5d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d4c:	9301      	str	r3, [sp, #4]
   d5d4e:	bd08      	pop	{r3, pc}
   d5d50:	00030228 	.word	0x00030228

000d5d54 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5d54:	b508      	push	{r3, lr}
   d5d56:	4b02      	ldr	r3, [pc, #8]	; (d5d60 <hal_i2c_is_enabled+0xc>)
   d5d58:	681b      	ldr	r3, [r3, #0]
   d5d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5d5c:	9301      	str	r3, [sp, #4]
   d5d5e:	bd08      	pop	{r3, pc}
   d5d60:	00030228 	.word	0x00030228

000d5d64 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5d64:	b508      	push	{r3, lr}
   d5d66:	4b02      	ldr	r3, [pc, #8]	; (d5d70 <hal_i2c_init+0xc>)
   d5d68:	681b      	ldr	r3, [r3, #0]
   d5d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5d6c:	9301      	str	r3, [sp, #4]
   d5d6e:	bd08      	pop	{r3, pc}
   d5d70:	00030228 	.word	0x00030228

000d5d74 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5d74:	b508      	push	{r3, lr}
   d5d76:	4b02      	ldr	r3, [pc, #8]	; (d5d80 <inet_inet_ntop+0xc>)
   d5d78:	681b      	ldr	r3, [r3, #0]
   d5d7a:	695b      	ldr	r3, [r3, #20]
   d5d7c:	9301      	str	r3, [sp, #4]
   d5d7e:	bd08      	pop	{r3, pc}
   d5d80:	00030264 	.word	0x00030264

000d5d84 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5d84:	b508      	push	{r3, lr}
   d5d86:	4b02      	ldr	r3, [pc, #8]	; (d5d90 <netdb_freeaddrinfo+0xc>)
   d5d88:	681b      	ldr	r3, [r3, #0]
   d5d8a:	689b      	ldr	r3, [r3, #8]
   d5d8c:	9301      	str	r3, [sp, #4]
   d5d8e:	bd08      	pop	{r3, pc}
   d5d90:	00030268 	.word	0x00030268

000d5d94 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5d94:	b508      	push	{r3, lr}
   d5d96:	4b02      	ldr	r3, [pc, #8]	; (d5da0 <netdb_getaddrinfo+0xc>)
   d5d98:	681b      	ldr	r3, [r3, #0]
   d5d9a:	68db      	ldr	r3, [r3, #12]
   d5d9c:	9301      	str	r3, [sp, #4]
   d5d9e:	bd08      	pop	{r3, pc}
   d5da0:	00030268 	.word	0x00030268

000d5da4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5da4:	b508      	push	{r3, lr}
   d5da6:	4b02      	ldr	r3, [pc, #8]	; (d5db0 <hal_spi_begin+0xc>)
   d5da8:	681b      	ldr	r3, [r3, #0]
   d5daa:	681b      	ldr	r3, [r3, #0]
   d5dac:	9301      	str	r3, [sp, #4]
   d5dae:	bd08      	pop	{r3, pc}
   d5db0:	00030230 	.word	0x00030230

000d5db4 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   d5db4:	b508      	push	{r3, lr}
   d5db6:	4b02      	ldr	r3, [pc, #8]	; (d5dc0 <hal_spi_end+0xc>)
   d5db8:	681b      	ldr	r3, [r3, #0]
   d5dba:	685b      	ldr	r3, [r3, #4]
   d5dbc:	9301      	str	r3, [sp, #4]
   d5dbe:	bd08      	pop	{r3, pc}
   d5dc0:	00030230 	.word	0x00030230

000d5dc4 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5dc4:	b508      	push	{r3, lr}
   d5dc6:	4b02      	ldr	r3, [pc, #8]	; (d5dd0 <hal_spi_transfer+0xc>)
   d5dc8:	681b      	ldr	r3, [r3, #0]
   d5dca:	695b      	ldr	r3, [r3, #20]
   d5dcc:	9301      	str	r3, [sp, #4]
   d5dce:	bd08      	pop	{r3, pc}
   d5dd0:	00030230 	.word	0x00030230

000d5dd4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5dd4:	b508      	push	{r3, lr}
   d5dd6:	4b02      	ldr	r3, [pc, #8]	; (d5de0 <hal_spi_init+0xc>)
   d5dd8:	681b      	ldr	r3, [r3, #0]
   d5dda:	69db      	ldr	r3, [r3, #28]
   d5ddc:	9301      	str	r3, [sp, #4]
   d5dde:	bd08      	pop	{r3, pc}
   d5de0:	00030230 	.word	0x00030230

000d5de4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5de4:	b508      	push	{r3, lr}
   d5de6:	4b02      	ldr	r3, [pc, #8]	; (d5df0 <hal_spi_is_enabled+0xc>)
   d5de8:	681b      	ldr	r3, [r3, #0]
   d5dea:	6a1b      	ldr	r3, [r3, #32]
   d5dec:	9301      	str	r3, [sp, #4]
   d5dee:	bd08      	pop	{r3, pc}
   d5df0:	00030230 	.word	0x00030230

000d5df4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5df4:	b508      	push	{r3, lr}
   d5df6:	4b02      	ldr	r3, [pc, #8]	; (d5e00 <hal_spi_info+0xc>)
   d5df8:	681b      	ldr	r3, [r3, #0]
   d5dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5dfc:	9301      	str	r3, [sp, #4]
   d5dfe:	bd08      	pop	{r3, pc}
   d5e00:	00030230 	.word	0x00030230

000d5e04 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5e04:	b508      	push	{r3, lr}
   d5e06:	4b02      	ldr	r3, [pc, #8]	; (d5e10 <hal_spi_set_settings+0xc>)
   d5e08:	681b      	ldr	r3, [r3, #0]
   d5e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5e0c:	9301      	str	r3, [sp, #4]
   d5e0e:	bd08      	pop	{r3, pc}
   d5e10:	00030230 	.word	0x00030230

000d5e14 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5e14:	b508      	push	{r3, lr}
   d5e16:	4b02      	ldr	r3, [pc, #8]	; (d5e20 <hal_spi_acquire+0xc>)
   d5e18:	681b      	ldr	r3, [r3, #0]
   d5e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5e1c:	9301      	str	r3, [sp, #4]
   d5e1e:	bd08      	pop	{r3, pc}
   d5e20:	00030230 	.word	0x00030230

000d5e24 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5e24:	b508      	push	{r3, lr}
   d5e26:	4b02      	ldr	r3, [pc, #8]	; (d5e30 <hal_spi_release+0xc>)
   d5e28:	681b      	ldr	r3, [r3, #0]
   d5e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5e2c:	9301      	str	r3, [sp, #4]
   d5e2e:	bd08      	pop	{r3, pc}
   d5e30:	00030230 	.word	0x00030230

000d5e34 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5e34:	b508      	push	{r3, lr}
   d5e36:	4b02      	ldr	r3, [pc, #8]	; (d5e40 <hal_usart_init+0xc>)
   d5e38:	681b      	ldr	r3, [r3, #0]
   d5e3a:	681b      	ldr	r3, [r3, #0]
   d5e3c:	9301      	str	r3, [sp, #4]
   d5e3e:	bd08      	pop	{r3, pc}
   d5e40:	0003023c 	.word	0x0003023c

000d5e44 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d5e44:	b508      	push	{r3, lr}
   d5e46:	4b02      	ldr	r3, [pc, #8]	; (d5e50 <hal_usart_end+0xc>)
   d5e48:	681b      	ldr	r3, [r3, #0]
   d5e4a:	689b      	ldr	r3, [r3, #8]
   d5e4c:	9301      	str	r3, [sp, #4]
   d5e4e:	bd08      	pop	{r3, pc}
   d5e50:	0003023c 	.word	0x0003023c

000d5e54 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5e54:	b508      	push	{r3, lr}
   d5e56:	4b02      	ldr	r3, [pc, #8]	; (d5e60 <hal_usart_write+0xc>)
   d5e58:	681b      	ldr	r3, [r3, #0]
   d5e5a:	68db      	ldr	r3, [r3, #12]
   d5e5c:	9301      	str	r3, [sp, #4]
   d5e5e:	bd08      	pop	{r3, pc}
   d5e60:	0003023c 	.word	0x0003023c

000d5e64 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5e64:	b508      	push	{r3, lr}
   d5e66:	4b02      	ldr	r3, [pc, #8]	; (d5e70 <hal_usart_available+0xc>)
   d5e68:	681b      	ldr	r3, [r3, #0]
   d5e6a:	691b      	ldr	r3, [r3, #16]
   d5e6c:	9301      	str	r3, [sp, #4]
   d5e6e:	bd08      	pop	{r3, pc}
   d5e70:	0003023c 	.word	0x0003023c

000d5e74 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5e74:	b508      	push	{r3, lr}
   d5e76:	4b02      	ldr	r3, [pc, #8]	; (d5e80 <hal_usart_read+0xc>)
   d5e78:	681b      	ldr	r3, [r3, #0]
   d5e7a:	695b      	ldr	r3, [r3, #20]
   d5e7c:	9301      	str	r3, [sp, #4]
   d5e7e:	bd08      	pop	{r3, pc}
   d5e80:	0003023c 	.word	0x0003023c

000d5e84 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5e84:	b508      	push	{r3, lr}
   d5e86:	4b02      	ldr	r3, [pc, #8]	; (d5e90 <hal_usart_peek+0xc>)
   d5e88:	681b      	ldr	r3, [r3, #0]
   d5e8a:	699b      	ldr	r3, [r3, #24]
   d5e8c:	9301      	str	r3, [sp, #4]
   d5e8e:	bd08      	pop	{r3, pc}
   d5e90:	0003023c 	.word	0x0003023c

000d5e94 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5e94:	b508      	push	{r3, lr}
   d5e96:	4b02      	ldr	r3, [pc, #8]	; (d5ea0 <hal_usart_flush+0xc>)
   d5e98:	681b      	ldr	r3, [r3, #0]
   d5e9a:	69db      	ldr	r3, [r3, #28]
   d5e9c:	9301      	str	r3, [sp, #4]
   d5e9e:	bd08      	pop	{r3, pc}
   d5ea0:	0003023c 	.word	0x0003023c

000d5ea4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5ea4:	b508      	push	{r3, lr}
   d5ea6:	4b02      	ldr	r3, [pc, #8]	; (d5eb0 <hal_usart_is_enabled+0xc>)
   d5ea8:	681b      	ldr	r3, [r3, #0]
   d5eaa:	6a1b      	ldr	r3, [r3, #32]
   d5eac:	9301      	str	r3, [sp, #4]
   d5eae:	bd08      	pop	{r3, pc}
   d5eb0:	0003023c 	.word	0x0003023c

000d5eb4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5eb4:	b508      	push	{r3, lr}
   d5eb6:	4b02      	ldr	r3, [pc, #8]	; (d5ec0 <hal_usart_available_data_for_write+0xc>)
   d5eb8:	681b      	ldr	r3, [r3, #0]
   d5eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5ebc:	9301      	str	r3, [sp, #4]
   d5ebe:	bd08      	pop	{r3, pc}
   d5ec0:	0003023c 	.word	0x0003023c

000d5ec4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d5ec4:	b508      	push	{r3, lr}
   d5ec6:	4b02      	ldr	r3, [pc, #8]	; (d5ed0 <hal_usart_begin_config+0xc>)
   d5ec8:	681b      	ldr	r3, [r3, #0]
   d5eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ecc:	9301      	str	r3, [sp, #4]
   d5ece:	bd08      	pop	{r3, pc}
   d5ed0:	0003023c 	.word	0x0003023c

000d5ed4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5ed4:	b508      	push	{r3, lr}
   d5ed6:	4b02      	ldr	r3, [pc, #8]	; (d5ee0 <HAL_USB_USART_Init+0xc>)
   d5ed8:	681b      	ldr	r3, [r3, #0]
   d5eda:	681b      	ldr	r3, [r3, #0]
   d5edc:	9301      	str	r3, [sp, #4]
   d5ede:	bd08      	pop	{r3, pc}
   d5ee0:	0003024c 	.word	0x0003024c

000d5ee4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5ee4:	b508      	push	{r3, lr}
   d5ee6:	4b02      	ldr	r3, [pc, #8]	; (d5ef0 <HAL_USB_USART_Begin+0xc>)
   d5ee8:	681b      	ldr	r3, [r3, #0]
   d5eea:	685b      	ldr	r3, [r3, #4]
   d5eec:	9301      	str	r3, [sp, #4]
   d5eee:	bd08      	pop	{r3, pc}
   d5ef0:	0003024c 	.word	0x0003024c

000d5ef4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d5ef4:	b508      	push	{r3, lr}
   d5ef6:	4b02      	ldr	r3, [pc, #8]	; (d5f00 <HAL_USB_USART_End+0xc>)
   d5ef8:	681b      	ldr	r3, [r3, #0]
   d5efa:	689b      	ldr	r3, [r3, #8]
   d5efc:	9301      	str	r3, [sp, #4]
   d5efe:	bd08      	pop	{r3, pc}
   d5f00:	0003024c 	.word	0x0003024c

000d5f04 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5f04:	b508      	push	{r3, lr}
   d5f06:	4b02      	ldr	r3, [pc, #8]	; (d5f10 <HAL_USB_USART_Available_Data+0xc>)
   d5f08:	681b      	ldr	r3, [r3, #0]
   d5f0a:	691b      	ldr	r3, [r3, #16]
   d5f0c:	9301      	str	r3, [sp, #4]
   d5f0e:	bd08      	pop	{r3, pc}
   d5f10:	0003024c 	.word	0x0003024c

000d5f14 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5f14:	b508      	push	{r3, lr}
   d5f16:	4b02      	ldr	r3, [pc, #8]	; (d5f20 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5f18:	681b      	ldr	r3, [r3, #0]
   d5f1a:	695b      	ldr	r3, [r3, #20]
   d5f1c:	9301      	str	r3, [sp, #4]
   d5f1e:	bd08      	pop	{r3, pc}
   d5f20:	0003024c 	.word	0x0003024c

000d5f24 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5f24:	b508      	push	{r3, lr}
   d5f26:	4b02      	ldr	r3, [pc, #8]	; (d5f30 <HAL_USB_USART_Receive_Data+0xc>)
   d5f28:	681b      	ldr	r3, [r3, #0]
   d5f2a:	699b      	ldr	r3, [r3, #24]
   d5f2c:	9301      	str	r3, [sp, #4]
   d5f2e:	bd08      	pop	{r3, pc}
   d5f30:	0003024c 	.word	0x0003024c

000d5f34 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5f34:	b508      	push	{r3, lr}
   d5f36:	4b02      	ldr	r3, [pc, #8]	; (d5f40 <HAL_USB_USART_Send_Data+0xc>)
   d5f38:	681b      	ldr	r3, [r3, #0]
   d5f3a:	69db      	ldr	r3, [r3, #28]
   d5f3c:	9301      	str	r3, [sp, #4]
   d5f3e:	bd08      	pop	{r3, pc}
   d5f40:	0003024c 	.word	0x0003024c

000d5f44 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5f44:	b508      	push	{r3, lr}
   d5f46:	4b02      	ldr	r3, [pc, #8]	; (d5f50 <HAL_USB_USART_Flush_Data+0xc>)
   d5f48:	681b      	ldr	r3, [r3, #0]
   d5f4a:	6a1b      	ldr	r3, [r3, #32]
   d5f4c:	9301      	str	r3, [sp, #4]
   d5f4e:	bd08      	pop	{r3, pc}
   d5f50:	0003024c 	.word	0x0003024c

000d5f54 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5f54:	b508      	push	{r3, lr}
   d5f56:	4b02      	ldr	r3, [pc, #8]	; (d5f60 <panic_+0xc>)
   d5f58:	681b      	ldr	r3, [r3, #0]
   d5f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5f5c:	9301      	str	r3, [sp, #4]
   d5f5e:	bd08      	pop	{r3, pc}
   d5f60:	00030260 	.word	0x00030260

000d5f64 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d5f64:	b508      	push	{r3, lr}
   d5f66:	4b02      	ldr	r3, [pc, #8]	; (d5f70 <log_message_v+0xc>)
   d5f68:	681b      	ldr	r3, [r3, #0]
   d5f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5f6c:	9301      	str	r3, [sp, #4]
   d5f6e:	bd08      	pop	{r3, pc}
   d5f70:	00030260 	.word	0x00030260

000d5f74 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d5f74:	b508      	push	{r3, lr}
   d5f76:	4b02      	ldr	r3, [pc, #8]	; (d5f80 <log_level_name+0xc>)
   d5f78:	681b      	ldr	r3, [r3, #0]
   d5f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5f7c:	9301      	str	r3, [sp, #4]
   d5f7e:	bd08      	pop	{r3, pc}
   d5f80:	00030260 	.word	0x00030260

000d5f84 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d5f84:	b508      	push	{r3, lr}
   d5f86:	4b02      	ldr	r3, [pc, #8]	; (d5f90 <log_set_callbacks+0xc>)
   d5f88:	681b      	ldr	r3, [r3, #0]
   d5f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d5f8c:	9301      	str	r3, [sp, #4]
   d5f8e:	bd08      	pop	{r3, pc}
   d5f90:	00030260 	.word	0x00030260

000d5f94 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d5f94:	b508      	push	{r3, lr}
   d5f96:	4b03      	ldr	r3, [pc, #12]	; (d5fa4 <diag_get_source+0x10>)
   d5f98:	681b      	ldr	r3, [r3, #0]
   d5f9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5f9e:	9301      	str	r3, [sp, #4]
   d5fa0:	bd08      	pop	{r3, pc}
   d5fa2:	0000      	.short	0x0000
   d5fa4:	00030260 	.word	0x00030260

000d5fa8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5fa8:	b508      	push	{r3, lr}
   d5faa:	4b02      	ldr	r3, [pc, #8]	; (d5fb4 <system_mode+0xc>)
   d5fac:	681b      	ldr	r3, [r3, #0]
   d5fae:	681b      	ldr	r3, [r3, #0]
   d5fb0:	9301      	str	r3, [sp, #4]
   d5fb2:	bd08      	pop	{r3, pc}
   d5fb4:	00030220 	.word	0x00030220

000d5fb8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5fb8:	b508      	push	{r3, lr}
   d5fba:	4b02      	ldr	r3, [pc, #8]	; (d5fc4 <set_system_mode+0xc>)
   d5fbc:	681b      	ldr	r3, [r3, #0]
   d5fbe:	685b      	ldr	r3, [r3, #4]
   d5fc0:	9301      	str	r3, [sp, #4]
   d5fc2:	bd08      	pop	{r3, pc}
   d5fc4:	00030220 	.word	0x00030220

000d5fc8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5fc8:	b508      	push	{r3, lr}
   d5fca:	4b02      	ldr	r3, [pc, #8]	; (d5fd4 <system_delay_ms+0xc>)
   d5fcc:	681b      	ldr	r3, [r3, #0]
   d5fce:	695b      	ldr	r3, [r3, #20]
   d5fd0:	9301      	str	r3, [sp, #4]
   d5fd2:	bd08      	pop	{r3, pc}
   d5fd4:	00030220 	.word	0x00030220

000d5fd8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5fd8:	b508      	push	{r3, lr}
   d5fda:	4b02      	ldr	r3, [pc, #8]	; (d5fe4 <system_thread_set_state+0xc>)
   d5fdc:	681b      	ldr	r3, [r3, #0]
   d5fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5fe0:	9301      	str	r3, [sp, #4]
   d5fe2:	bd08      	pop	{r3, pc}
   d5fe4:	00030220 	.word	0x00030220

000d5fe8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5fe8:	b508      	push	{r3, lr}
   d5fea:	4b02      	ldr	r3, [pc, #8]	; (d5ff4 <application_thread_current+0xc>)
   d5fec:	681b      	ldr	r3, [r3, #0]
   d5fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5ff0:	9301      	str	r3, [sp, #4]
   d5ff2:	bd08      	pop	{r3, pc}
   d5ff4:	00030220 	.word	0x00030220

000d5ff8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5ff8:	b508      	push	{r3, lr}
   d5ffa:	4b02      	ldr	r3, [pc, #8]	; (d6004 <application_thread_invoke+0xc>)
   d5ffc:	681b      	ldr	r3, [r3, #0]
   d5ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6000:	9301      	str	r3, [sp, #4]
   d6002:	bd08      	pop	{r3, pc}
   d6004:	00030220 	.word	0x00030220

000d6008 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6008:	b508      	push	{r3, lr}
   d600a:	4b02      	ldr	r3, [pc, #8]	; (d6014 <system_thread_get_state+0xc>)
   d600c:	681b      	ldr	r3, [r3, #0]
   d600e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6010:	9301      	str	r3, [sp, #4]
   d6012:	bd08      	pop	{r3, pc}
   d6014:	00030220 	.word	0x00030220

000d6018 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6018:	b508      	push	{r3, lr}
   d601a:	4b03      	ldr	r3, [pc, #12]	; (d6028 <system_ctrl_set_app_request_handler+0x10>)
   d601c:	681b      	ldr	r3, [r3, #0]
   d601e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6022:	9301      	str	r3, [sp, #4]
   d6024:	bd08      	pop	{r3, pc}
   d6026:	0000      	.short	0x0000
   d6028:	00030220 	.word	0x00030220

000d602c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d602c:	b508      	push	{r3, lr}
   d602e:	4b03      	ldr	r3, [pc, #12]	; (d603c <system_ctrl_set_result+0x10>)
   d6030:	681b      	ldr	r3, [r3, #0]
   d6032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6036:	9301      	str	r3, [sp, #4]
   d6038:	bd08      	pop	{r3, pc}
   d603a:	0000      	.short	0x0000
   d603c:	00030220 	.word	0x00030220

000d6040 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6040:	b508      	push	{r3, lr}
   d6042:	4b02      	ldr	r3, [pc, #8]	; (d604c <spark_process+0xc>)
   d6044:	681b      	ldr	r3, [r3, #0]
   d6046:	689b      	ldr	r3, [r3, #8]
   d6048:	9301      	str	r3, [sp, #4]
   d604a:	bd08      	pop	{r3, pc}
   d604c:	00030244 	.word	0x00030244

000d6050 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6050:	b508      	push	{r3, lr}
   d6052:	4b02      	ldr	r3, [pc, #8]	; (d605c <spark_cloud_flag_connected+0xc>)
   d6054:	681b      	ldr	r3, [r3, #0]
   d6056:	695b      	ldr	r3, [r3, #20]
   d6058:	9301      	str	r3, [sp, #4]
   d605a:	bd08      	pop	{r3, pc}
   d605c:	00030244 	.word	0x00030244

000d6060 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6060:	b508      	push	{r3, lr}
   d6062:	4b02      	ldr	r3, [pc, #8]	; (d606c <spark_send_event+0xc>)
   d6064:	681b      	ldr	r3, [r3, #0]
   d6066:	6a1b      	ldr	r3, [r3, #32]
   d6068:	9301      	str	r3, [sp, #4]
   d606a:	bd08      	pop	{r3, pc}
   d606c:	00030244 	.word	0x00030244

000d6070 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6070:	b508      	push	{r3, lr}
   d6072:	4b02      	ldr	r3, [pc, #8]	; (d607c <spark_sync_time_pending+0xc>)
   d6074:	681b      	ldr	r3, [r3, #0]
   d6076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6078:	9301      	str	r3, [sp, #4]
   d607a:	bd08      	pop	{r3, pc}
   d607c:	00030244 	.word	0x00030244

000d6080 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6080:	b508      	push	{r3, lr}
   d6082:	4b02      	ldr	r3, [pc, #8]	; (d608c <spark_set_random_seed_from_cloud_handler+0xc>)
   d6084:	681b      	ldr	r3, [r3, #0]
   d6086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6088:	9301      	str	r3, [sp, #4]
   d608a:	bd08      	pop	{r3, pc}
   d608c:	00030244 	.word	0x00030244

000d6090 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6090:	b508      	push	{r3, lr}
   d6092:	4b02      	ldr	r3, [pc, #8]	; (d609c <network_connect+0xc>)
   d6094:	681b      	ldr	r3, [r3, #0]
   d6096:	685b      	ldr	r3, [r3, #4]
   d6098:	9301      	str	r3, [sp, #4]
   d609a:	bd08      	pop	{r3, pc}
   d609c:	00030240 	.word	0x00030240

000d60a0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d60a0:	b508      	push	{r3, lr}
   d60a2:	4b02      	ldr	r3, [pc, #8]	; (d60ac <network_connecting+0xc>)
   d60a4:	681b      	ldr	r3, [r3, #0]
   d60a6:	689b      	ldr	r3, [r3, #8]
   d60a8:	9301      	str	r3, [sp, #4]
   d60aa:	bd08      	pop	{r3, pc}
   d60ac:	00030240 	.word	0x00030240

000d60b0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d60b0:	b508      	push	{r3, lr}
   d60b2:	4b02      	ldr	r3, [pc, #8]	; (d60bc <network_disconnect+0xc>)
   d60b4:	681b      	ldr	r3, [r3, #0]
   d60b6:	68db      	ldr	r3, [r3, #12]
   d60b8:	9301      	str	r3, [sp, #4]
   d60ba:	bd08      	pop	{r3, pc}
   d60bc:	00030240 	.word	0x00030240

000d60c0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d60c0:	b508      	push	{r3, lr}
   d60c2:	4b02      	ldr	r3, [pc, #8]	; (d60cc <network_ready+0xc>)
   d60c4:	681b      	ldr	r3, [r3, #0]
   d60c6:	691b      	ldr	r3, [r3, #16]
   d60c8:	9301      	str	r3, [sp, #4]
   d60ca:	bd08      	pop	{r3, pc}
   d60cc:	00030240 	.word	0x00030240

000d60d0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d60d0:	b508      	push	{r3, lr}
   d60d2:	4b02      	ldr	r3, [pc, #8]	; (d60dc <network_on+0xc>)
   d60d4:	681b      	ldr	r3, [r3, #0]
   d60d6:	695b      	ldr	r3, [r3, #20]
   d60d8:	9301      	str	r3, [sp, #4]
   d60da:	bd08      	pop	{r3, pc}
   d60dc:	00030240 	.word	0x00030240

000d60e0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d60e0:	b508      	push	{r3, lr}
   d60e2:	4b02      	ldr	r3, [pc, #8]	; (d60ec <network_off+0xc>)
   d60e4:	681b      	ldr	r3, [r3, #0]
   d60e6:	699b      	ldr	r3, [r3, #24]
   d60e8:	9301      	str	r3, [sp, #4]
   d60ea:	bd08      	pop	{r3, pc}
   d60ec:	00030240 	.word	0x00030240

000d60f0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d60f0:	b508      	push	{r3, lr}
   d60f2:	4b02      	ldr	r3, [pc, #8]	; (d60fc <network_listen+0xc>)
   d60f4:	681b      	ldr	r3, [r3, #0]
   d60f6:	69db      	ldr	r3, [r3, #28]
   d60f8:	9301      	str	r3, [sp, #4]
   d60fa:	bd08      	pop	{r3, pc}
   d60fc:	00030240 	.word	0x00030240

000d6100 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6100:	b508      	push	{r3, lr}
   d6102:	4b02      	ldr	r3, [pc, #8]	; (d610c <network_listening+0xc>)
   d6104:	681b      	ldr	r3, [r3, #0]
   d6106:	6a1b      	ldr	r3, [r3, #32]
   d6108:	9301      	str	r3, [sp, #4]
   d610a:	bd08      	pop	{r3, pc}
   d610c:	00030240 	.word	0x00030240

000d6110 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6110:	b508      	push	{r3, lr}
   d6112:	4b02      	ldr	r3, [pc, #8]	; (d611c <network_set_listen_timeout+0xc>)
   d6114:	681b      	ldr	r3, [r3, #0]
   d6116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6118:	9301      	str	r3, [sp, #4]
   d611a:	bd08      	pop	{r3, pc}
   d611c:	00030240 	.word	0x00030240

000d6120 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6120:	b508      	push	{r3, lr}
   d6122:	4b02      	ldr	r3, [pc, #8]	; (d612c <network_get_listen_timeout+0xc>)
   d6124:	681b      	ldr	r3, [r3, #0]
   d6126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6128:	9301      	str	r3, [sp, #4]
   d612a:	bd08      	pop	{r3, pc}
   d612c:	00030240 	.word	0x00030240

000d6130 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d6130:	b508      	push	{r3, lr}
   d6132:	4b02      	ldr	r3, [pc, #8]	; (d613c <network_is_on+0xc>)
   d6134:	681b      	ldr	r3, [r3, #0]
   d6136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6138:	9301      	str	r3, [sp, #4]
   d613a:	bd08      	pop	{r3, pc}
   d613c:	00030240 	.word	0x00030240

000d6140 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d6140:	b508      	push	{r3, lr}
   d6142:	4b02      	ldr	r3, [pc, #8]	; (d614c <network_is_off+0xc>)
   d6144:	681b      	ldr	r3, [r3, #0]
   d6146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6148:	9301      	str	r3, [sp, #4]
   d614a:	bd08      	pop	{r3, pc}
   d614c:	00030240 	.word	0x00030240

000d6150 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6150:	b508      	push	{r3, lr}
   d6152:	4b02      	ldr	r3, [pc, #8]	; (d615c <malloc+0xc>)
   d6154:	681b      	ldr	r3, [r3, #0]
   d6156:	681b      	ldr	r3, [r3, #0]
   d6158:	9301      	str	r3, [sp, #4]
   d615a:	bd08      	pop	{r3, pc}
   d615c:	0003021c 	.word	0x0003021c

000d6160 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6160:	b508      	push	{r3, lr}
   d6162:	4b02      	ldr	r3, [pc, #8]	; (d616c <free+0xc>)
   d6164:	681b      	ldr	r3, [r3, #0]
   d6166:	685b      	ldr	r3, [r3, #4]
   d6168:	9301      	str	r3, [sp, #4]
   d616a:	bd08      	pop	{r3, pc}
   d616c:	0003021c 	.word	0x0003021c

000d6170 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6170:	b508      	push	{r3, lr}
   d6172:	4b02      	ldr	r3, [pc, #8]	; (d617c <realloc+0xc>)
   d6174:	681b      	ldr	r3, [r3, #0]
   d6176:	689b      	ldr	r3, [r3, #8]
   d6178:	9301      	str	r3, [sp, #4]
   d617a:	bd08      	pop	{r3, pc}
   d617c:	0003021c 	.word	0x0003021c

000d6180 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6180:	b508      	push	{r3, lr}
   d6182:	4b02      	ldr	r3, [pc, #8]	; (d618c <snprintf+0xc>)
   d6184:	681b      	ldr	r3, [r3, #0]
   d6186:	69db      	ldr	r3, [r3, #28]
   d6188:	9301      	str	r3, [sp, #4]
   d618a:	bd08      	pop	{r3, pc}
   d618c:	0003021c 	.word	0x0003021c

000d6190 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6190:	b508      	push	{r3, lr}
   d6192:	4b02      	ldr	r3, [pc, #8]	; (d619c <vsnprintf+0xc>)
   d6194:	681b      	ldr	r3, [r3, #0]
   d6196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6198:	9301      	str	r3, [sp, #4]
   d619a:	bd08      	pop	{r3, pc}
   d619c:	0003021c 	.word	0x0003021c

000d61a0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d61a0:	b508      	push	{r3, lr}
   d61a2:	4b02      	ldr	r3, [pc, #8]	; (d61ac <abort+0xc>)
   d61a4:	681b      	ldr	r3, [r3, #0]
   d61a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d61a8:	9301      	str	r3, [sp, #4]
   d61aa:	bd08      	pop	{r3, pc}
   d61ac:	0003021c 	.word	0x0003021c

000d61b0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d61b0:	b508      	push	{r3, lr}
   d61b2:	4b02      	ldr	r3, [pc, #8]	; (d61bc <_malloc_r+0xc>)
   d61b4:	681b      	ldr	r3, [r3, #0]
   d61b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61b8:	9301      	str	r3, [sp, #4]
   d61ba:	bd08      	pop	{r3, pc}
   d61bc:	0003021c 	.word	0x0003021c

000d61c0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d61c0:	b508      	push	{r3, lr}
   d61c2:	4b02      	ldr	r3, [pc, #8]	; (d61cc <newlib_impure_ptr_callback+0xc>)
   d61c4:	681b      	ldr	r3, [r3, #0]
   d61c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d61c8:	9301      	str	r3, [sp, #4]
   d61ca:	bd08      	pop	{r3, pc}
   d61cc:	0003021c 	.word	0x0003021c

000d61d0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d61d0:	2100      	movs	r1, #0
   d61d2:	f7ff bef9 	b.w	d5fc8 <system_delay_ms>

000d61d6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d61d6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d61d8:	6883      	ldr	r3, [r0, #8]
   d61da:	4604      	mov	r4, r0
   d61dc:	b90b      	cbnz	r3, d61e2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d61de:	f002 fb25 	bl	d882c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d61e2:	68c3      	ldr	r3, [r0, #12]
   d61e4:	4798      	blx	r3
      if (_M_manager)
   d61e6:	68a3      	ldr	r3, [r4, #8]
   d61e8:	b11b      	cbz	r3, d61f2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d61ea:	2203      	movs	r2, #3
   d61ec:	4621      	mov	r1, r4
   d61ee:	4620      	mov	r0, r4
   d61f0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d61f2:	4620      	mov	r0, r4
   d61f4:	2110      	movs	r1, #16
}
   d61f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d61fa:	f002 bb11 	b.w	d8820 <_ZdlPvj>

000d61fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d61fe:	680b      	ldr	r3, [r1, #0]
   d6200:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d6202:	b113      	cbz	r3, d620a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6204:	685a      	ldr	r2, [r3, #4]
   d6206:	3201      	adds	r2, #1
   d6208:	605a      	str	r2, [r3, #4]
      }
   d620a:	4770      	bx	lr

000d620c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d620c:	4802      	ldr	r0, [pc, #8]	; (d6218 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d620e:	2300      	movs	r3, #0
   d6210:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6212:	f7ff bcf7 	b.w	d5c04 <os_mutex_recursive_create>
   d6216:	bf00      	nop
   d6218:	2003e55c 	.word	0x2003e55c

000d621c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d621c:	2200      	movs	r2, #0
   d621e:	6840      	ldr	r0, [r0, #4]
   d6220:	4611      	mov	r1, r2
   d6222:	f7ff bf4d 	b.w	d60c0 <network_ready>

000d6226 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d6226:	2200      	movs	r2, #0
   d6228:	6840      	ldr	r0, [r0, #4]
   d622a:	4611      	mov	r1, r2
   d622c:	f7ff bf68 	b.w	d6100 <network_listening>

000d6230 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6230:	2200      	movs	r2, #0
   d6232:	6840      	ldr	r0, [r0, #4]
   d6234:	4611      	mov	r1, r2
   d6236:	f7ff bf73 	b.w	d6120 <network_get_listen_timeout>

000d623a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d623a:	6840      	ldr	r0, [r0, #4]
   d623c:	2200      	movs	r2, #0
   d623e:	f7ff bf67 	b.w	d6110 <network_set_listen_timeout>

000d6242 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6242:	6840      	ldr	r0, [r0, #4]
   d6244:	2200      	movs	r2, #0
   d6246:	f081 0101 	eor.w	r1, r1, #1
   d624a:	f7ff bf51 	b.w	d60f0 <network_listen>

000d624e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d624e:	2300      	movs	r3, #0
   d6250:	6840      	ldr	r0, [r0, #4]
   d6252:	461a      	mov	r2, r3
   d6254:	4619      	mov	r1, r3
   d6256:	f7ff bf43 	b.w	d60e0 <network_off>

000d625a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d625a:	2300      	movs	r3, #0
   d625c:	6840      	ldr	r0, [r0, #4]
   d625e:	461a      	mov	r2, r3
   d6260:	4619      	mov	r1, r3
   d6262:	f7ff bf35 	b.w	d60d0 <network_on>

000d6266 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6266:	2200      	movs	r2, #0
   d6268:	6840      	ldr	r0, [r0, #4]
   d626a:	4611      	mov	r1, r2
   d626c:	f7ff bf18 	b.w	d60a0 <network_connecting>

000d6270 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6270:	6840      	ldr	r0, [r0, #4]
   d6272:	2200      	movs	r2, #0
   d6274:	2102      	movs	r1, #2
   d6276:	f7ff bf1b 	b.w	d60b0 <network_disconnect>

000d627a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d627a:	2300      	movs	r3, #0
   d627c:	6840      	ldr	r0, [r0, #4]
   d627e:	461a      	mov	r2, r3
   d6280:	f7ff bf06 	b.w	d6090 <network_connect>

000d6284 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6284:	4b08      	ldr	r3, [pc, #32]	; (d62a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6286:	b510      	push	{r4, lr}
   d6288:	2428      	movs	r4, #40	; 0x28
   d628a:	4622      	mov	r2, r4
   d628c:	4618      	mov	r0, r3
   d628e:	2100      	movs	r1, #0
   d6290:	f002 feec 	bl	d906c <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6294:	4b05      	ldr	r3, [pc, #20]	; (d62ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d6296:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d6298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d629c:	6042      	str	r2, [r0, #4]
   d629e:	2204      	movs	r2, #4
   d62a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d62a2:	4a03      	ldr	r2, [pc, #12]	; (d62b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d62a4:	601a      	str	r2, [r3, #0]
   d62a6:	bd10      	pop	{r4, pc}
   d62a8:	2003e568 	.word	0x2003e568
   d62ac:	2003e560 	.word	0x2003e560
   d62b0:	000d980c 	.word	0x000d980c

000d62b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d62b4:	4770      	bx	lr

000d62b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d62b6:	2000      	movs	r0, #0
   d62b8:	4770      	bx	lr

000d62ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d62ba:	b510      	push	{r4, lr}
   d62bc:	2110      	movs	r1, #16
   d62be:	4604      	mov	r4, r0
   d62c0:	f002 faae 	bl	d8820 <_ZdlPvj>
   d62c4:	4620      	mov	r0, r4
   d62c6:	bd10      	pop	{r4, pc}

000d62c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d62c8:	b508      	push	{r3, lr}
      { delete this; }
   d62ca:	f7ff fff6 	bl	d62ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d62ce:	bd08      	pop	{r3, pc}

000d62d0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d62d0:	b510      	push	{r4, lr}
      if (_M_manager)
   d62d2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d62d4:	4604      	mov	r4, r0
      if (_M_manager)
   d62d6:	b113      	cbz	r3, d62de <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d62d8:	2203      	movs	r2, #3
   d62da:	4601      	mov	r1, r0
   d62dc:	4798      	blx	r3
    }
   d62de:	4620      	mov	r0, r4
   d62e0:	bd10      	pop	{r4, pc}

000d62e2 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d62e2:	b530      	push	{r4, r5, lr}
        type_(type) {
   d62e4:	2200      	movs	r2, #0
   d62e6:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d62ea:	6002      	str	r2, [r0, #0]
   d62ec:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d62ee:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d62f0:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d62f2:	680c      	ldr	r4, [r1, #0]
   d62f4:	8085      	strh	r5, [r0, #4]
   d62f6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d62f8:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d62fa:	bd30      	pop	{r4, r5, pc}

000d62fc <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d62fc:	b510      	push	{r4, lr}
   d62fe:	4604      	mov	r4, r0
    free((void*)msg_);
   d6300:	6800      	ldr	r0, [r0, #0]
   d6302:	f7ff ff2d 	bl	d6160 <free>
}
   d6306:	4620      	mov	r0, r4
   d6308:	bd10      	pop	{r4, pc}

000d630a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d630a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d630c:	68c4      	ldr	r4, [r0, #12]
   d630e:	b1f4      	cbz	r4, d634e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6310:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6312:	2b02      	cmp	r3, #2
   d6314:	d103      	bne.n	d631e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6316:	f104 000c 	add.w	r0, r4, #12
   d631a:	f7ff ffef 	bl	d62fc <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d631e:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6320:	b135      	cbz	r5, d6330 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6322:	4628      	mov	r0, r5
   d6324:	f7ff ffd4 	bl	d62d0 <_ZNSt14_Function_baseD1Ev>
   d6328:	2110      	movs	r1, #16
   d632a:	4628      	mov	r0, r5
   d632c:	f002 fa78 	bl	d8820 <_ZdlPvj>
   d6330:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6332:	b135      	cbz	r5, d6342 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6334:	4628      	mov	r0, r5
   d6336:	f7ff ffcb 	bl	d62d0 <_ZNSt14_Function_baseD1Ev>
   d633a:	2110      	movs	r1, #16
   d633c:	4628      	mov	r0, r5
   d633e:	f002 fa6f 	bl	d8820 <_ZdlPvj>
   d6342:	4620      	mov	r0, r4
   d6344:	2114      	movs	r1, #20
   d6346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d634a:	f002 ba69 	b.w	d8820 <_ZdlPvj>
   d634e:	bd38      	pop	{r3, r4, r5, pc}

000d6350 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6350:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6352:	460e      	mov	r6, r1
   d6354:	4604      	mov	r4, r0
   d6356:	f856 3b04 	ldr.w	r3, [r6], #4
   d635a:	9300      	str	r3, [sp, #0]
   d635c:	460d      	mov	r5, r1
   d635e:	a801      	add	r0, sp, #4
   d6360:	4631      	mov	r1, r6
   d6362:	f7ff ff4c 	bl	d61fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6366:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6368:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d636a:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d636c:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d636e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6370:	2300      	movs	r3, #0
   d6372:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6374:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d6376:	f7fd ffcb 	bl	d4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d637a:	4630      	mov	r0, r6
   d637c:	f7fd ffc8 	bl	d4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d6380:	4628      	mov	r0, r5
   d6382:	2108      	movs	r1, #8
   d6384:	f002 fa4c 	bl	d8820 <_ZdlPvj>
        return p;
    }
   d6388:	4620      	mov	r0, r4
   d638a:	b002      	add	sp, #8
   d638c:	bd70      	pop	{r4, r5, r6, pc}

000d638e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d638e:	b513      	push	{r0, r1, r4, lr}
   d6390:	460b      	mov	r3, r1
   d6392:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6394:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6398:	466c      	mov	r4, sp
   d639a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d639e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d63a2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d63a6:	e894 0003 	ldmia.w	r4, {r0, r1}
   d63aa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d63ae:	b002      	add	sp, #8
   d63b0:	bd10      	pop	{r4, pc}

000d63b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d63b2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d63b4:	b510      	push	{r4, lr}
      if (_M_empty())
   d63b6:	b90a      	cbnz	r2, d63bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d63b8:	f002 fa38 	bl	d882c <_ZSt25__throw_bad_function_callv>
    }
   d63bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d63c0:	68c3      	ldr	r3, [r0, #12]
   d63c2:	4718      	bx	r3

000d63c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d63c4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d63c6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d63c8:	f100 0110 	add.w	r1, r0, #16
   d63cc:	f7ff fff1 	bl	d63b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d63d0:	bd08      	pop	{r3, pc}

000d63d2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d63d2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d63d4:	b510      	push	{r4, lr}
      if (_M_empty())
   d63d6:	b90a      	cbnz	r2, d63dc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d63d8:	f002 fa28 	bl	d882c <_ZSt25__throw_bad_function_callv>
    }
   d63dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d63e0:	68c3      	ldr	r3, [r0, #12]
   d63e2:	4718      	bx	r3

000d63e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d63e4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d63e6:	6800      	ldr	r0, [r0, #0]
   d63e8:	f100 0110 	add.w	r1, r0, #16
   d63ec:	f7ff fff1 	bl	d63d2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d63f0:	bd08      	pop	{r3, pc}
	...

000d63f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d63f4:	b538      	push	{r3, r4, r5, lr}
   d63f6:	2300      	movs	r3, #0
   d63f8:	4604      	mov	r4, r0
   d63fa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d63fc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d63fe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6400:	f7fd fe49 	bl	d4096 <_Znwj>
   d6404:	b128      	cbz	r0, d6412 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6406:	2301      	movs	r3, #1
   d6408:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d640c:	4b02      	ldr	r3, [pc, #8]	; (d6418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d640e:	6003      	str	r3, [r0, #0]
   d6410:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6412:	6020      	str	r0, [r4, #0]
	}
   d6414:	4620      	mov	r0, r4
   d6416:	bd38      	pop	{r3, r4, r5, pc}
   d6418:	000d9848 	.word	0x000d9848

000d641c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d641c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d641e:	2300      	movs	r3, #0
   d6420:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6422:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6424:	4604      	mov	r4, r0
   d6426:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6428:	b12b      	cbz	r3, d6436 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d642a:	2202      	movs	r2, #2
   d642c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d642e:	68eb      	ldr	r3, [r5, #12]
   d6430:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6432:	68ab      	ldr	r3, [r5, #8]
   d6434:	60a3      	str	r3, [r4, #8]
    }
   d6436:	4620      	mov	r0, r4
   d6438:	bd38      	pop	{r3, r4, r5, pc}
	...

000d643c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d643c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d643e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6440:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6442:	4668      	mov	r0, sp
   d6444:	f7ff ff4d 	bl	d62e2 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6448:	f04f 0302 	mov.w	r3, #2
   d644c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6450:	2a00      	cmp	r2, #0
   d6452:	d103      	bne.n	d645c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6454:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6458:	2900      	cmp	r1, #0
   d645a:	d1f7      	bne.n	d644c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d645c:	d125      	bne.n	d64aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d645e:	f104 050c 	add.w	r5, r4, #12
   d6462:	4669      	mov	r1, sp
   d6464:	4628      	mov	r0, r5
   d6466:	f7ff ff3c 	bl	d62e2 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d646a:	f3bf 8f5b 	dmb	ish
   d646e:	2301      	movs	r3, #1
   d6470:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6472:	2000      	movs	r0, #0
   d6474:	f104 0308 	add.w	r3, r4, #8
   d6478:	f3bf 8f5b 	dmb	ish
   d647c:	e853 6f00 	ldrex	r6, [r3]
   d6480:	e843 0200 	strex	r2, r0, [r3]
   d6484:	2a00      	cmp	r2, #0
   d6486:	d1f9      	bne.n	d647c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6488:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d648c:	b16e      	cbz	r6, d64aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d648e:	f7ff fdab 	bl	d5fe8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6492:	b178      	cbz	r0, d64b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6494:	4629      	mov	r1, r5
   d6496:	4630      	mov	r0, r6
   d6498:	f7ff ff8b 	bl	d63b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d649c:	4630      	mov	r0, r6
   d649e:	f7ff ff17 	bl	d62d0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d64a2:	2110      	movs	r1, #16
   d64a4:	4630      	mov	r0, r6
   d64a6:	f002 f9bb 	bl	d8820 <_ZdlPvj>
        p_->setError(std::move(error));
   d64aa:	4668      	mov	r0, sp
   d64ac:	f7ff ff26 	bl	d62fc <_ZN8particle5ErrorD1Ev>
    }
   d64b0:	b009      	add	sp, #36	; 0x24
   d64b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d64b4:	4631      	mov	r1, r6
   d64b6:	a802      	add	r0, sp, #8
   d64b8:	f7ff ffb0 	bl	d641c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d64bc:	68e0      	ldr	r0, [r4, #12]
   d64be:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d64c2:	b108      	cbz	r0, d64c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d64c4:	f002 fe5c 	bl	d9180 <strdup>
        type_(type) {
   d64c8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d64ca:	2010      	movs	r0, #16
   d64cc:	f8ad 501c 	strh.w	r5, [sp, #28]
   d64d0:	f7fd fde1 	bl	d4096 <_Znwj>
   d64d4:	4605      	mov	r5, r0
   d64d6:	b1e8      	cbz	r0, d6514 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d64d8:	2700      	movs	r7, #0
   d64da:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d64dc:	2018      	movs	r0, #24
   d64de:	f7fd fdda 	bl	d4096 <_Znwj>
   d64e2:	4604      	mov	r4, r0
   d64e4:	b188      	cbz	r0, d650a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d64e6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d64e8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d64ea:	a802      	add	r0, sp, #8
   d64ec:	f7ff ff4f 	bl	d638e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64f0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d64f2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d64f4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64f6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d64f8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d64fa:	a906      	add	r1, sp, #24
   d64fc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d64fe:	60e3      	str	r3, [r4, #12]
   d6500:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6504:	9205      	str	r2, [sp, #20]
   d6506:	f7ff feec 	bl	d62e2 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d650a:	4b08      	ldr	r3, [pc, #32]	; (d652c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d650c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d650e:	4b08      	ldr	r3, [pc, #32]	; (d6530 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6510:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6512:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6514:	a806      	add	r0, sp, #24
   d6516:	f7ff fef1 	bl	d62fc <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d651a:	a802      	add	r0, sp, #8
   d651c:	f7ff fed8 	bl	d62d0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6520:	2200      	movs	r2, #0
   d6522:	4629      	mov	r1, r5
   d6524:	4803      	ldr	r0, [pc, #12]	; (d6534 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6526:	f7ff fd67 	bl	d5ff8 <application_thread_invoke>
   d652a:	e7b7      	b.n	d649c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d652c:	000d63c5 	.word	0x000d63c5
   d6530:	000d665d 	.word	0x000d665d
   d6534:	000d61d7 	.word	0x000d61d7

000d6538 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d653c:	b08a      	sub	sp, #40	; 0x28
   d653e:	4605      	mov	r5, r0
   d6540:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6544:	460c      	mov	r4, r1
   d6546:	4617      	mov	r7, r2
   d6548:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d654a:	f7ff fd81 	bl	d6050 <spark_cloud_flag_connected>
   d654e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6550:	4682      	mov	sl, r0
   d6552:	bb38      	cbnz	r0, d65a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6554:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6558:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d655a:	a905      	add	r1, sp, #20
   d655c:	4630      	mov	r0, r6
   d655e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6562:	f7ff febe 	bl	d62e2 <_ZN8particle5ErrorC1EOS0_>
   d6566:	2014      	movs	r0, #20
   d6568:	f7fd fd95 	bl	d4096 <_Znwj>
   d656c:	4604      	mov	r4, r0
   d656e:	b148      	cbz	r0, d6584 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6570:	2302      	movs	r3, #2
   d6572:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6574:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6576:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d657a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d657c:	4631      	mov	r1, r6
   d657e:	300c      	adds	r0, #12
   d6580:	f7ff feaf 	bl	d62e2 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6584:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6586:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6588:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d658c:	f7ff ff32 	bl	d63f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6590:	4630      	mov	r0, r6
   d6592:	f7ff feb3 	bl	d62fc <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6596:	a805      	add	r0, sp, #20
   d6598:	f7ff feb0 	bl	d62fc <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d659c:	4628      	mov	r0, r5
   d659e:	b00a      	add	sp, #40	; 0x28
   d65a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d65a4:	230c      	movs	r3, #12
   d65a6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d65aa:	2014      	movs	r0, #20
   d65ac:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d65b0:	9307      	str	r3, [sp, #28]
   d65b2:	f7fd fd70 	bl	d4096 <_Znwj>
   d65b6:	4601      	mov	r1, r0
   d65b8:	b128      	cbz	r0, d65c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d65ba:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d65be:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d65c2:	f880 a001 	strb.w	sl, [r0, #1]
   d65c6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d65c8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d65ca:	f7ff ff13 	bl	d63f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d65ce:	4b22      	ldr	r3, [pc, #136]	; (d6658 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d65d0:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d65d2:	2008      	movs	r0, #8
   d65d4:	f7fd fd5f 	bl	d4096 <_Znwj>
   d65d8:	4682      	mov	sl, r0
   d65da:	b128      	cbz	r0, d65e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d65dc:	9b03      	ldr	r3, [sp, #12]
   d65de:	f840 3b04 	str.w	r3, [r0], #4
   d65e2:	a904      	add	r1, sp, #16
   d65e4:	f7ff fe0b 	bl	d61fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d65e8:	9600      	str	r6, [sp, #0]
   d65ea:	fa5f f389 	uxtb.w	r3, r9
   d65ee:	4642      	mov	r2, r8
   d65f0:	4639      	mov	r1, r7
   d65f2:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d65f4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d65f8:	f7ff fd32 	bl	d6060 <spark_send_event>
   d65fc:	b9b8      	cbnz	r0, d662e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d65fe:	9b03      	ldr	r3, [sp, #12]
   d6600:	785b      	ldrb	r3, [r3, #1]
   d6602:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6606:	b993      	cbnz	r3, d662e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6608:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d660c:	a905      	add	r1, sp, #20
   d660e:	a803      	add	r0, sp, #12
   d6610:	9205      	str	r2, [sp, #20]
   d6612:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6616:	f7ff ff11 	bl	d643c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d661a:	a805      	add	r0, sp, #20
   d661c:	f7ff fe6e 	bl	d62fc <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6620:	a805      	add	r0, sp, #20
   d6622:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6624:	f7ff fe94 	bl	d6350 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6628:	a806      	add	r0, sp, #24
   d662a:	f7fd fe71 	bl	d4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d662e:	9b03      	ldr	r3, [sp, #12]
   d6630:	9305      	str	r3, [sp, #20]
   d6632:	a904      	add	r1, sp, #16
   d6634:	a806      	add	r0, sp, #24
   d6636:	f7ff fde2 	bl	d61fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d663a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d663c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d663e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6640:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6642:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6644:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6646:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6648:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d664a:	f7fd fe61 	bl	d4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d664e:	a804      	add	r0, sp, #16
   d6650:	f7fd fe5e 	bl	d4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6654:	e7a2      	b.n	d659c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d6656:	bf00      	nop
   d6658:	000d6721 	.word	0x000d6721

000d665c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d665c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d665e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6660:	4605      	mov	r5, r0
	  switch (__op)
   d6662:	d007      	beq.n	d6674 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6664:	2a03      	cmp	r2, #3
   d6666:	d018      	beq.n	d669a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6668:	2a01      	cmp	r2, #1
   d666a:	d101      	bne.n	d6670 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d666c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d666e:	6003      	str	r3, [r0, #0]
	}
   d6670:	2000      	movs	r0, #0
   d6672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6674:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d6676:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6678:	f7fd fd0d 	bl	d4096 <_Znwj>
   d667c:	4604      	mov	r4, r0
   d667e:	b150      	cbz	r0, d6696 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6680:	4631      	mov	r1, r6
   d6682:	f7ff fecb 	bl	d641c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6686:	6930      	ldr	r0, [r6, #16]
   d6688:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d668c:	b108      	cbz	r0, d6692 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d668e:	f002 fd77 	bl	d9180 <strdup>
        type_(type) {
   d6692:	6120      	str	r0, [r4, #16]
   d6694:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d6696:	602c      	str	r4, [r5, #0]
	}
   d6698:	e7ea      	b.n	d6670 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d669a:	6804      	ldr	r4, [r0, #0]
   d669c:	2c00      	cmp	r4, #0
   d669e:	d0e7      	beq.n	d6670 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d66a0:	f104 0010 	add.w	r0, r4, #16
   d66a4:	f7ff fe2a 	bl	d62fc <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d66a8:	4620      	mov	r0, r4
   d66aa:	f7ff fe11 	bl	d62d0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d66ae:	2118      	movs	r1, #24
   d66b0:	4620      	mov	r0, r4
   d66b2:	f002 f8b5 	bl	d8820 <_ZdlPvj>
   d66b6:	e7db      	b.n	d6670 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d66b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d66b8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d66ba:	2300      	movs	r3, #0
   d66bc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d66be:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d66c0:	4604      	mov	r4, r0
   d66c2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d66c4:	b12b      	cbz	r3, d66d2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d66c6:	2202      	movs	r2, #2
   d66c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d66ca:	68eb      	ldr	r3, [r5, #12]
   d66cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d66ce:	68ab      	ldr	r3, [r5, #8]
   d66d0:	60a3      	str	r3, [r4, #8]
    }
   d66d2:	4620      	mov	r0, r4
   d66d4:	bd38      	pop	{r3, r4, r5, pc}

000d66d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d66d6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d66d8:	b570      	push	{r4, r5, r6, lr}
   d66da:	4604      	mov	r4, r0
	  switch (__op)
   d66dc:	d007      	beq.n	d66ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d66de:	2a03      	cmp	r2, #3
   d66e0:	d012      	beq.n	d6708 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d66e2:	2a01      	cmp	r2, #1
   d66e4:	d101      	bne.n	d66ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d66e6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d66e8:	6003      	str	r3, [r0, #0]
	}
   d66ea:	2000      	movs	r0, #0
   d66ec:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d66ee:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d66f0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d66f2:	f7fd fcd0 	bl	d4096 <_Znwj>
   d66f6:	4605      	mov	r5, r0
   d66f8:	b120      	cbz	r0, d6704 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d66fa:	4631      	mov	r1, r6
   d66fc:	f7ff ffdc 	bl	d66b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6700:	7c33      	ldrb	r3, [r6, #16]
   d6702:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6704:	6025      	str	r5, [r4, #0]
	}
   d6706:	e7f0      	b.n	d66ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6708:	6804      	ldr	r4, [r0, #0]
   d670a:	2c00      	cmp	r4, #0
   d670c:	d0ed      	beq.n	d66ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d670e:	4620      	mov	r0, r4
   d6710:	f7ff fdde 	bl	d62d0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6714:	2114      	movs	r1, #20
   d6716:	4620      	mov	r0, r4
   d6718:	f002 f882 	bl	d8820 <_ZdlPvj>
   d671c:	e7e5      	b.n	d66ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6720 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6720:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6722:	b089      	sub	sp, #36	; 0x24
   d6724:	4604      	mov	r4, r0
   d6726:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6728:	a801      	add	r0, sp, #4
   d672a:	4611      	mov	r1, r2
   d672c:	f7ff fe10 	bl	d6350 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6730:	b1a4      	cbz	r4, d675c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6732:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6734:	b11d      	cbz	r5, d673e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d6736:	4628      	mov	r0, r5
   d6738:	f002 fd22 	bl	d9180 <strdup>
   d673c:	4605      	mov	r5, r0
   d673e:	a801      	add	r0, sp, #4
   d6740:	a903      	add	r1, sp, #12
        type_(type) {
   d6742:	9503      	str	r5, [sp, #12]
   d6744:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6748:	f7ff fe78 	bl	d643c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d674c:	a803      	add	r0, sp, #12
   d674e:	f7ff fdd5 	bl	d62fc <_ZN8particle5ErrorD1Ev>
   d6752:	a802      	add	r0, sp, #8
   d6754:	f7fd fddc 	bl	d4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6758:	b009      	add	sp, #36	; 0x24
   d675a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d675c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d675e:	2301      	movs	r3, #1
   d6760:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6764:	2a00      	cmp	r2, #0
   d6766:	d103      	bne.n	d6770 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6768:	e8c5 3f41 	strexb	r1, r3, [r5]
   d676c:	2900      	cmp	r1, #0
   d676e:	d1f7      	bne.n	d6760 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6770:	d1ef      	bne.n	d6752 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d6772:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6774:	f3bf 8f5b 	dmb	ish
   d6778:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d677a:	1d2b      	adds	r3, r5, #4
   d677c:	f3bf 8f5b 	dmb	ish
   d6780:	e853 6f00 	ldrex	r6, [r3]
   d6784:	e843 4200 	strex	r2, r4, [r3]
   d6788:	2a00      	cmp	r2, #0
   d678a:	d1f9      	bne.n	d6780 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d678c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6790:	2e00      	cmp	r6, #0
   d6792:	d0de      	beq.n	d6752 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6794:	4620      	mov	r0, r4
   d6796:	f7ff fc27 	bl	d5fe8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d679a:	4607      	mov	r7, r0
   d679c:	b160      	cbz	r0, d67b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d679e:	f105 010c 	add.w	r1, r5, #12
   d67a2:	4630      	mov	r0, r6
   d67a4:	f7ff fe15 	bl	d63d2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d67a8:	4630      	mov	r0, r6
   d67aa:	f7ff fd91 	bl	d62d0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d67ae:	2110      	movs	r1, #16
   d67b0:	4630      	mov	r0, r6
   d67b2:	f002 f835 	bl	d8820 <_ZdlPvj>
   d67b6:	e7cc      	b.n	d6752 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d67b8:	4631      	mov	r1, r6
   d67ba:	a803      	add	r0, sp, #12
   d67bc:	f7ff ff7c 	bl	d66b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d67c0:	7b2b      	ldrb	r3, [r5, #12]
   d67c2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d67c6:	2010      	movs	r0, #16
   d67c8:	f7fd fc65 	bl	d4096 <_Znwj>
   d67cc:	4605      	mov	r5, r0
   d67ce:	b1d0      	cbz	r0, d6806 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d67d0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d67d2:	2014      	movs	r0, #20
   d67d4:	f7fd fc5f 	bl	d4096 <_Znwj>
   d67d8:	4604      	mov	r4, r0
   d67da:	b178      	cbz	r0, d67fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d67dc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d67de:	4601      	mov	r1, r0
   d67e0:	a803      	add	r0, sp, #12
   d67e2:	f7ff fdd4 	bl	d638e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d67e6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d67e8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d67ea:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d67ec:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d67ee:	9205      	str	r2, [sp, #20]
   d67f0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d67f2:	60e3      	str	r3, [r4, #12]
   d67f4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d67f8:	9206      	str	r2, [sp, #24]
   d67fa:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d67fc:	4b06      	ldr	r3, [pc, #24]	; (d6818 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d67fe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6800:	4b06      	ldr	r3, [pc, #24]	; (d681c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6802:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6804:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d6806:	a803      	add	r0, sp, #12
   d6808:	f7ff fd62 	bl	d62d0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d680c:	2200      	movs	r2, #0
   d680e:	4629      	mov	r1, r5
   d6810:	4803      	ldr	r0, [pc, #12]	; (d6820 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d6812:	f7ff fbf1 	bl	d5ff8 <application_thread_invoke>
   d6816:	e7c7      	b.n	d67a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6818:	000d63e5 	.word	0x000d63e5
   d681c:	000d66d7 	.word	0x000d66d7
   d6820:	000d61d7 	.word	0x000d61d7

000d6824 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6824:	2200      	movs	r2, #0
   d6826:	6840      	ldr	r0, [r0, #4]
   d6828:	4611      	mov	r1, r2
   d682a:	f7ff bc69 	b.w	d6100 <network_listening>

000d682e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d682e:	2200      	movs	r2, #0
   d6830:	6840      	ldr	r0, [r0, #4]
   d6832:	4611      	mov	r1, r2
   d6834:	f7ff bc74 	b.w	d6120 <network_get_listen_timeout>

000d6838 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6838:	6840      	ldr	r0, [r0, #4]
   d683a:	2200      	movs	r2, #0
   d683c:	f7ff bc68 	b.w	d6110 <network_set_listen_timeout>

000d6840 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6840:	6840      	ldr	r0, [r0, #4]
   d6842:	2200      	movs	r2, #0
   d6844:	f081 0101 	eor.w	r1, r1, #1
   d6848:	f7ff bc52 	b.w	d60f0 <network_listen>

000d684c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d684c:	2300      	movs	r3, #0
   d684e:	6840      	ldr	r0, [r0, #4]
   d6850:	461a      	mov	r2, r3
   d6852:	4619      	mov	r1, r3
   d6854:	f7ff bc44 	b.w	d60e0 <network_off>

000d6858 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6858:	2300      	movs	r3, #0
   d685a:	6840      	ldr	r0, [r0, #4]
   d685c:	461a      	mov	r2, r3
   d685e:	4619      	mov	r1, r3
   d6860:	f7ff bc36 	b.w	d60d0 <network_on>

000d6864 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6864:	2200      	movs	r2, #0
   d6866:	6840      	ldr	r0, [r0, #4]
   d6868:	4611      	mov	r1, r2
   d686a:	f7ff bc29 	b.w	d60c0 <network_ready>

000d686e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d686e:	2200      	movs	r2, #0
   d6870:	6840      	ldr	r0, [r0, #4]
   d6872:	4611      	mov	r1, r2
   d6874:	f7ff bc14 	b.w	d60a0 <network_connecting>

000d6878 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6878:	6840      	ldr	r0, [r0, #4]
   d687a:	2200      	movs	r2, #0
   d687c:	2102      	movs	r1, #2
   d687e:	f7ff bc17 	b.w	d60b0 <network_disconnect>

000d6882 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6882:	2300      	movs	r3, #0
   d6884:	6840      	ldr	r0, [r0, #4]
   d6886:	461a      	mov	r2, r3
   d6888:	f7ff bc02 	b.w	d6090 <network_connect>

000d688c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d688c:	4b02      	ldr	r3, [pc, #8]	; (d6898 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d688e:	2203      	movs	r2, #3
   d6890:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6892:	4a02      	ldr	r2, [pc, #8]	; (d689c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6894:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6896:	4770      	bx	lr
   d6898:	2003e590 	.word	0x2003e590
   d689c:	000d9864 	.word	0x000d9864

000d68a0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d68a0:	4770      	bx	lr

000d68a2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d68a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d68a4:	4606      	mov	r6, r0
   d68a6:	4615      	mov	r5, r2
   d68a8:	460c      	mov	r4, r1
   d68aa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d68ac:	42bc      	cmp	r4, r7
   d68ae:	d006      	beq.n	d68be <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d68b0:	6833      	ldr	r3, [r6, #0]
   d68b2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d68b6:	689b      	ldr	r3, [r3, #8]
   d68b8:	4630      	mov	r0, r6
   d68ba:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d68bc:	e7f6      	b.n	d68ac <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d68be:	4628      	mov	r0, r5
   d68c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d68c2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d68c2:	7c00      	ldrb	r0, [r0, #16]
   d68c4:	2200      	movs	r2, #0
   d68c6:	f7ff ba1d 	b.w	d5d04 <hal_i2c_write>

000d68ca <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d68ca:	7c00      	ldrb	r0, [r0, #16]
   d68cc:	2100      	movs	r1, #0
   d68ce:	f7ff ba21 	b.w	d5d14 <hal_i2c_available>

000d68d2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d68d2:	7c00      	ldrb	r0, [r0, #16]
   d68d4:	2100      	movs	r1, #0
   d68d6:	f7ff ba25 	b.w	d5d24 <hal_i2c_read>

000d68da <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d68da:	7c00      	ldrb	r0, [r0, #16]
   d68dc:	2100      	movs	r1, #0
   d68de:	f7ff ba29 	b.w	d5d34 <hal_i2c_peek>

000d68e2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d68e2:	7c00      	ldrb	r0, [r0, #16]
   d68e4:	2100      	movs	r1, #0
   d68e6:	f7ff ba2d 	b.w	d5d44 <hal_i2c_flush>

000d68ea <_ZN7TwoWireD0Ev>:
   d68ea:	b510      	push	{r4, lr}
   d68ec:	2114      	movs	r1, #20
   d68ee:	4604      	mov	r4, r0
   d68f0:	f001 ff96 	bl	d8820 <_ZdlPvj>
   d68f4:	4620      	mov	r0, r4
   d68f6:	bd10      	pop	{r4, pc}

000d68f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d68f8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d68fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d68fe:	4604      	mov	r4, r0
   d6900:	4608      	mov	r0, r1
   d6902:	2100      	movs	r1, #0
   d6904:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6908:	4b03      	ldr	r3, [pc, #12]	; (d6918 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d690a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d690c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d690e:	4611      	mov	r1, r2
   d6910:	f7ff fa28 	bl	d5d64 <hal_i2c_init>
}
   d6914:	4620      	mov	r0, r4
   d6916:	bd10      	pop	{r4, pc}
   d6918:	000d98a0 	.word	0x000d98a0

000d691c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d691c:	4700      	bx	r0
	...

000d6920 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d6920:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d6924:	2400      	movs	r4, #0
{
   d6926:	461d      	mov	r5, r3
   d6928:	460f      	mov	r7, r1
   d692a:	4690      	mov	r8, r2
   d692c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d692e:	f7ff f9e1 	bl	d5cf4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d6932:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6934:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d6938:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d693c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d6940:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d6944:	bfa2      	ittt	ge
   d6946:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d694a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d694e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6950:	4907      	ldr	r1, [pc, #28]	; (d6970 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d6952:	9400      	str	r4, [sp, #0]
   d6954:	4643      	mov	r3, r8
   d6956:	463a      	mov	r2, r7
   d6958:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d695a:	bfa8      	it	ge
   d695c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6960:	f7ff f9c0 	bl	d5ce4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d6964:	fab0 f080 	clz	r0, r0
   d6968:	0940      	lsrs	r0, r0, #5
   d696a:	b004      	add	sp, #16
   d696c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6970:	000d691d 	.word	0x000d691d

000d6974 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6974:	4770      	bx	lr

000d6976 <_ZN9IPAddressD0Ev>:
   d6976:	b510      	push	{r4, lr}
   d6978:	2118      	movs	r1, #24
   d697a:	4604      	mov	r4, r0
   d697c:	f001 ff50 	bl	d8820 <_ZdlPvj>
   d6980:	4620      	mov	r0, r4
   d6982:	bd10      	pop	{r4, pc}

000d6984 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6984:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6986:	7d03      	ldrb	r3, [r0, #20]
   d6988:	2b06      	cmp	r3, #6
{
   d698a:	b08d      	sub	sp, #52	; 0x34
   d698c:	460e      	mov	r6, r1
   d698e:	f100 0704 	add.w	r7, r0, #4
   d6992:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6996:	d012      	beq.n	d69be <_ZNK9IPAddress7printToER5Print+0x3a>
   d6998:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d699c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d69a0:	220a      	movs	r2, #10
   d69a2:	4630      	mov	r0, r6
   d69a4:	f001 fadf 	bl	d7f66 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d69a8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d69aa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d69ac:	d019      	beq.n	d69e2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d69ae:	2c00      	cmp	r4, #0
   d69b0:	d0f4      	beq.n	d699c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d69b2:	212e      	movs	r1, #46	; 0x2e
   d69b4:	4630      	mov	r0, r6
   d69b6:	f001 fac7 	bl	d7f48 <_ZN5Print5printEc>
   d69ba:	4404      	add	r4, r0
   d69bc:	e7ee      	b.n	d699c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d69be:	232f      	movs	r3, #47	; 0x2f
   d69c0:	466a      	mov	r2, sp
   d69c2:	4639      	mov	r1, r7
   d69c4:	200a      	movs	r0, #10
		buf[0] = 0;
   d69c6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d69ca:	f7ff f9d3 	bl	d5d74 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d69ce:	4668      	mov	r0, sp
   d69d0:	f002 fbf3 	bl	d91ba <strlen>
   d69d4:	6833      	ldr	r3, [r6, #0]
   d69d6:	4602      	mov	r2, r0
   d69d8:	68db      	ldr	r3, [r3, #12]
   d69da:	4669      	mov	r1, sp
   d69dc:	4630      	mov	r0, r6
   d69de:	4798      	blx	r3
   d69e0:	4604      	mov	r4, r0
    }
    return n;
}
   d69e2:	4620      	mov	r0, r4
   d69e4:	b00d      	add	sp, #52	; 0x34
   d69e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d69e8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d69e8:	b510      	push	{r4, lr}
   d69ea:	4b05      	ldr	r3, [pc, #20]	; (d6a00 <_ZN9IPAddressC1Ev+0x18>)
   d69ec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d69ee:	2211      	movs	r2, #17
   d69f0:	f840 3b04 	str.w	r3, [r0], #4
   d69f4:	2100      	movs	r1, #0
   d69f6:	f002 fb39 	bl	d906c <memset>
}
   d69fa:	4620      	mov	r0, r4
   d69fc:	bd10      	pop	{r4, pc}
   d69fe:	bf00      	nop
   d6a00:	000d98c8 	.word	0x000d98c8

000d6a04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6a04:	4603      	mov	r3, r0
   d6a06:	4a07      	ldr	r2, [pc, #28]	; (d6a24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6a08:	b510      	push	{r4, lr}
   d6a0a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6a0e:	f101 0210 	add.w	r2, r1, #16
   d6a12:	f851 4b04 	ldr.w	r4, [r1], #4
   d6a16:	f843 4b04 	str.w	r4, [r3], #4
   d6a1a:	4291      	cmp	r1, r2
   d6a1c:	d1f9      	bne.n	d6a12 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6a1e:	780a      	ldrb	r2, [r1, #0]
   d6a20:	701a      	strb	r2, [r3, #0]
}
   d6a22:	bd10      	pop	{r4, pc}
   d6a24:	000d98c8 	.word	0x000d98c8

000d6a28 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6a28:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6a2a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6a2e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6a32:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6a36:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6a3a:	2304      	movs	r3, #4
   d6a3c:	6041      	str	r1, [r0, #4]
   d6a3e:	7503      	strb	r3, [r0, #20]
}
   d6a40:	bd10      	pop	{r4, pc}

000d6a42 <_ZN9IPAddressaSEPKh>:
{
   d6a42:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6a44:	78cb      	ldrb	r3, [r1, #3]
   d6a46:	9300      	str	r3, [sp, #0]
   d6a48:	788b      	ldrb	r3, [r1, #2]
   d6a4a:	784a      	ldrb	r2, [r1, #1]
   d6a4c:	7809      	ldrb	r1, [r1, #0]
   d6a4e:	f7ff ffeb 	bl	d6a28 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6a52:	b002      	add	sp, #8
   d6a54:	bd10      	pop	{r4, pc}

000d6a56 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d6a56:	f100 0310 	add.w	r3, r0, #16
   d6a5a:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d6a5c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d6a60:	2901      	cmp	r1, #1
   d6a62:	4618      	mov	r0, r3
   d6a64:	d108      	bne.n	d6a78 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d6a66:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d6a6a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d6a6e:	3a01      	subs	r2, #1
   d6a70:	f103 0310 	add.w	r3, r3, #16
   d6a74:	d1f2      	bne.n	d6a5c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d6a76:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d6a78:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d6a7a:	bf04      	itt	eq
   d6a7c:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d6a80:	1852      	addeq	r2, r2, r1
   d6a82:	e7f4      	b.n	d6a6e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d6a84 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d6a84:	b40e      	push	{r1, r2, r3}
   d6a86:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a88:	b088      	sub	sp, #32
   d6a8a:	af00      	add	r7, sp, #0
   d6a8c:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6a90:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6a92:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6a96:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6a98:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6a9a:	462b      	mov	r3, r5
   d6a9c:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d6a9e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6aa0:	f7ff fb76 	bl	d6190 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d6aa4:	280f      	cmp	r0, #15
   d6aa6:	687a      	ldr	r2, [r7, #4]
   d6aa8:	d91a      	bls.n	d6ae0 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d6aaa:	f100 0308 	add.w	r3, r0, #8
   d6aae:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d6ab2:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d6ab4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6ab8:	1c41      	adds	r1, r0, #1
   d6aba:	462b      	mov	r3, r5
   d6abc:	4668      	mov	r0, sp
        va_start(args, fmt);
   d6abe:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6ac0:	f7ff fb66 	bl	d6190 <vsnprintf>
        if (n > 0) {
   d6ac4:	1e02      	subs	r2, r0, #0
   d6ac6:	dd04      	ble.n	d6ad2 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d6ac8:	6823      	ldr	r3, [r4, #0]
   d6aca:	4669      	mov	r1, sp
   d6acc:	689b      	ldr	r3, [r3, #8]
   d6ace:	4620      	mov	r0, r4
   d6ad0:	4798      	blx	r3
   d6ad2:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d6ad4:	3720      	adds	r7, #32
   d6ad6:	46bd      	mov	sp, r7
   d6ad8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6adc:	b003      	add	sp, #12
   d6ade:	4770      	bx	lr
    } else if (n > 0) {
   d6ae0:	2800      	cmp	r0, #0
   d6ae2:	d0f7      	beq.n	d6ad4 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d6ae4:	6823      	ldr	r3, [r4, #0]
   d6ae6:	4602      	mov	r2, r0
   d6ae8:	689b      	ldr	r3, [r3, #8]
   d6aea:	f107 0110 	add.w	r1, r7, #16
   d6aee:	4620      	mov	r0, r4
   d6af0:	4798      	blx	r3
}
   d6af2:	e7ef      	b.n	d6ad4 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d6af4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6af4:	b510      	push	{r4, lr}
          _M_dispose();
   d6af6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6af8:	4604      	mov	r4, r0
          _M_dispose();
   d6afa:	689b      	ldr	r3, [r3, #8]
   d6afc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6afe:	68a3      	ldr	r3, [r4, #8]
   d6b00:	3b01      	subs	r3, #1
   d6b02:	60a3      	str	r3, [r4, #8]
   d6b04:	b92b      	cbnz	r3, d6b12 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6b06:	6823      	ldr	r3, [r4, #0]
   d6b08:	4620      	mov	r0, r4
   d6b0a:	68db      	ldr	r3, [r3, #12]
    }
   d6b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6b10:	4718      	bx	r3
    }
   d6b12:	bd10      	pop	{r4, pc}

000d6b14 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d6b14:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d6b16:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d6b18:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d6b1c:	689b      	ldr	r3, [r3, #8]
   d6b1e:	2201      	movs	r2, #1
   d6b20:	f10d 0107 	add.w	r1, sp, #7
   d6b24:	4798      	blx	r3
}
   d6b26:	b003      	add	sp, #12
   d6b28:	f85d fb04 	ldr.w	pc, [sp], #4

000d6b2c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d6b2c:	b538      	push	{r3, r4, r5, lr}
   d6b2e:	680b      	ldr	r3, [r1, #0]
   d6b30:	6003      	str	r3, [r0, #0]
   d6b32:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d6b34:	6843      	ldr	r3, [r0, #4]
   d6b36:	429d      	cmp	r5, r3
    class __shared_ptr
   d6b38:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d6b3a:	d00c      	beq.n	d6b56 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d6b3c:	b115      	cbz	r5, d6b44 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d6b3e:	686b      	ldr	r3, [r5, #4]
   d6b40:	3301      	adds	r3, #1
   d6b42:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d6b44:	6860      	ldr	r0, [r4, #4]
   d6b46:	b128      	cbz	r0, d6b54 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d6b48:	6843      	ldr	r3, [r0, #4]
   d6b4a:	3b01      	subs	r3, #1
   d6b4c:	6043      	str	r3, [r0, #4]
   d6b4e:	b90b      	cbnz	r3, d6b54 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d6b50:	f7ff ffd0 	bl	d6af4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d6b54:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d6b56:	4620      	mov	r0, r4
   d6b58:	bd38      	pop	{r3, r4, r5, pc}

000d6b5a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6b5a:	460b      	mov	r3, r1
   d6b5c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d6b5e:	2200      	movs	r2, #0
   d6b60:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d6b62:	e9c0 2200 	strd	r2, r2, [r0]
   d6b66:	4604      	mov	r4, r0
        t_ = t;
   d6b68:	6083      	str	r3, [r0, #8]
    if (t) {
   d6b6a:	b90b      	cbnz	r3, d6b70 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d6b6c:	4620      	mov	r0, r4
   d6b6e:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d6b70:	f7ff ffdc 	bl	d6b2c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d6b74:	e7fa      	b.n	d6b6c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d6b76 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d6b76:	6883      	ldr	r3, [r0, #8]
   d6b78:	b1eb      	cbz	r3, d6bb6 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d6b7a:	781a      	ldrb	r2, [r3, #0]
   d6b7c:	2a03      	cmp	r2, #3
   d6b7e:	d81a      	bhi.n	d6bb6 <_ZNK5spark9JSONValue4typeEv+0x40>
   d6b80:	e8df f002 	tbb	[pc, r2]
   d6b84:	1b021704 	.word	0x1b021704
   d6b88:	2005      	movs	r0, #5
   d6b8a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d6b8c:	6802      	ldr	r2, [r0, #0]
   d6b8e:	685b      	ldr	r3, [r3, #4]
   d6b90:	6852      	ldr	r2, [r2, #4]
   d6b92:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d6b94:	282d      	cmp	r0, #45	; 0x2d
   d6b96:	d012      	beq.n	d6bbe <_ZNK5spark9JSONValue4typeEv+0x48>
   d6b98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6b9c:	2b09      	cmp	r3, #9
   d6b9e:	d90e      	bls.n	d6bbe <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d6ba0:	2874      	cmp	r0, #116	; 0x74
   d6ba2:	d00e      	beq.n	d6bc2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d6ba4:	2866      	cmp	r0, #102	; 0x66
   d6ba6:	d00c      	beq.n	d6bc2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d6ba8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d6bac:	4258      	negs	r0, r3
   d6bae:	4158      	adcs	r0, r3
   d6bb0:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d6bb2:	2006      	movs	r0, #6
   d6bb4:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d6bb6:	2000      	movs	r0, #0
   d6bb8:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d6bba:	2004      	movs	r0, #4
   d6bbc:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d6bbe:	2003      	movs	r0, #3
   d6bc0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d6bc2:	2002      	movs	r0, #2
}
   d6bc4:	4770      	bx	lr

000d6bc6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d6bc6:	b510      	push	{r4, lr}
   d6bc8:	4604      	mov	r4, r0
    switch (type()) {
   d6bca:	f7ff ffd4 	bl	d6b76 <_ZNK5spark9JSONValue4typeEv>
   d6bce:	2802      	cmp	r0, #2
   d6bd0:	d00e      	beq.n	d6bf0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d6bd2:	1ec3      	subs	r3, r0, #3
   d6bd4:	b2db      	uxtb	r3, r3
   d6bd6:	2b01      	cmp	r3, #1
   d6bd8:	d814      	bhi.n	d6c04 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d6bda:	6822      	ldr	r2, [r4, #0]
   d6bdc:	68a3      	ldr	r3, [r4, #8]
   d6bde:	6850      	ldr	r0, [r2, #4]
   d6be0:	685b      	ldr	r3, [r3, #4]
}
   d6be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d6be6:	220a      	movs	r2, #10
   d6be8:	2100      	movs	r1, #0
   d6bea:	4418      	add	r0, r3
   d6bec:	f002 bb8e 	b.w	d930c <strtol>
        const char* const s = d_->json + t_->start;
   d6bf0:	6822      	ldr	r2, [r4, #0]
   d6bf2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d6bf4:	6852      	ldr	r2, [r2, #4]
   d6bf6:	685b      	ldr	r3, [r3, #4]
   d6bf8:	5cd0      	ldrb	r0, [r2, r3]
   d6bfa:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6bfe:	4258      	negs	r0, r3
   d6c00:	4158      	adcs	r0, r3
}
   d6c02:	bd10      	pop	{r4, pc}
    switch (type()) {
   d6c04:	2000      	movs	r0, #0
   d6c06:	e7fc      	b.n	d6c02 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d6c08 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6c08:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6c0a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d6c0c:	e9c0 3300 	strd	r3, r3, [r0]
   d6c10:	4604      	mov	r4, r0
        n_(0) {
   d6c12:	480e      	ldr	r0, [pc, #56]	; (d6c4c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d6c14:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d6c18:	b1a9      	cbz	r1, d6c46 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d6c1a:	780b      	ldrb	r3, [r1, #0]
   d6c1c:	2b03      	cmp	r3, #3
   d6c1e:	d006      	beq.n	d6c2e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d6c20:	b98b      	cbnz	r3, d6c46 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d6c22:	6813      	ldr	r3, [r2, #0]
   d6c24:	6858      	ldr	r0, [r3, #4]
   d6c26:	684b      	ldr	r3, [r1, #4]
   d6c28:	5cc3      	ldrb	r3, [r0, r3]
   d6c2a:	2b6e      	cmp	r3, #110	; 0x6e
   d6c2c:	d007      	beq.n	d6c3e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d6c2e:	6813      	ldr	r3, [r2, #0]
   d6c30:	684d      	ldr	r5, [r1, #4]
   d6c32:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d6c34:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d6c36:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d6c38:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d6c3a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d6c3c:	60e3      	str	r3, [r4, #12]
   d6c3e:	4611      	mov	r1, r2
   d6c40:	4620      	mov	r0, r4
   d6c42:	f7ff ff73 	bl	d6b2c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6c46:	4620      	mov	r0, r4
   d6c48:	bd38      	pop	{r3, r4, r5, pc}
   d6c4a:	bf00      	nop
   d6c4c:	000d9937 	.word	0x000d9937

000d6c50 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6c50:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6c52:	2500      	movs	r5, #0
   d6c54:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d6c56:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d6c5a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d6c5e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d6c62:	4604      	mov	r4, r0
   d6c64:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d6c66:	b14b      	cbz	r3, d6c7c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d6c68:	781a      	ldrb	r2, [r3, #0]
   d6c6a:	2a01      	cmp	r2, #1
   d6c6c:	d106      	bne.n	d6c7c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d6c6e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d6c72:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d6c74:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d6c76:	6143      	str	r3, [r0, #20]
   d6c78:	f7ff ff58 	bl	d6b2c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6c7c:	4620      	mov	r0, r4
   d6c7e:	bd38      	pop	{r3, r4, r5, pc}

000d6c80 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d6c80:	b510      	push	{r4, lr}
    if (!n_) {
   d6c82:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d6c84:	4604      	mov	r4, r0
    if (!n_) {
   d6c86:	b163      	cbz	r3, d6ca2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d6c88:	6880      	ldr	r0, [r0, #8]
   d6c8a:	60e0      	str	r0, [r4, #12]
    --n_;
   d6c8c:	3b01      	subs	r3, #1
    ++t_;
   d6c8e:	3010      	adds	r0, #16
   d6c90:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6c92:	6120      	str	r0, [r4, #16]
    --n_;
   d6c94:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6c96:	b113      	cbz	r3, d6c9e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d6c98:	f7ff fedd 	bl	d6a56 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6c9c:	60a0      	str	r0, [r4, #8]
    return true;
   d6c9e:	2001      	movs	r0, #1
   d6ca0:	e000      	b.n	d6ca4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d6ca2:	4618      	mov	r0, r3
}
   d6ca4:	bd10      	pop	{r4, pc}

000d6ca6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6ca6:	b510      	push	{r4, lr}
    write('}');
   d6ca8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6caa:	4604      	mov	r4, r0
    write('}');
   d6cac:	f7ff ff32 	bl	d6b14 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6cb0:	2301      	movs	r3, #1
   d6cb2:	7123      	strb	r3, [r4, #4]
}
   d6cb4:	4620      	mov	r0, r4
   d6cb6:	bd10      	pop	{r4, pc}

000d6cb8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d6cb8:	b508      	push	{r3, lr}
    switch (state_) {
   d6cba:	7903      	ldrb	r3, [r0, #4]
   d6cbc:	2b01      	cmp	r3, #1
   d6cbe:	d002      	beq.n	d6cc6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6cc0:	2b02      	cmp	r3, #2
   d6cc2:	d004      	beq.n	d6cce <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d6cc4:	bd08      	pop	{r3, pc}
        write(',');
   d6cc6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d6cc8:	f7ff ff24 	bl	d6b14 <_ZN5spark10JSONWriter5writeEc>
}
   d6ccc:	e7fa      	b.n	d6cc4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d6cce:	213a      	movs	r1, #58	; 0x3a
   d6cd0:	e7fa      	b.n	d6cc8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d6cd2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d6cd2:	b510      	push	{r4, lr}
   d6cd4:	4604      	mov	r4, r0
    writeSeparator();
   d6cd6:	f7ff ffef 	bl	d6cb8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6cda:	4620      	mov	r0, r4
   d6cdc:	217b      	movs	r1, #123	; 0x7b
   d6cde:	f7ff ff19 	bl	d6b14 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d6ce2:	2300      	movs	r3, #0
   d6ce4:	7123      	strb	r3, [r4, #4]
}
   d6ce6:	4620      	mov	r0, r4
   d6ce8:	bd10      	pop	{r4, pc}
	...

000d6cec <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6cec:	b513      	push	{r0, r1, r4, lr}
   d6cee:	4604      	mov	r4, r0
   d6cf0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6cf2:	f7ff ffe1 	bl	d6cb8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d6cf6:	6823      	ldr	r3, [r4, #0]
   d6cf8:	9a01      	ldr	r2, [sp, #4]
   d6cfa:	68db      	ldr	r3, [r3, #12]
   d6cfc:	4903      	ldr	r1, [pc, #12]	; (d6d0c <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6cfe:	4620      	mov	r0, r4
   d6d00:	4798      	blx	r3
    state_ = NEXT;
   d6d02:	2301      	movs	r3, #1
}
   d6d04:	4620      	mov	r0, r4
    state_ = NEXT;
   d6d06:	7123      	strb	r3, [r4, #4]
}
   d6d08:	b002      	add	sp, #8
   d6d0a:	bd10      	pop	{r4, pc}
   d6d0c:	000d946a 	.word	0x000d946a

000d6d10 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d6d10:	b513      	push	{r0, r1, r4, lr}
   d6d12:	4604      	mov	r4, r0
   d6d14:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6d16:	f7ff ffcf 	bl	d6cb8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d6d1a:	6823      	ldr	r3, [r4, #0]
   d6d1c:	9a01      	ldr	r2, [sp, #4]
   d6d1e:	68db      	ldr	r3, [r3, #12]
   d6d20:	4903      	ldr	r1, [pc, #12]	; (d6d30 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d6d22:	4620      	mov	r0, r4
   d6d24:	4798      	blx	r3
    state_ = NEXT;
   d6d26:	2301      	movs	r3, #1
}
   d6d28:	4620      	mov	r0, r4
    state_ = NEXT;
   d6d2a:	7123      	strb	r3, [r4, #4]
}
   d6d2c:	b002      	add	sp, #8
   d6d2e:	bd10      	pop	{r4, pc}
   d6d30:	000d98d4 	.word	0x000d98d4

000d6d34 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6d38:	460d      	mov	r5, r1
   d6d3a:	4617      	mov	r7, r2
    write('"');
   d6d3c:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d6d3e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d6de0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6d42:	4604      	mov	r4, r0
    const char* const end = str + size;
   d6d44:	442f      	add	r7, r5
    write('"');
   d6d46:	f7ff fee5 	bl	d6b14 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d6d4a:	4629      	mov	r1, r5
    while (s != end) {
   d6d4c:	42bd      	cmp	r5, r7
   d6d4e:	462a      	mov	r2, r5
   d6d50:	d038      	beq.n	d6dc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d6d52:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d6d56:	2e22      	cmp	r6, #34	; 0x22
   d6d58:	d003      	beq.n	d6d62 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6d5a:	2e5c      	cmp	r6, #92	; 0x5c
   d6d5c:	d001      	beq.n	d6d62 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6d5e:	2e1f      	cmp	r6, #31
   d6d60:	d8f4      	bhi.n	d6d4c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d6d62:	6823      	ldr	r3, [r4, #0]
   d6d64:	1a52      	subs	r2, r2, r1
   d6d66:	689b      	ldr	r3, [r3, #8]
   d6d68:	4620      	mov	r0, r4
   d6d6a:	4798      	blx	r3
            write('\\');
   d6d6c:	215c      	movs	r1, #92	; 0x5c
   d6d6e:	4620      	mov	r0, r4
   d6d70:	f7ff fed0 	bl	d6b14 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d6d74:	2e0d      	cmp	r6, #13
   d6d76:	d80a      	bhi.n	d6d8e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d6d78:	2e07      	cmp	r6, #7
   d6d7a:	d91c      	bls.n	d6db6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6d7c:	f1a6 0308 	sub.w	r3, r6, #8
   d6d80:	2b05      	cmp	r3, #5
   d6d82:	d818      	bhi.n	d6db6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6d84:	e8df f003 	tbb	[pc, r3]
   d6d88:	17110f0d 	.word	0x17110f0d
   d6d8c:	1513      	.short	0x1513
   d6d8e:	2e22      	cmp	r6, #34	; 0x22
   d6d90:	d001      	beq.n	d6d96 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6d92:	2e5c      	cmp	r6, #92	; 0x5c
   d6d94:	d10f      	bne.n	d6db6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d6d96:	4631      	mov	r1, r6
                write('b');
   d6d98:	4620      	mov	r0, r4
   d6d9a:	f7ff febb 	bl	d6b14 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d6d9e:	4629      	mov	r1, r5
    while (s != end) {
   d6da0:	e7d4      	b.n	d6d4c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d6da2:	2162      	movs	r1, #98	; 0x62
   d6da4:	e7f8      	b.n	d6d98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d6da6:	2174      	movs	r1, #116	; 0x74
   d6da8:	e7f6      	b.n	d6d98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d6daa:	216e      	movs	r1, #110	; 0x6e
   d6dac:	e7f4      	b.n	d6d98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d6dae:	2166      	movs	r1, #102	; 0x66
   d6db0:	e7f2      	b.n	d6d98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d6db2:	2172      	movs	r1, #114	; 0x72
   d6db4:	e7f0      	b.n	d6d98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d6db6:	6823      	ldr	r3, [r4, #0]
   d6db8:	4632      	mov	r2, r6
   d6dba:	68db      	ldr	r3, [r3, #12]
   d6dbc:	4641      	mov	r1, r8
   d6dbe:	4620      	mov	r0, r4
   d6dc0:	4798      	blx	r3
                break;
   d6dc2:	e7ec      	b.n	d6d9e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d6dc4:	428d      	cmp	r5, r1
   d6dc6:	d004      	beq.n	d6dd2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d6dc8:	6823      	ldr	r3, [r4, #0]
   d6dca:	1a6a      	subs	r2, r5, r1
   d6dcc:	689b      	ldr	r3, [r3, #8]
   d6dce:	4620      	mov	r0, r4
   d6dd0:	4798      	blx	r3
    }
    write('"');
   d6dd2:	2122      	movs	r1, #34	; 0x22
   d6dd4:	4620      	mov	r0, r4
   d6dd6:	f7ff fe9d 	bl	d6b14 <_ZN5spark10JSONWriter5writeEc>
}
   d6dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6dde:	bf00      	nop
   d6de0:	000d98d7 	.word	0x000d98d7

000d6de4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d6de4:	b513      	push	{r0, r1, r4, lr}
   d6de6:	4604      	mov	r4, r0
   d6de8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6dec:	f7ff ff64 	bl	d6cb8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6df0:	4620      	mov	r0, r4
   d6df2:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6df6:	f7ff ff9d 	bl	d6d34 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d6dfa:	2302      	movs	r3, #2
}
   d6dfc:	4620      	mov	r0, r4
    state_ = VALUE;
   d6dfe:	7123      	strb	r3, [r4, #4]
}
   d6e00:	b002      	add	sp, #8
   d6e02:	bd10      	pop	{r4, pc}

000d6e04 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d6e04:	b513      	push	{r0, r1, r4, lr}
   d6e06:	4604      	mov	r4, r0
   d6e08:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6e0c:	f7ff ff54 	bl	d6cb8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d6e10:	4620      	mov	r0, r4
   d6e12:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6e16:	f7ff ff8d 	bl	d6d34 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d6e1a:	2301      	movs	r3, #1
}
   d6e1c:	4620      	mov	r0, r4
    state_ = NEXT;
   d6e1e:	7123      	strb	r3, [r4, #4]
}
   d6e20:	b002      	add	sp, #8
   d6e22:	bd10      	pop	{r4, pc}

000d6e24 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d6e24:	6880      	ldr	r0, [r0, #8]
   d6e26:	6803      	ldr	r3, [r0, #0]
   d6e28:	68db      	ldr	r3, [r3, #12]
   d6e2a:	4718      	bx	r3

000d6e2c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d6e2c:	4770      	bx	lr

000d6e2e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d6e2e:	4608      	mov	r0, r1
   d6e30:	b111      	cbz	r1, d6e38 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d6e32:	680b      	ldr	r3, [r1, #0]
   d6e34:	685b      	ldr	r3, [r3, #4]
   d6e36:	4718      	bx	r3
}
   d6e38:	4770      	bx	lr

000d6e3a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d6e3a:	4770      	bx	lr

000d6e3c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6e3c:	4770      	bx	lr

000d6e3e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d6e3e:	4770      	bx	lr

000d6e40 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d6e40:	4770      	bx	lr

000d6e42 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d6e42:	b538      	push	{r3, r4, r5, lr}
   d6e44:	4604      	mov	r4, r0
   d6e46:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d6e48:	6800      	ldr	r0, [r0, #0]
   d6e4a:	212e      	movs	r1, #46	; 0x2e
   d6e4c:	f002 f97b 	bl	d9146 <strchrnul>
    size = s - category;
   d6e50:	6823      	ldr	r3, [r4, #0]
   d6e52:	1ac3      	subs	r3, r0, r3
   d6e54:	602b      	str	r3, [r5, #0]
    if (size) {
   d6e56:	b123      	cbz	r3, d6e62 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d6e58:	7803      	ldrb	r3, [r0, #0]
   d6e5a:	b103      	cbz	r3, d6e5e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d6e5c:	3001      	adds	r0, #1
   d6e5e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e60:	6020      	str	r0, [r4, #0]
}
   d6e62:	4618      	mov	r0, r3
   d6e64:	bd38      	pop	{r3, r4, r5, pc}

000d6e66 <_ZN5spark16JSONStreamWriterD0Ev>:
   d6e66:	b510      	push	{r4, lr}
   d6e68:	210c      	movs	r1, #12
   d6e6a:	4604      	mov	r4, r0
   d6e6c:	f001 fcd8 	bl	d8820 <_ZdlPvj>
   d6e70:	4620      	mov	r0, r4
   d6e72:	bd10      	pop	{r4, pc}

000d6e74 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d6e74:	b510      	push	{r4, lr}
   d6e76:	2104      	movs	r1, #4
   d6e78:	4604      	mov	r4, r0
   d6e7a:	f001 fcd1 	bl	d8820 <_ZdlPvj>
   d6e7e:	4620      	mov	r0, r4
   d6e80:	bd10      	pop	{r4, pc}

000d6e82 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6e82:	b510      	push	{r4, lr}
   d6e84:	2104      	movs	r1, #4
   d6e86:	4604      	mov	r4, r0
   d6e88:	f001 fcca 	bl	d8820 <_ZdlPvj>
   d6e8c:	4620      	mov	r0, r4
   d6e8e:	bd10      	pop	{r4, pc}

000d6e90 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d6e90:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d6e92:	f002 f962 	bl	d915a <strcmp>
}
   d6e96:	fab0 f080 	clz	r0, r0
   d6e9a:	0940      	lsrs	r0, r0, #5
   d6e9c:	bd08      	pop	{r3, pc}

000d6e9e <__tcf_1>:
   d6e9e:	4770      	bx	lr

000d6ea0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d6ea0:	b510      	push	{r4, lr}
   d6ea2:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d6ea4:	f001 fb54 	bl	d8550 <_Z16_fetch_usbserialv>
   d6ea8:	4284      	cmp	r4, r0
   d6eaa:	d010      	beq.n	d6ece <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d6eac:	f001 fac8 	bl	d8440 <_Z22__fetch_global_Serial1v>
   d6eb0:	4284      	cmp	r4, r0
   d6eb2:	d105      	bne.n	d6ec0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d6eb4:	f001 fac4 	bl	d8440 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d6eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d6ebc:	f001 babd 	b.w	d843a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d6ec0:	b12c      	cbz	r4, d6ece <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d6ec2:	6823      	ldr	r3, [r4, #0]
   d6ec4:	4620      	mov	r0, r4
   d6ec6:	685b      	ldr	r3, [r3, #4]
}
   d6ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6ecc:	4718      	bx	r3
   d6ece:	bd10      	pop	{r4, pc}

000d6ed0 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d6ed0:	b513      	push	{r0, r1, r4, lr}
   d6ed2:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d6ed4:	4608      	mov	r0, r1
   d6ed6:	9101      	str	r1, [sp, #4]
   d6ed8:	f002 f96f 	bl	d91ba <strlen>
   d6edc:	9901      	ldr	r1, [sp, #4]
   d6ede:	4602      	mov	r2, r0
   d6ee0:	4620      	mov	r0, r4
}
   d6ee2:	b002      	add	sp, #8
   d6ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d6ee8:	f7ff bf8c 	b.w	d6e04 <_ZN5spark10JSONWriter5valueEPKcj>

000d6eec <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d6eec:	b513      	push	{r0, r1, r4, lr}
   d6eee:	4604      	mov	r4, r0
    write(str, strlen(str));
   d6ef0:	4608      	mov	r0, r1
   d6ef2:	9101      	str	r1, [sp, #4]
   d6ef4:	f002 f961 	bl	d91ba <strlen>
   d6ef8:	6823      	ldr	r3, [r4, #0]
   d6efa:	9901      	ldr	r1, [sp, #4]
   d6efc:	68db      	ldr	r3, [r3, #12]
   d6efe:	4602      	mov	r2, r0
   d6f00:	4620      	mov	r0, r4
}
   d6f02:	b002      	add	sp, #8
   d6f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d6f08:	4718      	bx	r3

000d6f0a <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d6f0a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d6f0c:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d6f0e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d6f12:	68db      	ldr	r3, [r3, #12]
   d6f14:	2201      	movs	r2, #1
   d6f16:	f10d 0107 	add.w	r1, sp, #7
   d6f1a:	4798      	blx	r3
}
   d6f1c:	b003      	add	sp, #12
   d6f1e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6f22 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d6f22:	b40e      	push	{r1, r2, r3}
   d6f24:	b503      	push	{r0, r1, lr}
   d6f26:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d6f28:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d6f2a:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d6f2e:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d6f30:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d6f32:	f001 f836 	bl	d7fa2 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d6f36:	b002      	add	sp, #8
   d6f38:	f85d eb04 	ldr.w	lr, [sp], #4
   d6f3c:	b003      	add	sp, #12
   d6f3e:	4770      	bx	lr

000d6f40 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d6f44:	e9d0 9500 	ldrd	r9, r5, [r0]
   d6f48:	f04f 0814 	mov.w	r8, #20
   d6f4c:	fb08 f505 	mul.w	r5, r8, r5
   d6f50:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6f52:	10ab      	asrs	r3, r5, #2
   d6f54:	4d18      	ldr	r5, [pc, #96]	; (d6fb8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d6f56:	4617      	mov	r7, r2
   d6f58:	435d      	muls	r5, r3
   d6f5a:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d6f5c:	2d00      	cmp	r5, #0
   d6f5e:	dd23      	ble.n	d6fa8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d6f60:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d6f62:	fb08 f006 	mul.w	r0, r8, r6
   d6f66:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d6f6a:	463a      	mov	r2, r7
   d6f6c:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d6f70:	5820      	ldr	r0, [r4, r0]
   d6f72:	9101      	str	r1, [sp, #4]
   d6f74:	455f      	cmp	r7, fp
   d6f76:	bf28      	it	cs
   d6f78:	465a      	movcs	r2, fp
   d6f7a:	f002 f926 	bl	d91ca <strncmp>
                if (cmp == 0) {
   d6f7e:	9901      	ldr	r1, [sp, #4]
   d6f80:	2301      	movs	r3, #1
   d6f82:	b978      	cbnz	r0, d6fa4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d6f84:	455f      	cmp	r7, fp
   d6f86:	d103      	bne.n	d6f90 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d6f88:	9a00      	ldr	r2, [sp, #0]
   d6f8a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6f8c:	4635      	mov	r5, r6
   d6f8e:	e7e5      	b.n	d6f5c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d6f90:	bf8c      	ite	hi
   d6f92:	2001      	movhi	r0, #1
   d6f94:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d6f96:	2800      	cmp	r0, #0
   d6f98:	d0f8      	beq.n	d6f8c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d6f9a:	1bae      	subs	r6, r5, r6
	      ++__first;
   d6f9c:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d6fa0:	3e01      	subs	r6, #1
   d6fa2:	e7f3      	b.n	d6f8c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d6fa4:	0fc0      	lsrs	r0, r0, #31
   d6fa6:	e7f6      	b.n	d6f96 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d6fa8:	eba4 0409 	sub.w	r4, r4, r9
}
   d6fac:	4802      	ldr	r0, [pc, #8]	; (d6fb8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d6fae:	10a4      	asrs	r4, r4, #2
   d6fb0:	4360      	muls	r0, r4
   d6fb2:	b003      	add	sp, #12
   d6fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6fb8:	cccccccd 	.word	0xcccccccd

000d6fbc <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6fbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d6fbe:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d6fc0:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6fc2:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d6fc4:	b30b      	cbz	r3, d700a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d6fc6:	b301      	cbz	r1, d700a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d6fc8:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d6fca:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d6fce:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d6fd0:	a903      	add	r1, sp, #12
   d6fd2:	a801      	add	r0, sp, #4
   d6fd4:	f7ff ff35 	bl	d6e42 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6fd8:	4601      	mov	r1, r0
   d6fda:	b1b0      	cbz	r0, d700a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d6fdc:	f10d 030b 	add.w	r3, sp, #11
   d6fe0:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d6fe2:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d6fe6:	4620      	mov	r0, r4
   d6fe8:	f7ff ffaa 	bl	d6f40 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d6fec:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6ff0:	b15b      	cbz	r3, d700a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d6ff2:	6824      	ldr	r4, [r4, #0]
   d6ff4:	2314      	movs	r3, #20
   d6ff6:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d6ffa:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d6ffe:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d7002:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d7004:	bfa8      	it	ge
   d7006:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d7008:	e7e2      	b.n	d6fd0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d700a:	4630      	mov	r0, r6
   d700c:	b004      	add	sp, #16
   d700e:	bd70      	pop	{r4, r5, r6, pc}

000d7010 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d7010:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d7012:	4c09      	ldr	r4, [pc, #36]	; (d7038 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d7014:	7823      	ldrb	r3, [r4, #0]
   d7016:	f3bf 8f5b 	dmb	ish
   d701a:	07db      	lsls	r3, r3, #31
   d701c:	d409      	bmi.n	d7032 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d701e:	4620      	mov	r0, r4
   d7020:	f7fd f84a 	bl	d40b8 <__cxa_guard_acquire>
   d7024:	b128      	cbz	r0, d7032 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d7026:	4620      	mov	r0, r4
   d7028:	f7fd f84b 	bl	d40c2 <__cxa_guard_release>
   d702c:	4803      	ldr	r0, [pc, #12]	; (d703c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d702e:	f001 ffef 	bl	d9010 <atexit>
}
   d7032:	4803      	ldr	r0, [pc, #12]	; (d7040 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d7034:	bd10      	pop	{r4, pc}
   d7036:	bf00      	nop
   d7038:	2003e59c 	.word	0x2003e59c
   d703c:	000d6e3b 	.word	0x000d6e3b
   d7040:	2003def8 	.word	0x2003def8

000d7044 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d7044:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d7046:	4c09      	ldr	r4, [pc, #36]	; (d706c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d7048:	7823      	ldrb	r3, [r4, #0]
   d704a:	f3bf 8f5b 	dmb	ish
   d704e:	07db      	lsls	r3, r3, #31
   d7050:	d409      	bmi.n	d7066 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d7052:	4620      	mov	r0, r4
   d7054:	f7fd f830 	bl	d40b8 <__cxa_guard_acquire>
   d7058:	b128      	cbz	r0, d7066 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d705a:	4620      	mov	r0, r4
   d705c:	f7fd f831 	bl	d40c2 <__cxa_guard_release>
   d7060:	4803      	ldr	r0, [pc, #12]	; (d7070 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d7062:	f001 ffd5 	bl	d9010 <atexit>
    return &factory;
}
   d7066:	4803      	ldr	r0, [pc, #12]	; (d7074 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d7068:	bd10      	pop	{r4, pc}
   d706a:	bf00      	nop
   d706c:	2003e5a0 	.word	0x2003e5a0
   d7070:	000d6e9f 	.word	0x000d6e9f
   d7074:	2003defc 	.word	0x2003defc

000d7078 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d7078:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d707a:	2500      	movs	r5, #0
   d707c:	4604      	mov	r4, r0
   d707e:	e9c0 5500 	strd	r5, r5, [r0]
   d7082:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d7086:	6085      	str	r5, [r0, #8]
   d7088:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d708a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d708e:	f7fe fdb9 	bl	d5c04 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d7092:	f7ff ffbd 	bl	d7010 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d7096:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d7098:	f7ff ffd4 	bl	d7044 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d709c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d709e:	6220      	str	r0, [r4, #32]
}
   d70a0:	4620      	mov	r0, r4
   d70a2:	bd38      	pop	{r3, r4, r5, pc}

000d70a4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d70a4:	b510      	push	{r4, lr}
    static LogManager mgr;
   d70a6:	4c0a      	ldr	r4, [pc, #40]	; (d70d0 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d70a8:	7823      	ldrb	r3, [r4, #0]
   d70aa:	f3bf 8f5b 	dmb	ish
   d70ae:	07db      	lsls	r3, r3, #31
   d70b0:	d40c      	bmi.n	d70cc <_ZN5spark10LogManager8instanceEv+0x28>
   d70b2:	4620      	mov	r0, r4
   d70b4:	f7fd f800 	bl	d40b8 <__cxa_guard_acquire>
   d70b8:	b140      	cbz	r0, d70cc <_ZN5spark10LogManager8instanceEv+0x28>
   d70ba:	4806      	ldr	r0, [pc, #24]	; (d70d4 <_ZN5spark10LogManager8instanceEv+0x30>)
   d70bc:	f7ff ffdc 	bl	d7078 <_ZN5spark10LogManagerC1Ev>
   d70c0:	4620      	mov	r0, r4
   d70c2:	f7fc fffe 	bl	d40c2 <__cxa_guard_release>
   d70c6:	4804      	ldr	r0, [pc, #16]	; (d70d8 <_ZN5spark10LogManager8instanceEv+0x34>)
   d70c8:	f001 ffa2 	bl	d9010 <atexit>
    return &mgr;
}
   d70cc:	4801      	ldr	r0, [pc, #4]	; (d70d4 <_ZN5spark10LogManager8instanceEv+0x30>)
   d70ce:	bd10      	pop	{r4, pc}
   d70d0:	2003e598 	.word	0x2003e598
   d70d4:	2003e5a8 	.word	0x2003e5a8
   d70d8:	000d7585 	.word	0x000d7585

000d70dc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d70dc:	4a02      	ldr	r2, [pc, #8]	; (d70e8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d70de:	4903      	ldr	r1, [pc, #12]	; (d70ec <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d70e0:	4803      	ldr	r0, [pc, #12]	; (d70f0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d70e2:	2300      	movs	r3, #0
   d70e4:	f7fe bf4e 	b.w	d5f84 <log_set_callbacks>
   d70e8:	000d740d 	.word	0x000d740d
   d70ec:	000d7399 	.word	0x000d7399
   d70f0:	000d7319 	.word	0x000d7319

000d70f4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d70f4:	2300      	movs	r3, #0
   d70f6:	461a      	mov	r2, r3
   d70f8:	4619      	mov	r1, r3
   d70fa:	4618      	mov	r0, r3
   d70fc:	f7fe bf42 	b.w	d5f84 <log_set_callbacks>

000d7100 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7100:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d7102:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7104:	f851 3b04 	ldr.w	r3, [r1], #4
   d7108:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d710a:	4604      	mov	r4, r0
   d710c:	a801      	add	r0, sp, #4
   d710e:	f7ff f876 	bl	d61fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d7112:	466a      	mov	r2, sp
   d7114:	4629      	mov	r1, r5
   d7116:	4620      	mov	r0, r4
   d7118:	f7ff fd1f 	bl	d6b5a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d711c:	a801      	add	r0, sp, #4
   d711e:	f7fd f8f7 	bl	d4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7122:	4620      	mov	r0, r4
   d7124:	b003      	add	sp, #12
   d7126:	bd30      	pop	{r4, r5, pc}

000d7128 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d7128:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d712a:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d712c:	f851 3b04 	ldr.w	r3, [r1], #4
   d7130:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d7132:	4604      	mov	r4, r0
   d7134:	a801      	add	r0, sp, #4
   d7136:	f7ff f862 	bl	d61fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d713a:	466a      	mov	r2, sp
   d713c:	4629      	mov	r1, r5
   d713e:	4620      	mov	r0, r4
   d7140:	f7ff fd86 	bl	d6c50 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7144:	a801      	add	r0, sp, #4
   d7146:	f7fd f8e3 	bl	d4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d714a:	4620      	mov	r0, r4
   d714c:	b003      	add	sp, #12
   d714e:	bd30      	pop	{r4, r5, pc}

000d7150 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7150:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d7152:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7154:	f851 3b04 	ldr.w	r3, [r1], #4
   d7158:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d715a:	4604      	mov	r4, r0
   d715c:	a801      	add	r0, sp, #4
   d715e:	f7ff f84e 	bl	d61fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d7162:	466a      	mov	r2, sp
   d7164:	4629      	mov	r1, r5
   d7166:	4620      	mov	r0, r4
   d7168:	f7ff fd4e 	bl	d6c08 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d716c:	a801      	add	r0, sp, #4
   d716e:	f7fd f8cf 	bl	d4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7172:	4620      	mov	r0, r4
   d7174:	b003      	add	sp, #12
   d7176:	bd30      	pop	{r4, r5, pc}

000d7178 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d7178:	b570      	push	{r4, r5, r6, lr}
   d717a:	b08a      	sub	sp, #40	; 0x28
   d717c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d717e:	4601      	mov	r1, r0
   d7180:	a804      	add	r0, sp, #16
   d7182:	f7ff ffd1 	bl	d7128 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d7186:	4e14      	ldr	r6, [pc, #80]	; (d71d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d7188:	a804      	add	r0, sp, #16
   d718a:	f7ff fd79 	bl	d6c80 <_ZN5spark18JSONObjectIterator4nextEv>
   d718e:	b1e8      	cbz	r0, d71cc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d7190:	a904      	add	r1, sp, #16
   d7192:	4668      	mov	r0, sp
   d7194:	f7ff ffdc 	bl	d7150 <_ZNK5spark18JSONObjectIterator4nameEv>
   d7198:	9802      	ldr	r0, [sp, #8]
   d719a:	4631      	mov	r1, r6
   d719c:	f7ff fe78 	bl	d6e90 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d71a0:	4604      	mov	r4, r0
   d71a2:	b110      	cbz	r0, d71aa <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d71a4:	1e2c      	subs	r4, r5, #0
   d71a6:	bf18      	it	ne
   d71a8:	2401      	movne	r4, #1
   d71aa:	a801      	add	r0, sp, #4
   d71ac:	f7fd f8b0 	bl	d4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d71b0:	2c00      	cmp	r4, #0
   d71b2:	d0e9      	beq.n	d7188 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d71b4:	a904      	add	r1, sp, #16
   d71b6:	4668      	mov	r0, sp
   d71b8:	f7ff ffa2 	bl	d7100 <_ZNK5spark18JSONObjectIterator5valueEv>
   d71bc:	4668      	mov	r0, sp
   d71be:	f7ff fd02 	bl	d6bc6 <_ZNK5spark9JSONValue5toIntEv>
   d71c2:	6028      	str	r0, [r5, #0]
   d71c4:	a801      	add	r0, sp, #4
   d71c6:	f7fd f8a3 	bl	d4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d71ca:	e7dd      	b.n	d7188 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d71cc:	a805      	add	r0, sp, #20
   d71ce:	f7fd f89f 	bl	d4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d71d2:	b00a      	add	sp, #40	; 0x28
   d71d4:	bd70      	pop	{r4, r5, r6, pc}
   d71d6:	bf00      	nop
   d71d8:	000d98dd 	.word	0x000d98dd

000d71dc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d71dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d71de:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d71e0:	4620      	mov	r0, r4
   d71e2:	4912      	ldr	r1, [pc, #72]	; (d722c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d71e4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d71e6:	f001 ffb8 	bl	d915a <strcmp>
   d71ea:	b948      	cbnz	r0, d7200 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d71ec:	f001 f9b0 	bl	d8550 <_Z16_fetch_usbserialv>
   d71f0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d71f4:	f001 f99c 	bl	d8530 <_ZN9USBSerial5beginEl>
        return &Serial;
   d71f8:	f001 f9aa 	bl	d8550 <_Z16_fetch_usbserialv>
}
   d71fc:	b003      	add	sp, #12
   d71fe:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d7200:	490b      	ldr	r1, [pc, #44]	; (d7230 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d7202:	4620      	mov	r0, r4
   d7204:	f001 ffa9 	bl	d915a <strcmp>
   d7208:	b970      	cbnz	r0, d7228 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d720a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d720e:	a901      	add	r1, sp, #4
   d7210:	4628      	mov	r0, r5
        int baud = 9600;
   d7212:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d7214:	f7ff ffb0 	bl	d7178 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d7218:	f001 f912 	bl	d8440 <_Z22__fetch_global_Serial1v>
   d721c:	9901      	ldr	r1, [sp, #4]
   d721e:	f001 f909 	bl	d8434 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d7222:	f001 f90d 	bl	d8440 <_Z22__fetch_global_Serial1v>
   d7226:	e7e9      	b.n	d71fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d7228:	2000      	movs	r0, #0
   d722a:	e7e7      	b.n	d71fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d722c:	000d98e2 	.word	0x000d98e2
   d7230:	000d98e9 	.word	0x000d98e9

000d7234 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7234:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7236:	e9d0 5300 	ldrd	r5, r3, [r0]
   d723a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d723c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d723e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d7242:	42ae      	cmp	r6, r5
   d7244:	d005      	beq.n	d7252 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d7246:	f105 0008 	add.w	r0, r5, #8
   d724a:	f7ff fff3 	bl	d7234 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d724e:	3514      	adds	r5, #20
   d7250:	e7f7      	b.n	d7242 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d7252:	6820      	ldr	r0, [r4, #0]
   d7254:	f7fe ff84 	bl	d6160 <free>
}
   d7258:	4620      	mov	r0, r4
   d725a:	bd70      	pop	{r4, r5, r6, pc}

000d725c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d725c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d725e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7262:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d7264:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d7268:	42ae      	cmp	r6, r5
   d726a:	d004      	beq.n	d7276 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d726c:	4628      	mov	r0, r5
   d726e:	f000 ffa5 	bl	d81bc <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d7272:	3510      	adds	r5, #16
   d7274:	e7f8      	b.n	d7268 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d7276:	6820      	ldr	r0, [r4, #0]
   d7278:	f7fe ff72 	bl	d6160 <free>
}
   d727c:	4620      	mov	r0, r4
   d727e:	bd70      	pop	{r4, r5, r6, pc}

000d7280 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d7280:	b510      	push	{r4, lr}
   d7282:	4604      	mov	r4, r0
   d7284:	300c      	adds	r0, #12
   d7286:	f7ff ffd5 	bl	d7234 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d728a:	4620      	mov	r0, r4
   d728c:	f7ff ffe6 	bl	d725c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d7290:	4620      	mov	r0, r4
   d7292:	bd10      	pop	{r4, pc}

000d7294 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d7294:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d7296:	4b04      	ldr	r3, [pc, #16]	; (d72a8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d7298:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d729a:	f840 3b04 	str.w	r3, [r0], #4
   d729e:	f7ff ffef 	bl	d7280 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d72a2:	4620      	mov	r0, r4
   d72a4:	bd10      	pop	{r4, pc}
   d72a6:	bf00      	nop
   d72a8:	000d9550 	.word	0x000d9550

000d72ac <_ZN5spark16StreamLogHandlerD0Ev>:
   d72ac:	b510      	push	{r4, lr}
   d72ae:	4604      	mov	r4, r0
   d72b0:	f7ff fff0 	bl	d7294 <_ZN5spark16StreamLogHandlerD1Ev>
   d72b4:	4620      	mov	r0, r4
   d72b6:	2124      	movs	r1, #36	; 0x24
   d72b8:	f001 fab2 	bl	d8820 <_ZdlPvj>
   d72bc:	4620      	mov	r0, r4
   d72be:	bd10      	pop	{r4, pc}

000d72c0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d72c0:	b510      	push	{r4, lr}
   d72c2:	4b03      	ldr	r3, [pc, #12]	; (d72d0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d72c4:	6003      	str	r3, [r0, #0]
   d72c6:	4604      	mov	r4, r0
   d72c8:	f7ff ffe4 	bl	d7294 <_ZN5spark16StreamLogHandlerD1Ev>
   d72cc:	4620      	mov	r0, r4
   d72ce:	bd10      	pop	{r4, pc}
   d72d0:	000d9988 	.word	0x000d9988

000d72d4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d72d4:	b510      	push	{r4, lr}
   d72d6:	4604      	mov	r4, r0
   d72d8:	f7ff fff2 	bl	d72c0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d72dc:	4620      	mov	r0, r4
   d72de:	2124      	movs	r1, #36	; 0x24
   d72e0:	f001 fa9e 	bl	d8820 <_ZdlPvj>
   d72e4:	4620      	mov	r0, r4
   d72e6:	bd10      	pop	{r4, pc}

000d72e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d72e8:	2200      	movs	r2, #0
   d72ea:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d72ee:	b510      	push	{r4, lr}
        capacity_(0) {
   d72f0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d72f2:	680c      	ldr	r4, [r1, #0]
   d72f4:	6004      	str	r4, [r0, #0]
   d72f6:	684c      	ldr	r4, [r1, #4]
   d72f8:	6044      	str	r4, [r0, #4]
   d72fa:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d72fc:	600a      	str	r2, [r1, #0]
   d72fe:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7300:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7302:	608a      	str	r2, [r1, #8]
}
   d7304:	bd10      	pop	{r4, pc}

000d7306 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7306:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d7308:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d730a:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d730c:	6818      	ldr	r0, [r3, #0]
   d730e:	f7fe fc91 	bl	d5c34 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d7312:	4620      	mov	r0, r4
   d7314:	bd10      	pop	{r4, pc}
	...

000d7318 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d7318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d731c:	b087      	sub	sp, #28
   d731e:	4680      	mov	r8, r0
   d7320:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d7322:	4b1c      	ldr	r3, [pc, #112]	; (d7394 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d7324:	685b      	ldr	r3, [r3, #4]
   d7326:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d732a:	4689      	mov	r9, r1
   d732c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d732e:	b96b      	cbnz	r3, d734c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d7330:	f7ff feb8 	bl	d70a4 <_ZN5spark10LogManager8instanceEv>
   d7334:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d7336:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d733a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d733c:	9305      	str	r3, [sp, #20]
   d733e:	f7fe fc71 	bl	d5c24 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d7342:	7b23      	ldrb	r3, [r4, #12]
   d7344:	b12b      	cbz	r3, d7352 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d7346:	a805      	add	r0, sp, #20
   d7348:	f7ff ffdd 	bl	d7306 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d734c:	b007      	add	sp, #28
   d734e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d7352:	2301      	movs	r3, #1
   d7354:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d7356:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d735a:	fa5f f989 	uxtb.w	r9, r9
   d735e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d7362:	45aa      	cmp	sl, r5
   d7364:	d012      	beq.n	d738c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d7366:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d736a:	4631      	mov	r1, r6
   d736c:	1d38      	adds	r0, r7, #4
   d736e:	f7ff fe25 	bl	d6fbc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d7372:	4581      	cmp	r9, r0
   d7374:	d3f5      	bcc.n	d7362 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d7376:	683b      	ldr	r3, [r7, #0]
   d7378:	9a03      	ldr	r2, [sp, #12]
   d737a:	9200      	str	r2, [sp, #0]
   d737c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d7380:	464a      	mov	r2, r9
   d7382:	4633      	mov	r3, r6
   d7384:	4641      	mov	r1, r8
   d7386:	4638      	mov	r0, r7
   d7388:	47d8      	blx	fp
   d738a:	e7ea      	b.n	d7362 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d738c:	2300      	movs	r3, #0
   d738e:	7323      	strb	r3, [r4, #12]
   d7390:	e7d9      	b.n	d7346 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d7392:	bf00      	nop
   d7394:	e000ed00 	.word	0xe000ed00

000d7398 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d7398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d739c:	469b      	mov	fp, r3
   d739e:	4b1a      	ldr	r3, [pc, #104]	; (d7408 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d73a0:	685b      	ldr	r3, [r3, #4]
   d73a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d73a6:	4680      	mov	r8, r0
   d73a8:	4689      	mov	r9, r1
   d73aa:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d73ac:	b96b      	cbnz	r3, d73ca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d73ae:	f7ff fe79 	bl	d70a4 <_ZN5spark10LogManager8instanceEv>
   d73b2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d73b4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d73b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d73ba:	9301      	str	r3, [sp, #4]
   d73bc:	f7fe fc32 	bl	d5c24 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d73c0:	7b23      	ldrb	r3, [r4, #12]
   d73c2:	b12b      	cbz	r3, d73d0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d73c4:	a801      	add	r0, sp, #4
   d73c6:	f7ff ff9e 	bl	d7306 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d73ca:	b003      	add	sp, #12
   d73cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d73d0:	2301      	movs	r3, #1
   d73d2:	7323      	strb	r3, [r4, #12]
   d73d4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d73d8:	b2f6      	uxtb	r6, r6
   d73da:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d73de:	4555      	cmp	r5, sl
   d73e0:	d00e      	beq.n	d7400 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d73e2:	f855 7b04 	ldr.w	r7, [r5], #4
   d73e6:	4659      	mov	r1, fp
   d73e8:	1d38      	adds	r0, r7, #4
   d73ea:	f7ff fde7 	bl	d6fbc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d73ee:	4286      	cmp	r6, r0
   d73f0:	d3f5      	bcc.n	d73de <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d73f2:	683b      	ldr	r3, [r7, #0]
   d73f4:	464a      	mov	r2, r9
   d73f6:	68db      	ldr	r3, [r3, #12]
   d73f8:	4641      	mov	r1, r8
   d73fa:	4638      	mov	r0, r7
   d73fc:	4798      	blx	r3
   d73fe:	e7ee      	b.n	d73de <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d7400:	2300      	movs	r3, #0
   d7402:	7323      	strb	r3, [r4, #12]
   d7404:	e7de      	b.n	d73c4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d7406:	bf00      	nop
   d7408:	e000ed00 	.word	0xe000ed00

000d740c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d740c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7410:	4b16      	ldr	r3, [pc, #88]	; (d746c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d7412:	685b      	ldr	r3, [r3, #4]
   d7414:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d7418:	4605      	mov	r5, r0
   d741a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d741c:	bb1b      	cbnz	r3, d7466 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d741e:	f7ff fe41 	bl	d70a4 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d7422:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d7426:	4604      	mov	r4, r0
   d7428:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d742a:	9301      	str	r3, [sp, #4]
   d742c:	f7fe fbfa 	bl	d5c24 <os_mutex_recursive_lock>
   d7430:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d7434:	2446      	movs	r4, #70	; 0x46
   d7436:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d743a:	45b0      	cmp	r8, r6
   d743c:	d109      	bne.n	d7452 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d743e:	a801      	add	r0, sp, #4
   d7440:	f7ff ff61 	bl	d7306 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d7444:	42a5      	cmp	r5, r4
   d7446:	bfb4      	ite	lt
   d7448:	2000      	movlt	r0, #0
   d744a:	2001      	movge	r0, #1
}
   d744c:	b002      	add	sp, #8
   d744e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d7452:	f856 0b04 	ldr.w	r0, [r6], #4
   d7456:	4639      	mov	r1, r7
   d7458:	3004      	adds	r0, #4
   d745a:	f7ff fdaf 	bl	d6fbc <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d745e:	4284      	cmp	r4, r0
   d7460:	bfa8      	it	ge
   d7462:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d7464:	e7e9      	b.n	d743a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d7466:	2000      	movs	r0, #0
   d7468:	e7f0      	b.n	d744c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d746a:	bf00      	nop
   d746c:	e000ed00 	.word	0xe000ed00

000d7470 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7470:	b570      	push	{r4, r5, r6, lr}
   d7472:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d7474:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7478:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d747a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d747e:	4282      	cmp	r2, r0
   d7480:	d007      	beq.n	d7492 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d7482:	4601      	mov	r1, r0
            if (*p == value) {
   d7484:	681d      	ldr	r5, [r3, #0]
   d7486:	f851 6b04 	ldr.w	r6, [r1], #4
   d748a:	42ae      	cmp	r6, r5
   d748c:	d003      	beq.n	d7496 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d748e:	4608      	mov	r0, r1
   d7490:	e7f5      	b.n	d747e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d7492:	2000      	movs	r0, #0
}
   d7494:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7496:	1a52      	subs	r2, r2, r1
   d7498:	f001 fdce 	bl	d9038 <memmove>
    --size_;
   d749c:	6863      	ldr	r3, [r4, #4]
   d749e:	3b01      	subs	r3, #1
   d74a0:	6063      	str	r3, [r4, #4]
    return true;
   d74a2:	2001      	movs	r0, #1
   d74a4:	e7f6      	b.n	d7494 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d74a6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d74a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d74a8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d74ac:	4604      	mov	r4, r0
   d74ae:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d74b0:	9101      	str	r1, [sp, #4]
   d74b2:	9303      	str	r3, [sp, #12]
   d74b4:	f7fe fbb6 	bl	d5c24 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d74b8:	a901      	add	r1, sp, #4
   d74ba:	4620      	mov	r0, r4
   d74bc:	f7ff ffd8 	bl	d7470 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d74c0:	b118      	cbz	r0, d74ca <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d74c2:	6863      	ldr	r3, [r4, #4]
   d74c4:	b90b      	cbnz	r3, d74ca <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d74c6:	f7ff fe15 	bl	d70f4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d74ca:	a803      	add	r0, sp, #12
   d74cc:	f7ff ff1b 	bl	d7306 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d74d0:	b004      	add	sp, #16
   d74d2:	bd10      	pop	{r4, pc}

000d74d4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d74d4:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d74d6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d74da:	2318      	movs	r3, #24
   d74dc:	4604      	mov	r4, r0
   d74de:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d74e2:	42ae      	cmp	r6, r5
   d74e4:	d015      	beq.n	d7512 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d74e6:	f105 0110 	add.w	r1, r5, #16
   d74ea:	4620      	mov	r0, r4
   d74ec:	f7ff ffc0 	bl	d7470 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d74f0:	6863      	ldr	r3, [r4, #4]
   d74f2:	b90b      	cbnz	r3, d74f8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d74f4:	f7ff fdfe 	bl	d70f4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d74f8:	69e0      	ldr	r0, [r4, #28]
   d74fa:	6929      	ldr	r1, [r5, #16]
   d74fc:	6803      	ldr	r3, [r0, #0]
   d74fe:	68db      	ldr	r3, [r3, #12]
   d7500:	4798      	blx	r3
        if (h.stream) {
   d7502:	6969      	ldr	r1, [r5, #20]
   d7504:	b119      	cbz	r1, d750e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d7506:	6a20      	ldr	r0, [r4, #32]
   d7508:	6803      	ldr	r3, [r0, #0]
   d750a:	68db      	ldr	r3, [r3, #12]
   d750c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d750e:	3518      	adds	r5, #24
   d7510:	e7e7      	b.n	d74e2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d7512:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d7516:	2618      	movs	r6, #24
   d7518:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d751c:	42ae      	cmp	r6, r5
   d751e:	d004      	beq.n	d752a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d7520:	4628      	mov	r0, r5
   d7522:	f000 fe4b 	bl	d81bc <_ZN6StringD1Ev>
   d7526:	3518      	adds	r5, #24
   d7528:	e7f8      	b.n	d751c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d752a:	2300      	movs	r3, #0
   d752c:	6163      	str	r3, [r4, #20]
}
   d752e:	bd70      	pop	{r4, r5, r6, pc}

000d7530 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d7530:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7532:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d7534:	f7ff fdde 	bl	d70f4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7538:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d753c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d753e:	9301      	str	r3, [sp, #4]
   d7540:	f7fe fb70 	bl	d5c24 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d7544:	4620      	mov	r0, r4
   d7546:	f7ff ffc5 	bl	d74d4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d754a:	a801      	add	r0, sp, #4
   d754c:	f7ff fedb 	bl	d7306 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d7550:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7552:	b108      	cbz	r0, d7558 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d7554:	f7fe fb5e 	bl	d5c14 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d7558:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d755c:	2618      	movs	r6, #24
   d755e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d7562:	42ae      	cmp	r6, r5
   d7564:	d004      	beq.n	d7570 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d7566:	4628      	mov	r0, r5
   d7568:	f000 fe28 	bl	d81bc <_ZN6StringD1Ev>
   d756c:	3518      	adds	r5, #24
   d756e:	e7f8      	b.n	d7562 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d7570:	6920      	ldr	r0, [r4, #16]
   d7572:	f7fe fdf5 	bl	d6160 <free>
   d7576:	6820      	ldr	r0, [r4, #0]
   d7578:	f7fe fdf2 	bl	d6160 <free>
}
   d757c:	4620      	mov	r0, r4
   d757e:	b002      	add	sp, #8
   d7580:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7584 <__tcf_2>:
    static LogManager mgr;
   d7584:	4801      	ldr	r0, [pc, #4]	; (d758c <__tcf_2+0x8>)
   d7586:	f7ff bfd3 	b.w	d7530 <_ZN5spark10LogManagerD1Ev>
   d758a:	bf00      	nop
   d758c:	2003e5a8 	.word	0x2003e5a8

000d7590 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d7590:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7594:	4606      	mov	r6, r0
   d7596:	460c      	mov	r4, r1
   d7598:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d759a:	d927      	bls.n	d75ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d759c:	4290      	cmp	r0, r2
   d759e:	d226      	bcs.n	d75ee <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d75a0:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d75a4:	1a6c      	subs	r4, r5, r1
   d75a6:	f1a1 0714 	sub.w	r7, r1, #20
   d75aa:	4404      	add	r4, r0
        capacity_(0) {
   d75ac:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d75ae:	42af      	cmp	r7, r5
   d75b0:	d03d      	beq.n	d762e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d75b2:	b1a4      	cbz	r4, d75de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d75b4:	682b      	ldr	r3, [r5, #0]
   d75b6:	6023      	str	r3, [r4, #0]
   d75b8:	88ab      	ldrh	r3, [r5, #4]
   d75ba:	80a3      	strh	r3, [r4, #4]
   d75bc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d75c0:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d75c2:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d75c6:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d75c8:	68ab      	ldr	r3, [r5, #8]
   d75ca:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d75cc:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d75ce:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d75d0:	68ea      	ldr	r2, [r5, #12]
   d75d2:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d75d4:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d75d6:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d75d8:	692a      	ldr	r2, [r5, #16]
   d75da:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d75dc:	612b      	str	r3, [r5, #16]
   d75de:	f105 0008 	add.w	r0, r5, #8
   d75e2:	f7ff fe27 	bl	d7234 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d75e6:	3d14      	subs	r5, #20
   d75e8:	3c14      	subs	r4, #20
   d75ea:	e7e0      	b.n	d75ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d75ec:	d01f      	beq.n	d762e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d75ee:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d75f0:	42ac      	cmp	r4, r5
   d75f2:	d01c      	beq.n	d762e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d75f4:	b1a6      	cbz	r6, d7620 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d75f6:	6823      	ldr	r3, [r4, #0]
   d75f8:	6033      	str	r3, [r6, #0]
   d75fa:	88a3      	ldrh	r3, [r4, #4]
   d75fc:	80b3      	strh	r3, [r6, #4]
   d75fe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d7602:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d7604:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d7608:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d760a:	68a3      	ldr	r3, [r4, #8]
   d760c:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d760e:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7610:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7612:	68e2      	ldr	r2, [r4, #12]
   d7614:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7616:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7618:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d761a:	6922      	ldr	r2, [r4, #16]
   d761c:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d761e:	6123      	str	r3, [r4, #16]
   d7620:	f104 0008 	add.w	r0, r4, #8
   d7624:	f7ff fe06 	bl	d7234 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d7628:	3414      	adds	r4, #20
   d762a:	3614      	adds	r6, #20
   d762c:	e7e0      	b.n	d75f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d762e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7630 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7632:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d7636:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7638:	4604      	mov	r4, r0
   d763a:	460e      	mov	r6, r1
   d763c:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d763e:	db0d      	blt.n	d765c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d7640:	3501      	adds	r5, #1
        if (n > 0) {
   d7642:	2d00      	cmp	r5, #0
   d7644:	6800      	ldr	r0, [r0, #0]
   d7646:	dd04      	ble.n	d7652 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d7648:	00a9      	lsls	r1, r5, #2
   d764a:	f7fe fd91 	bl	d6170 <realloc>
            if (!d) {
   d764e:	b918      	cbnz	r0, d7658 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d7650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d7652:	f7fe fd85 	bl	d6160 <free>
        T* d = nullptr;
   d7656:	2000      	movs	r0, #0
        data_ = d;
   d7658:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d765a:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d765c:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d765e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d7660:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d7664:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7666:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d766a:	1d08      	adds	r0, r1, #4
   d766c:	f001 fce4 	bl	d9038 <memmove>
    new(p) T(std::move(value));
   d7670:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d7674:	6863      	ldr	r3, [r4, #4]
   d7676:	3301      	adds	r3, #1
   d7678:	6063      	str	r3, [r4, #4]
    return true;
   d767a:	2001      	movs	r0, #1
   d767c:	e7e8      	b.n	d7650 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d767e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d767e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d7680:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d7684:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d7686:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7688:	9301      	str	r3, [sp, #4]
   d768a:	460d      	mov	r5, r1
   d768c:	f7fe faca 	bl	d5c24 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d7690:	e9d4 3100 	ldrd	r3, r1, [r4]
   d7694:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d7698:	4283      	cmp	r3, r0
   d769a:	461a      	mov	r2, r3
   d769c:	d00b      	beq.n	d76b6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d769e:	6812      	ldr	r2, [r2, #0]
   d76a0:	42aa      	cmp	r2, r5
   d76a2:	f103 0304 	add.w	r3, r3, #4
   d76a6:	d1f7      	bne.n	d7698 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d76a8:	a801      	add	r0, sp, #4
   d76aa:	f7ff fe2c 	bl	d7306 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d76ae:	2500      	movs	r5, #0
}
   d76b0:	4628      	mov	r0, r5
   d76b2:	b003      	add	sp, #12
   d76b4:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d76b6:	462a      	mov	r2, r5
   d76b8:	4620      	mov	r0, r4
   d76ba:	f7ff ffb9 	bl	d7630 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d76be:	4605      	mov	r5, r0
   d76c0:	2800      	cmp	r0, #0
   d76c2:	d0f1      	beq.n	d76a8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d76c4:	6863      	ldr	r3, [r4, #4]
   d76c6:	2b01      	cmp	r3, #1
   d76c8:	d101      	bne.n	d76ce <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d76ca:	f7ff fd07 	bl	d70dc <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d76ce:	a801      	add	r0, sp, #4
   d76d0:	f7ff fe19 	bl	d7306 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d76d4:	e7ec      	b.n	d76b0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d76d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d76d6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d76d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d76da:	4604      	mov	r4, r0
   d76dc:	460d      	mov	r5, r1
   d76de:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d76e0:	d914      	bls.n	d770c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d76e2:	4290      	cmp	r0, r2
   d76e4:	d213      	bcs.n	d770e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d76e6:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d76ea:	1a75      	subs	r5, r6, r1
   d76ec:	f1a1 0710 	sub.w	r7, r1, #16
   d76f0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d76f2:	42b7      	cmp	r7, r6
   d76f4:	d018      	beq.n	d7728 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d76f6:	b11c      	cbz	r4, d7700 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d76f8:	4631      	mov	r1, r6
   d76fa:	4620      	mov	r0, r4
   d76fc:	f000 fdc6 	bl	d828c <_ZN6StringC1EOS_>
                end->~T();
   d7700:	4630      	mov	r0, r6
   d7702:	f000 fd5b 	bl	d81bc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d7706:	3e10      	subs	r6, #16
   d7708:	3c10      	subs	r4, #16
   d770a:	e7f2      	b.n	d76f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d770c:	d00c      	beq.n	d7728 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d770e:	42b5      	cmp	r5, r6
   d7710:	d00a      	beq.n	d7728 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d7712:	b11c      	cbz	r4, d771c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d7714:	4629      	mov	r1, r5
   d7716:	4620      	mov	r0, r4
   d7718:	f000 fdb8 	bl	d828c <_ZN6StringC1EOS_>
                p->~T();
   d771c:	4628      	mov	r0, r5
   d771e:	f000 fd4d 	bl	d81bc <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d7722:	3510      	adds	r5, #16
   d7724:	3410      	adds	r4, #16
   d7726:	e7f2      	b.n	d770e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d7728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d772a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d772a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d772c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d772e:	4605      	mov	r5, r0
        if (n > 0) {
   d7730:	dd11      	ble.n	d7756 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7732:	0130      	lsls	r0, r6, #4
   d7734:	f7fe fd0c 	bl	d6150 <malloc>
            if (!d) {
   d7738:	4604      	mov	r4, r0
   d773a:	b158      	cbz	r0, d7754 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d773c:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7740:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d7744:	f7ff ffc7 	bl	d76d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d7748:	6828      	ldr	r0, [r5, #0]
   d774a:	f7fe fd09 	bl	d6160 <free>
        data_ = d;
   d774e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7750:	60ae      	str	r6, [r5, #8]
        return true;
   d7752:	2001      	movs	r0, #1
    }
   d7754:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d7756:	2400      	movs	r4, #0
   d7758:	e7f6      	b.n	d7748 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d775a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d775a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d775e:	4691      	mov	r9, r2
   d7760:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d7762:	2300      	movs	r3, #0
   d7764:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d7766:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d776a:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d776c:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d776e:	4299      	cmp	r1, r3
        capacity_(0) {
   d7770:	e9c0 3300 	strd	r3, r3, [r0]
   d7774:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d7778:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d777c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7780:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d7782:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d7784:	dc23      	bgt.n	d77ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d7786:	e9d9 5700 	ldrd	r5, r7, [r9]
   d778a:	2314      	movs	r3, #20
   d778c:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d7790:	42af      	cmp	r7, r5
   d7792:	d03b      	beq.n	d780c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d7794:	4629      	mov	r1, r5
   d7796:	a80d      	add	r0, sp, #52	; 0x34
   d7798:	f000 fd78 	bl	d828c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d779c:	a90d      	add	r1, sp, #52	; 0x34
   d779e:	a811      	add	r0, sp, #68	; 0x44
   d77a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d77a2:	f000 fd73 	bl	d828c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d77a6:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d77aa:	4299      	cmp	r1, r3
   d77ac:	da1b      	bge.n	d77e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d77ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d77b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d77b2:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d77b6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d77ba:	4631      	mov	r1, r6
   d77bc:	f106 0010 	add.w	r0, r6, #16
   d77c0:	f7ff ff89 	bl	d76d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d77c4:	b9ee      	cbnz	r6, d7802 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d77c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d77c8:	3301      	adds	r3, #1
   d77ca:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d77cc:	e011      	b.n	d77f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d77ce:	a80a      	add	r0, sp, #40	; 0x28
   d77d0:	f7ff ffab 	bl	d772a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d77d4:	2800      	cmp	r0, #0
   d77d6:	d1d6      	bne.n	d7786 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d77d8:	a80a      	add	r0, sp, #40	; 0x28
   d77da:	f7ff fd3f 	bl	d725c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d77de:	4620      	mov	r0, r4
   d77e0:	b017      	add	sp, #92	; 0x5c
   d77e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d77e6:	3101      	adds	r1, #1
   d77e8:	a80a      	add	r0, sp, #40	; 0x28
   d77ea:	f7ff ff9e 	bl	d772a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d77ee:	2800      	cmp	r0, #0
   d77f0:	d1dd      	bne.n	d77ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d77f2:	a811      	add	r0, sp, #68	; 0x44
   d77f4:	f000 fce2 	bl	d81bc <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d77f8:	a80d      	add	r0, sp, #52	; 0x34
   d77fa:	f000 fcdf 	bl	d81bc <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d77fe:	3514      	adds	r5, #20
   d7800:	e7c6      	b.n	d7790 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d7802:	a911      	add	r1, sp, #68	; 0x44
   d7804:	4630      	mov	r0, r6
   d7806:	f000 fd41 	bl	d828c <_ZN6StringC1EOS_>
   d780a:	e7dc      	b.n	d77c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d780c:	2600      	movs	r6, #0
   d780e:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d7812:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d7814:	4637      	mov	r7, r6
   d7816:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d781a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d781e:	429e      	cmp	r6, r3
   d7820:	f280 8097 	bge.w	d7952 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d7824:	0133      	lsls	r3, r6, #4
   d7826:	58d3      	ldr	r3, [r2, r3]
   d7828:	9308      	str	r3, [sp, #32]
        if (!category) {
   d782a:	b90b      	cbnz	r3, d7830 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d782c:	3601      	adds	r6, #1
   d782e:	e7f4      	b.n	d781a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d7830:	fb0a f306 	mul.w	r3, sl, r6
   d7834:	9709      	str	r7, [sp, #36]	; 0x24
   d7836:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d7838:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d783a:	a909      	add	r1, sp, #36	; 0x24
   d783c:	a808      	add	r0, sp, #32
   d783e:	f7ff fb00 	bl	d6e42 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d7842:	4683      	mov	fp, r0
   d7844:	2800      	cmp	r0, #0
   d7846:	d0f1      	beq.n	d782c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d7848:	4601      	mov	r1, r0
   d784a:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d784c:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d7850:	f10d 031f 	add.w	r3, sp, #31
   d7854:	4628      	mov	r0, r5
   d7856:	f7ff fb73 	bl	d6f40 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d785a:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d785e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7860:	f1b8 0f00 	cmp.w	r8, #0
   d7864:	d166      	bne.n	d7934 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d7866:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d786a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d786e:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d7872:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7876:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d787a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d787e:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7882:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d7886:	4293      	cmp	r3, r2
   d7888:	db1a      	blt.n	d78c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d788a:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d788e:	f1bb 0f00 	cmp.w	fp, #0
   d7892:	dd4a      	ble.n	d792a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d7894:	fb0a f00b 	mul.w	r0, sl, fp
   d7898:	f7fe fc5a 	bl	d6150 <malloc>
            if (!d) {
   d789c:	9004      	str	r0, [sp, #16]
   d789e:	2800      	cmp	r0, #0
   d78a0:	d045      	beq.n	d792e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d78a2:	e9d5 1200 	ldrd	r1, r2, [r5]
   d78a6:	fb0a 1202 	mla	r2, sl, r2, r1
   d78aa:	f7ff fe71 	bl	d7590 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d78ae:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d78b0:	6828      	ldr	r0, [r5, #0]
   d78b2:	9304      	str	r3, [sp, #16]
   d78b4:	f7fe fc54 	bl	d6160 <free>
        data_ = d;
   d78b8:	9b04      	ldr	r3, [sp, #16]
   d78ba:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d78bc:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d78c0:	9b01      	ldr	r3, [sp, #4]
   d78c2:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d78c6:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d78c8:	fb0a f303 	mul.w	r3, sl, r3
   d78cc:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d78d0:	f101 0014 	add.w	r0, r1, #20
   d78d4:	fb0a b202 	mla	r2, sl, r2, fp
   d78d8:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d78da:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d78dc:	f7ff fe58 	bl	d7590 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d78e0:	9904      	ldr	r1, [sp, #16]
   d78e2:	b1a9      	cbz	r1, d7910 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d78e4:	9b05      	ldr	r3, [sp, #20]
   d78e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d78e8:	f84b 2003 	str.w	r2, [fp, r3]
   d78ec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d78f0:	808b      	strh	r3, [r1, #4]
   d78f2:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d78f6:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d78f8:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d78fc:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d78fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7900:	608b      	str	r3, [r1, #8]
   d7902:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d7904:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d7906:	60cb      	str	r3, [r1, #12]
   d7908:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d790a:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d790c:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d790e:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d7910:	686b      	ldr	r3, [r5, #4]
   d7912:	3301      	adds	r3, #1
   d7914:	606b      	str	r3, [r5, #4]
   d7916:	a813      	add	r0, sp, #76	; 0x4c
   d7918:	f7ff fc8c 	bl	d7234 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d791c:	f1b8 0f00 	cmp.w	r8, #0
   d7920:	d008      	beq.n	d7934 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d7922:	a80d      	add	r0, sp, #52	; 0x34
   d7924:	f7ff fc86 	bl	d7234 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7928:	e756      	b.n	d77d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d792a:	4643      	mov	r3, r8
   d792c:	e7c0      	b.n	d78b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d792e:	f04f 0801 	mov.w	r8, #1
   d7932:	e7f0      	b.n	d7916 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d7934:	9b01      	ldr	r3, [sp, #4]
   d7936:	682d      	ldr	r5, [r5, #0]
   d7938:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d793c:	9b08      	ldr	r3, [sp, #32]
   d793e:	781b      	ldrb	r3, [r3, #0]
   d7940:	b92b      	cbnz	r3, d794e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d7942:	f8d9 3000 	ldr.w	r3, [r9]
   d7946:	9a02      	ldr	r2, [sp, #8]
   d7948:	4413      	add	r3, r2
   d794a:	7c1b      	ldrb	r3, [r3, #16]
   d794c:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d794e:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d7950:	e773      	b.n	d783a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7952:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7954:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7956:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7958:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d795a:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d795c:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d795e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d7960:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7962:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7964:	60a2      	str	r2, [r4, #8]
   d7966:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d7968:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d796a:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d796c:	60e2      	str	r2, [r4, #12]
   d796e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d7970:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7972:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7974:	6122      	str	r2, [r4, #16]
   d7976:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d7978:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d797a:	9b03      	ldr	r3, [sp, #12]
   d797c:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d797e:	6162      	str	r2, [r4, #20]
   d7980:	7623      	strb	r3, [r4, #24]
   d7982:	e7ce      	b.n	d7922 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d7984 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7984:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d7986:	4605      	mov	r5, r0
   d7988:	4b09      	ldr	r3, [pc, #36]	; (d79b0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d798a:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d798e:	4604      	mov	r4, r0
   d7990:	460e      	mov	r6, r1
        filter_(level, filters) {
   d7992:	a801      	add	r0, sp, #4
   d7994:	4611      	mov	r1, r2
   d7996:	f7fc fe28 	bl	d45ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d799a:	aa01      	add	r2, sp, #4
   d799c:	4631      	mov	r1, r6
   d799e:	4628      	mov	r0, r5
   d79a0:	f7ff fedb 	bl	d775a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d79a4:	a801      	add	r0, sp, #4
   d79a6:	f7fc fddf 	bl	d4568 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d79aa:	4620      	mov	r0, r4
   d79ac:	b004      	add	sp, #16
   d79ae:	bd70      	pop	{r4, r5, r6, pc}
   d79b0:	000d9550 	.word	0x000d9550

000d79b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d79b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d79b6:	460f      	mov	r7, r1
   d79b8:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d79ba:	4926      	ldr	r1, [pc, #152]	; (d7a54 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d79bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d79be:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d79c0:	4616      	mov	r6, r2
   d79c2:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d79c4:	f001 fbc9 	bl	d915a <strcmp>
   d79c8:	bb00      	cbnz	r0, d7a0c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d79ca:	b1e4      	cbz	r4, d7a06 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d79cc:	4629      	mov	r1, r5
   d79ce:	4668      	mov	r0, sp
   d79d0:	f7ff fc8a 	bl	d72e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d79d4:	4920      	ldr	r1, [pc, #128]	; (d7a58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d79d6:	2024      	movs	r0, #36	; 0x24
   d79d8:	f000 ff24 	bl	d8824 <_ZnwjRKSt9nothrow_t>
   d79dc:	4605      	mov	r5, r0
   d79de:	b170      	cbz	r0, d79fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d79e0:	4669      	mov	r1, sp
   d79e2:	a803      	add	r0, sp, #12
   d79e4:	f7fc fe01 	bl	d45ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d79e8:	aa03      	add	r2, sp, #12
   d79ea:	4631      	mov	r1, r6
   d79ec:	4628      	mov	r0, r5
   d79ee:	f7ff ffc9 	bl	d7984 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d79f2:	a803      	add	r0, sp, #12
   d79f4:	f7fc fdb8 	bl	d4568 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d79f8:	4b18      	ldr	r3, [pc, #96]	; (d7a5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d79fa:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d79fc:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d79fe:	4668      	mov	r0, sp
   d7a00:	f7fc fdb2 	bl	d4568 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7a04:	462c      	mov	r4, r5
}
   d7a06:	4620      	mov	r0, r4
   d7a08:	b007      	add	sp, #28
   d7a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d7a0c:	4914      	ldr	r1, [pc, #80]	; (d7a60 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d7a0e:	4638      	mov	r0, r7
   d7a10:	f001 fba3 	bl	d915a <strcmp>
   d7a14:	b9e0      	cbnz	r0, d7a50 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d7a16:	2c00      	cmp	r4, #0
   d7a18:	d0f5      	beq.n	d7a06 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d7a1a:	4629      	mov	r1, r5
   d7a1c:	4668      	mov	r0, sp
   d7a1e:	f7ff fc63 	bl	d72e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7a22:	490d      	ldr	r1, [pc, #52]	; (d7a58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d7a24:	2024      	movs	r0, #36	; 0x24
   d7a26:	f000 fefd 	bl	d8824 <_ZnwjRKSt9nothrow_t>
   d7a2a:	4605      	mov	r5, r0
   d7a2c:	2800      	cmp	r0, #0
   d7a2e:	d0e6      	beq.n	d79fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d7a30:	4669      	mov	r1, sp
   d7a32:	a803      	add	r0, sp, #12
   d7a34:	f7fc fdd9 	bl	d45ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7a38:	aa03      	add	r2, sp, #12
   d7a3a:	4631      	mov	r1, r6
   d7a3c:	4628      	mov	r0, r5
   d7a3e:	f7ff ffa1 	bl	d7984 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7a42:	a803      	add	r0, sp, #12
   d7a44:	f7fc fd90 	bl	d4568 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7a48:	4b06      	ldr	r3, [pc, #24]	; (d7a64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d7a4a:	602b      	str	r3, [r5, #0]
   d7a4c:	622c      	str	r4, [r5, #32]
}
   d7a4e:	e7d6      	b.n	d79fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d7a50:	2400      	movs	r4, #0
   d7a52:	e7d8      	b.n	d7a06 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d7a54:	000d98f1 	.word	0x000d98f1
   d7a58:	000d9a88 	.word	0x000d9a88
   d7a5c:	000d9988 	.word	0x000d9988
   d7a60:	000d98f5 	.word	0x000d98f5
   d7a64:	000d9970 	.word	0x000d9970

000d7a68 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d7a68:	4b01      	ldr	r3, [pc, #4]	; (d7a70 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7a6a:	4a02      	ldr	r2, [pc, #8]	; (d7a74 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7a6c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7a6e:	4770      	bx	lr
   d7a70:	2003e5a4 	.word	0x2003e5a4
   d7a74:	000d9906 	.word	0x000d9906

000d7a78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7a7c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d7a7e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7a82:	4604      	mov	r4, r0
   d7a84:	460e      	mov	r6, r1
   d7a86:	4617      	mov	r7, r2
   d7a88:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d7a8a:	f000 fd61 	bl	d8550 <_Z16_fetch_usbserialv>
   d7a8e:	4581      	cmp	r9, r0
   d7a90:	d04c      	beq.n	d7b2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d7a92:	792b      	ldrb	r3, [r5, #4]
   d7a94:	0719      	lsls	r1, r3, #28
   d7a96:	d504      	bpl.n	d7aa2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d7a98:	696a      	ldr	r2, [r5, #20]
   d7a9a:	4954      	ldr	r1, [pc, #336]	; (d7bec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d7a9c:	4620      	mov	r0, r4
   d7a9e:	f7ff fa40 	bl	d6f22 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d7aa2:	f1b8 0f00 	cmp.w	r8, #0
   d7aa6:	d00d      	beq.n	d7ac4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d7aa8:	215b      	movs	r1, #91	; 0x5b
   d7aaa:	4620      	mov	r0, r4
   d7aac:	f7ff fa2d 	bl	d6f0a <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d7ab0:	4641      	mov	r1, r8
   d7ab2:	4620      	mov	r0, r4
   d7ab4:	f7ff fa1a 	bl	d6eec <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d7ab8:	6823      	ldr	r3, [r4, #0]
   d7aba:	494d      	ldr	r1, [pc, #308]	; (d7bf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d7abc:	68db      	ldr	r3, [r3, #12]
   d7abe:	2202      	movs	r2, #2
   d7ac0:	4620      	mov	r0, r4
   d7ac2:	4798      	blx	r3
    if (attr.has_file) {
   d7ac4:	792b      	ldrb	r3, [r5, #4]
   d7ac6:	07da      	lsls	r2, r3, #31
   d7ac8:	d523      	bpl.n	d7b12 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d7aca:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d7ace:	212f      	movs	r1, #47	; 0x2f
   d7ad0:	4640      	mov	r0, r8
   d7ad2:	f001 fb8c 	bl	d91ee <strrchr>
    if (s1) {
   d7ad6:	b108      	cbz	r0, d7adc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d7ad8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d7adc:	4641      	mov	r1, r8
   d7ade:	4620      	mov	r0, r4
   d7ae0:	f7ff fa04 	bl	d6eec <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d7ae4:	792b      	ldrb	r3, [r5, #4]
   d7ae6:	079b      	lsls	r3, r3, #30
   d7ae8:	d508      	bpl.n	d7afc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d7aea:	213a      	movs	r1, #58	; 0x3a
   d7aec:	4620      	mov	r0, r4
   d7aee:	f7ff fa0c 	bl	d6f0a <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d7af2:	68ea      	ldr	r2, [r5, #12]
   d7af4:	493f      	ldr	r1, [pc, #252]	; (d7bf4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d7af6:	4620      	mov	r0, r4
   d7af8:	f7ff fa13 	bl	d6f22 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d7afc:	792a      	ldrb	r2, [r5, #4]
   d7afe:	6823      	ldr	r3, [r4, #0]
   d7b00:	f012 0f04 	tst.w	r2, #4
   d7b04:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d7b06:	bf14      	ite	ne
   d7b08:	493b      	ldrne	r1, [pc, #236]	; (d7bf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d7b0a:	493c      	ldreq	r1, [pc, #240]	; (d7bfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d7b0c:	2202      	movs	r2, #2
            write(": ", 2);
   d7b0e:	4620      	mov	r0, r4
   d7b10:	4798      	blx	r3
    if (attr.has_function) {
   d7b12:	792b      	ldrb	r3, [r5, #4]
   d7b14:	0758      	lsls	r0, r3, #29
   d7b16:	d51d      	bpl.n	d7b54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7b18:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d7b1a:	460b      	mov	r3, r1
   d7b1c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d7b1e:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7b22:	b160      	cbz	r0, d7b3e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d7b24:	2820      	cmp	r0, #32
   d7b26:	d108      	bne.n	d7b3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d7b28:	4619      	mov	r1, r3
   d7b2a:	e7f7      	b.n	d7b1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d7b2c:	4834      	ldr	r0, [pc, #208]	; (d7c00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d7b2e:	f000 f966 	bl	d7dfe <_ZN5spark12NetworkClass9listeningEv>
   d7b32:	2800      	cmp	r0, #0
   d7b34:	d0ad      	beq.n	d7a92 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d7b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d7b3a:	2828      	cmp	r0, #40	; 0x28
   d7b3c:	d1ee      	bne.n	d7b1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d7b3e:	6823      	ldr	r3, [r4, #0]
   d7b40:	1a52      	subs	r2, r2, r1
   d7b42:	68db      	ldr	r3, [r3, #12]
   d7b44:	4620      	mov	r0, r4
   d7b46:	4798      	blx	r3
        write("(): ", 4);
   d7b48:	6823      	ldr	r3, [r4, #0]
   d7b4a:	492e      	ldr	r1, [pc, #184]	; (d7c04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d7b4c:	68db      	ldr	r3, [r3, #12]
   d7b4e:	2204      	movs	r2, #4
   d7b50:	4620      	mov	r0, r4
   d7b52:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d7b54:	2100      	movs	r1, #0
   d7b56:	4638      	mov	r0, r7
   d7b58:	f7fe fa0c 	bl	d5f74 <log_level_name>
   d7b5c:	4601      	mov	r1, r0
    write(s);
   d7b5e:	4620      	mov	r0, r4
   d7b60:	f7ff f9c4 	bl	d6eec <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d7b64:	6823      	ldr	r3, [r4, #0]
   d7b66:	4925      	ldr	r1, [pc, #148]	; (d7bfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d7b68:	68db      	ldr	r3, [r3, #12]
   d7b6a:	2202      	movs	r2, #2
   d7b6c:	4620      	mov	r0, r4
   d7b6e:	4798      	blx	r3
    if (msg) {
   d7b70:	b11e      	cbz	r6, d7b7a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d7b72:	4631      	mov	r1, r6
   d7b74:	4620      	mov	r0, r4
   d7b76:	f7ff f9b9 	bl	d6eec <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d7b7a:	792b      	ldrb	r3, [r5, #4]
   d7b7c:	f013 0f30 	tst.w	r3, #48	; 0x30
   d7b80:	d02c      	beq.n	d7bdc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d7b82:	6823      	ldr	r3, [r4, #0]
   d7b84:	4920      	ldr	r1, [pc, #128]	; (d7c08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d7b86:	68db      	ldr	r3, [r3, #12]
   d7b88:	2202      	movs	r2, #2
   d7b8a:	4620      	mov	r0, r4
   d7b8c:	4798      	blx	r3
        if (attr.has_code) {
   d7b8e:	792b      	ldrb	r3, [r5, #4]
   d7b90:	06d9      	lsls	r1, r3, #27
   d7b92:	d50a      	bpl.n	d7baa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d7b94:	6823      	ldr	r3, [r4, #0]
   d7b96:	491d      	ldr	r1, [pc, #116]	; (d7c0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7b98:	68db      	ldr	r3, [r3, #12]
   d7b9a:	2207      	movs	r2, #7
   d7b9c:	4620      	mov	r0, r4
   d7b9e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d7ba0:	69aa      	ldr	r2, [r5, #24]
   d7ba2:	491b      	ldr	r1, [pc, #108]	; (d7c10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d7ba4:	4620      	mov	r0, r4
   d7ba6:	f7ff f9bc 	bl	d6f22 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d7baa:	792b      	ldrb	r3, [r5, #4]
   d7bac:	069a      	lsls	r2, r3, #26
   d7bae:	d511      	bpl.n	d7bd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d7bb0:	06db      	lsls	r3, r3, #27
   d7bb2:	d505      	bpl.n	d7bc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d7bb4:	6823      	ldr	r3, [r4, #0]
   d7bb6:	4910      	ldr	r1, [pc, #64]	; (d7bf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d7bb8:	68db      	ldr	r3, [r3, #12]
   d7bba:	2202      	movs	r2, #2
   d7bbc:	4620      	mov	r0, r4
   d7bbe:	4798      	blx	r3
            write("details = ", 10);
   d7bc0:	6823      	ldr	r3, [r4, #0]
   d7bc2:	4914      	ldr	r1, [pc, #80]	; (d7c14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d7bc4:	68db      	ldr	r3, [r3, #12]
   d7bc6:	4620      	mov	r0, r4
   d7bc8:	220a      	movs	r2, #10
   d7bca:	4798      	blx	r3
            write(attr.details);
   d7bcc:	69e9      	ldr	r1, [r5, #28]
   d7bce:	4620      	mov	r0, r4
   d7bd0:	f7ff f98c 	bl	d6eec <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d7bd4:	215d      	movs	r1, #93	; 0x5d
   d7bd6:	4620      	mov	r0, r4
   d7bd8:	f7ff f997 	bl	d6f0a <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d7bdc:	6823      	ldr	r3, [r4, #0]
   d7bde:	490e      	ldr	r1, [pc, #56]	; (d7c18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d7be0:	68db      	ldr	r3, [r3, #12]
   d7be2:	4620      	mov	r0, r4
   d7be4:	2202      	movs	r2, #2
}
   d7be6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d7bea:	4718      	bx	r3
   d7bec:	000d990a 	.word	0x000d990a
   d7bf0:	000d9911 	.word	0x000d9911
   d7bf4:	000d946a 	.word	0x000d946a
   d7bf8:	000d9914 	.word	0x000d9914
   d7bfc:	000d9919 	.word	0x000d9919
   d7c00:	2003e5d0 	.word	0x2003e5d0
   d7c04:	000d9917 	.word	0x000d9917
   d7c08:	000d991c 	.word	0x000d991c
   d7c0c:	000d991f 	.word	0x000d991f
   d7c10:	000d9927 	.word	0x000d9927
   d7c14:	000d992a 	.word	0x000d992a
   d7c18:	000d9935 	.word	0x000d9935

000d7c1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7c20:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d7c22:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7c26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7c28:	4605      	mov	r5, r0
   d7c2a:	460f      	mov	r7, r1
   d7c2c:	4690      	mov	r8, r2
   d7c2e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d7c30:	f000 fc8e 	bl	d8550 <_Z16_fetch_usbserialv>
   d7c34:	4581      	cmp	r9, r0
   d7c36:	d105      	bne.n	d7c44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7c38:	4849      	ldr	r0, [pc, #292]	; (d7d60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d7c3a:	f000 f8e0 	bl	d7dfe <_ZN5spark12NetworkClass9listeningEv>
   d7c3e:	2800      	cmp	r0, #0
   d7c40:	f040 808a 	bne.w	d7d58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d7c44:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d7c46:	4a47      	ldr	r2, [pc, #284]	; (d7d64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d7c48:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d7c4a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d7c4e:	a801      	add	r0, sp, #4
        strm_(stream) {
   d7c50:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d7c52:	f88d 9008 	strb.w	r9, [sp, #8]
   d7c56:	f7ff f83c 	bl	d6cd2 <_ZN5spark10JSONWriter11beginObjectEv>
   d7c5a:	4649      	mov	r1, r9
   d7c5c:	4640      	mov	r0, r8
   d7c5e:	f7fe f989 	bl	d5f74 <log_level_name>
    json.name("l", 1).value(s);
   d7c62:	4941      	ldr	r1, [pc, #260]	; (d7d68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d7c64:	4680      	mov	r8, r0
   d7c66:	2201      	movs	r2, #1
   d7c68:	a801      	add	r0, sp, #4
   d7c6a:	f7ff f8bb 	bl	d6de4 <_ZN5spark10JSONWriter4nameEPKcj>
   d7c6e:	4641      	mov	r1, r8
   d7c70:	f7ff f92e 	bl	d6ed0 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d7c74:	b13f      	cbz	r7, d7c86 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d7c76:	493d      	ldr	r1, [pc, #244]	; (d7d6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d7c78:	2201      	movs	r2, #1
   d7c7a:	a801      	add	r0, sp, #4
   d7c7c:	f7ff f8b2 	bl	d6de4 <_ZN5spark10JSONWriter4nameEPKcj>
   d7c80:	4639      	mov	r1, r7
   d7c82:	f7ff f925 	bl	d6ed0 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d7c86:	b13e      	cbz	r6, d7c98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d7c88:	4939      	ldr	r1, [pc, #228]	; (d7d70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d7c8a:	2201      	movs	r2, #1
   d7c8c:	a801      	add	r0, sp, #4
   d7c8e:	f7ff f8a9 	bl	d6de4 <_ZN5spark10JSONWriter4nameEPKcj>
   d7c92:	4631      	mov	r1, r6
   d7c94:	f7ff f91c 	bl	d6ed0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d7c98:	7923      	ldrb	r3, [r4, #4]
   d7c9a:	07df      	lsls	r7, r3, #31
   d7c9c:	d50e      	bpl.n	d7cbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d7c9e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d7ca0:	212f      	movs	r1, #47	; 0x2f
   d7ca2:	4630      	mov	r0, r6
   d7ca4:	f001 faa3 	bl	d91ee <strrchr>
    if (s1) {
   d7ca8:	b100      	cbz	r0, d7cac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d7caa:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d7cac:	4931      	ldr	r1, [pc, #196]	; (d7d74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d7cae:	2201      	movs	r2, #1
   d7cb0:	a801      	add	r0, sp, #4
   d7cb2:	f7ff f897 	bl	d6de4 <_ZN5spark10JSONWriter4nameEPKcj>
   d7cb6:	4631      	mov	r1, r6
   d7cb8:	f7ff f90a 	bl	d6ed0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d7cbc:	7923      	ldrb	r3, [r4, #4]
   d7cbe:	079e      	lsls	r6, r3, #30
   d7cc0:	d507      	bpl.n	d7cd2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d7cc2:	492d      	ldr	r1, [pc, #180]	; (d7d78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d7cc4:	2202      	movs	r2, #2
   d7cc6:	a801      	add	r0, sp, #4
   d7cc8:	f7ff f88c 	bl	d6de4 <_ZN5spark10JSONWriter4nameEPKcj>
   d7ccc:	68e1      	ldr	r1, [r4, #12]
   d7cce:	f7ff f80d 	bl	d6cec <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d7cd2:	7923      	ldrb	r3, [r4, #4]
   d7cd4:	0758      	lsls	r0, r3, #29
   d7cd6:	d514      	bpl.n	d7d02 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7cd8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d7cda:	4633      	mov	r3, r6
   d7cdc:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d7cde:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7ce2:	b12a      	cbz	r2, d7cf0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d7ce4:	2a20      	cmp	r2, #32
   d7ce6:	d101      	bne.n	d7cec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d7ce8:	461e      	mov	r6, r3
   d7cea:	e7f7      	b.n	d7cdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d7cec:	2a28      	cmp	r2, #40	; 0x28
   d7cee:	d1f5      	bne.n	d7cdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d7cf0:	4922      	ldr	r1, [pc, #136]	; (d7d7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d7cf2:	2202      	movs	r2, #2
   d7cf4:	a801      	add	r0, sp, #4
   d7cf6:	f7ff f875 	bl	d6de4 <_ZN5spark10JSONWriter4nameEPKcj>
   d7cfa:	1bba      	subs	r2, r7, r6
   d7cfc:	4631      	mov	r1, r6
   d7cfe:	f7ff f881 	bl	d6e04 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d7d02:	7923      	ldrb	r3, [r4, #4]
   d7d04:	0719      	lsls	r1, r3, #28
   d7d06:	d507      	bpl.n	d7d18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d7d08:	491d      	ldr	r1, [pc, #116]	; (d7d80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d7d0a:	2201      	movs	r2, #1
   d7d0c:	a801      	add	r0, sp, #4
   d7d0e:	f7ff f869 	bl	d6de4 <_ZN5spark10JSONWriter4nameEPKcj>
   d7d12:	6961      	ldr	r1, [r4, #20]
   d7d14:	f7fe fffc 	bl	d6d10 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d7d18:	7923      	ldrb	r3, [r4, #4]
   d7d1a:	06da      	lsls	r2, r3, #27
   d7d1c:	d508      	bpl.n	d7d30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d7d1e:	2204      	movs	r2, #4
   d7d20:	4918      	ldr	r1, [pc, #96]	; (d7d84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d7d22:	eb0d 0002 	add.w	r0, sp, r2
   d7d26:	f7ff f85d 	bl	d6de4 <_ZN5spark10JSONWriter4nameEPKcj>
   d7d2a:	69a1      	ldr	r1, [r4, #24]
   d7d2c:	f7fe ffde 	bl	d6cec <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d7d30:	7923      	ldrb	r3, [r4, #4]
   d7d32:	069b      	lsls	r3, r3, #26
   d7d34:	d507      	bpl.n	d7d46 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d7d36:	4914      	ldr	r1, [pc, #80]	; (d7d88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d7d38:	2206      	movs	r2, #6
   d7d3a:	a801      	add	r0, sp, #4
   d7d3c:	f7ff f852 	bl	d6de4 <_ZN5spark10JSONWriter4nameEPKcj>
   d7d40:	69e1      	ldr	r1, [r4, #28]
   d7d42:	f7ff f8c5 	bl	d6ed0 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d7d46:	a801      	add	r0, sp, #4
   d7d48:	f7fe ffad 	bl	d6ca6 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d7d4c:	6a28      	ldr	r0, [r5, #32]
   d7d4e:	490f      	ldr	r1, [pc, #60]	; (d7d8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d7d50:	6803      	ldr	r3, [r0, #0]
   d7d52:	2202      	movs	r2, #2
   d7d54:	68db      	ldr	r3, [r3, #12]
   d7d56:	4798      	blx	r3
}
   d7d58:	b005      	add	sp, #20
   d7d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7d5e:	bf00      	nop
   d7d60:	2003e5d0 	.word	0x2003e5d0
   d7d64:	000d9958 	.word	0x000d9958
   d7d68:	000d98e7 	.word	0x000d98e7
   d7d6c:	000d9938 	.word	0x000d9938
   d7d70:	000d993a 	.word	0x000d993a
   d7d74:	000d942b 	.word	0x000d942b
   d7d78:	000d993c 	.word	0x000d993c
   d7d7c:	000d993f 	.word	0x000d993f
   d7d80:	000d9942 	.word	0x000d9942
   d7d84:	000d9944 	.word	0x000d9944
   d7d88:	000d9949 	.word	0x000d9949
   d7d8c:	000d9935 	.word	0x000d9935

000d7d90 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7d90:	2300      	movs	r3, #0
   d7d92:	6840      	ldr	r0, [r0, #4]
   d7d94:	461a      	mov	r2, r3
   d7d96:	f7fe b97b 	b.w	d6090 <network_connect>

000d7d9a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7d9a:	6840      	ldr	r0, [r0, #4]
   d7d9c:	2200      	movs	r2, #0
   d7d9e:	2102      	movs	r1, #2
   d7da0:	f7fe b986 	b.w	d60b0 <network_disconnect>

000d7da4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7da4:	2200      	movs	r2, #0
   d7da6:	6840      	ldr	r0, [r0, #4]
   d7da8:	4611      	mov	r1, r2
   d7daa:	f7fe b979 	b.w	d60a0 <network_connecting>

000d7dae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7dae:	2200      	movs	r2, #0
   d7db0:	6840      	ldr	r0, [r0, #4]
   d7db2:	4611      	mov	r1, r2
   d7db4:	f7fe b984 	b.w	d60c0 <network_ready>

000d7db8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7db8:	2300      	movs	r3, #0
   d7dba:	6840      	ldr	r0, [r0, #4]
   d7dbc:	461a      	mov	r2, r3
   d7dbe:	4619      	mov	r1, r3
   d7dc0:	f7fe b986 	b.w	d60d0 <network_on>

000d7dc4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7dc4:	2300      	movs	r3, #0
   d7dc6:	6840      	ldr	r0, [r0, #4]
   d7dc8:	461a      	mov	r2, r3
   d7dca:	4619      	mov	r1, r3
   d7dcc:	f7fe b988 	b.w	d60e0 <network_off>

000d7dd0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7dd0:	6840      	ldr	r0, [r0, #4]
   d7dd2:	2100      	movs	r1, #0
   d7dd4:	f7fe b9ac 	b.w	d6130 <network_is_on>

000d7dd8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7dd8:	6840      	ldr	r0, [r0, #4]
   d7dda:	2100      	movs	r1, #0
   d7ddc:	f7fe b9b0 	b.w	d6140 <network_is_off>

000d7de0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7de0:	6840      	ldr	r0, [r0, #4]
   d7de2:	2200      	movs	r2, #0
   d7de4:	f081 0101 	eor.w	r1, r1, #1
   d7de8:	f7fe b982 	b.w	d60f0 <network_listen>

000d7dec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7dec:	6840      	ldr	r0, [r0, #4]
   d7dee:	2200      	movs	r2, #0
   d7df0:	f7fe b98e 	b.w	d6110 <network_set_listen_timeout>

000d7df4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7df4:	2200      	movs	r2, #0
   d7df6:	6840      	ldr	r0, [r0, #4]
   d7df8:	4611      	mov	r1, r2
   d7dfa:	f7fe b991 	b.w	d6120 <network_get_listen_timeout>

000d7dfe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7dfe:	2200      	movs	r2, #0
   d7e00:	6840      	ldr	r0, [r0, #4]
   d7e02:	4611      	mov	r1, r2
   d7e04:	f7fe b97c 	b.w	d6100 <network_listening>

000d7e08 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7e0c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7e0e:	b095      	sub	sp, #84	; 0x54
   d7e10:	4616      	mov	r6, r2
   d7e12:	460d      	mov	r5, r1
   d7e14:	4607      	mov	r7, r0
    IPAddress addr;
   d7e16:	f7fe fde7 	bl	d69e8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7e1a:	4621      	mov	r1, r4
   d7e1c:	2218      	movs	r2, #24
   d7e1e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7e20:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7e22:	f001 f923 	bl	d906c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7e26:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7e28:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7e2c:	4621      	mov	r1, r4
   d7e2e:	466b      	mov	r3, sp
   d7e30:	aa0c      	add	r2, sp, #48	; 0x30
   d7e32:	4630      	mov	r0, r6
   d7e34:	f7fd ffae 	bl	d5d94 <netdb_getaddrinfo>
    if (!r) {
   d7e38:	4604      	mov	r4, r0
   d7e3a:	2800      	cmp	r0, #0
   d7e3c:	d146      	bne.n	d7ecc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7e3e:	4602      	mov	r2, r0
   d7e40:	2101      	movs	r1, #1
   d7e42:	6868      	ldr	r0, [r5, #4]
   d7e44:	f7fe f93c 	bl	d60c0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7e48:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7e4a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7e4c:	4622      	mov	r2, r4
   d7e4e:	6868      	ldr	r0, [r5, #4]
   d7e50:	f7fe f936 	bl	d60c0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7e54:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7e56:	4681      	mov	r9, r0
        bool ok = false;
   d7e58:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7e5a:	2e00      	cmp	r6, #0
   d7e5c:	d036      	beq.n	d7ecc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d7e5e:	2900      	cmp	r1, #0
   d7e60:	d134      	bne.n	d7ecc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7e62:	6873      	ldr	r3, [r6, #4]
   d7e64:	2b02      	cmp	r3, #2
   d7e66:	d003      	beq.n	d7e70 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7e68:	2b0a      	cmp	r3, #10
   d7e6a:	d00b      	beq.n	d7e84 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7e6c:	69f6      	ldr	r6, [r6, #28]
   d7e6e:	e7f4      	b.n	d7e5a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7e70:	f1b8 0f00 	cmp.w	r8, #0
   d7e74:	d004      	beq.n	d7e80 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7e76:	6971      	ldr	r1, [r6, #20]
   d7e78:	4638      	mov	r0, r7
   d7e7a:	3104      	adds	r1, #4
   d7e7c:	f7fe fde1 	bl	d6a42 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7e80:	4641      	mov	r1, r8
   d7e82:	e7f3      	b.n	d7e6c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7e84:	f1b9 0f00 	cmp.w	r9, #0
   d7e88:	d101      	bne.n	d7e8e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7e8a:	4649      	mov	r1, r9
   d7e8c:	e7ee      	b.n	d7e6c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7e8e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7e90:	2210      	movs	r2, #16
   d7e92:	a801      	add	r0, sp, #4
   d7e94:	f001 f8ea 	bl	d906c <memset>
                    a.v = 6;
   d7e98:	2306      	movs	r3, #6
   d7e9a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7e9e:	ad01      	add	r5, sp, #4
   d7ea0:	f104 0308 	add.w	r3, r4, #8
   d7ea4:	3418      	adds	r4, #24
   d7ea6:	6818      	ldr	r0, [r3, #0]
   d7ea8:	6859      	ldr	r1, [r3, #4]
   d7eaa:	462a      	mov	r2, r5
   d7eac:	c203      	stmia	r2!, {r0, r1}
   d7eae:	3308      	adds	r3, #8
   d7eb0:	42a3      	cmp	r3, r4
   d7eb2:	4615      	mov	r5, r2
   d7eb4:	d1f7      	bne.n	d7ea6 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7eb6:	a901      	add	r1, sp, #4
   d7eb8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7eba:	ad07      	add	r5, sp, #28
   d7ebc:	f7fe fda2 	bl	d6a04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ec2:	1d3c      	adds	r4, r7, #4
   d7ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ec6:	682b      	ldr	r3, [r5, #0]
   d7ec8:	7023      	strb	r3, [r4, #0]
   d7eca:	e7de      	b.n	d7e8a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7ecc:	9800      	ldr	r0, [sp, #0]
   d7ece:	f7fd ff59 	bl	d5d84 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7ed2:	4638      	mov	r0, r7
   d7ed4:	b015      	add	sp, #84	; 0x54
   d7ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7edc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7edc:	4b02      	ldr	r3, [pc, #8]	; (d7ee8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7ede:	4a03      	ldr	r2, [pc, #12]	; (d7eec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7ee0:	601a      	str	r2, [r3, #0]
   d7ee2:	2200      	movs	r2, #0
   d7ee4:	605a      	str	r2, [r3, #4]

} // spark
   d7ee6:	4770      	bx	lr
   d7ee8:	2003e5d0 	.word	0x2003e5d0
   d7eec:	000d99d0 	.word	0x000d99d0

000d7ef0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ef2:	4606      	mov	r6, r0
   d7ef4:	460d      	mov	r5, r1
  size_t n = 0;
   d7ef6:	188f      	adds	r7, r1, r2
   d7ef8:	2400      	movs	r4, #0
  while (size--) {
   d7efa:	42bd      	cmp	r5, r7
   d7efc:	d00c      	beq.n	d7f18 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7efe:	6833      	ldr	r3, [r6, #0]
   d7f00:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7f04:	689b      	ldr	r3, [r3, #8]
   d7f06:	4630      	mov	r0, r6
   d7f08:	4798      	blx	r3
     if (chunk>=0)
   d7f0a:	1e03      	subs	r3, r0, #0
   d7f0c:	db01      	blt.n	d7f12 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7f0e:	441c      	add	r4, r3
  while (size--) {
   d7f10:	e7f3      	b.n	d7efa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7f12:	2c00      	cmp	r4, #0
   d7f14:	bf08      	it	eq
   d7f16:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7f18:	4620      	mov	r0, r4
   d7f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7f1c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d7f1c:	b513      	push	{r0, r1, r4, lr}
   d7f1e:	4604      	mov	r4, r0
    }
   d7f20:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7f22:	b159      	cbz	r1, d7f3c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7f24:	9101      	str	r1, [sp, #4]
   d7f26:	f001 f948 	bl	d91ba <strlen>
   d7f2a:	6823      	ldr	r3, [r4, #0]
   d7f2c:	9901      	ldr	r1, [sp, #4]
   d7f2e:	68db      	ldr	r3, [r3, #12]
   d7f30:	4602      	mov	r2, r0
   d7f32:	4620      	mov	r0, r4
    }
   d7f34:	b002      	add	sp, #8
   d7f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7f3a:	4718      	bx	r3
    }
   d7f3c:	b002      	add	sp, #8
   d7f3e:	bd10      	pop	{r4, pc}

000d7f40 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7f40:	b508      	push	{r3, lr}
  return write(str);
   d7f42:	f7ff ffeb 	bl	d7f1c <_ZN5Print5writeEPKc>
}
   d7f46:	bd08      	pop	{r3, pc}

000d7f48 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7f48:	6803      	ldr	r3, [r0, #0]
   d7f4a:	689b      	ldr	r3, [r3, #8]
   d7f4c:	4718      	bx	r3

000d7f4e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7f4e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7f50:	210d      	movs	r1, #13
{
   d7f52:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7f54:	f7ff fff8 	bl	d7f48 <_ZN5Print5printEc>
  n += print('\n');
   d7f58:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7f5a:	4604      	mov	r4, r0
  n += print('\n');
   d7f5c:	4628      	mov	r0, r5
   d7f5e:	f7ff fff3 	bl	d7f48 <_ZN5Print5printEc>
  return n;
}
   d7f62:	4420      	add	r0, r4
   d7f64:	bd38      	pop	{r3, r4, r5, pc}

000d7f66 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7f66:	b530      	push	{r4, r5, lr}
   d7f68:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7f6a:	2300      	movs	r3, #0
   d7f6c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7f70:	2a01      	cmp	r2, #1
   d7f72:	bf98      	it	ls
   d7f74:	220a      	movls	r2, #10
   d7f76:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7f78:	460d      	mov	r5, r1
   d7f7a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7f7e:	fb01 5312 	mls	r3, r1, r2, r5
   d7f82:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7f86:	2b09      	cmp	r3, #9
   d7f88:	bf94      	ite	ls
   d7f8a:	3330      	addls	r3, #48	; 0x30
   d7f8c:	3337      	addhi	r3, #55	; 0x37
   d7f8e:	b2db      	uxtb	r3, r3
  } while(n);
   d7f90:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7f92:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7f96:	d9ef      	bls.n	d7f78 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7f98:	4621      	mov	r1, r4
   d7f9a:	f7ff ffbf 	bl	d7f1c <_ZN5Print5writeEPKc>
}
   d7f9e:	b00b      	add	sp, #44	; 0x2c
   d7fa0:	bd30      	pop	{r4, r5, pc}

000d7fa2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d7fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7fa6:	b086      	sub	sp, #24
   d7fa8:	af00      	add	r7, sp, #0
   d7faa:	4605      	mov	r5, r0
   d7fac:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d7fae:	1d38      	adds	r0, r7, #4
   d7fb0:	2114      	movs	r1, #20
{
   d7fb2:	4614      	mov	r4, r2
    va_copy(args2, args);
   d7fb4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d7fb6:	f7fe f8eb 	bl	d6190 <vsnprintf>

    if (n<bufsize)
   d7fba:	2813      	cmp	r0, #19
   d7fbc:	d80e      	bhi.n	d7fdc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d7fbe:	1d39      	adds	r1, r7, #4
   d7fc0:	4628      	mov	r0, r5
   d7fc2:	f7ff ffab 	bl	d7f1c <_ZN5Print5writeEPKc>
   d7fc6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d7fc8:	b11e      	cbz	r6, d7fd2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d7fca:	4628      	mov	r0, r5
   d7fcc:	f7ff ffbf 	bl	d7f4e <_ZN5Print7printlnEv>
   d7fd0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d7fd2:	4620      	mov	r0, r4
   d7fd4:	3718      	adds	r7, #24
   d7fd6:	46bd      	mov	sp, r7
   d7fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d7fdc:	f100 0308 	add.w	r3, r0, #8
   d7fe0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d7fe4:	46e8      	mov	r8, sp
        char bigger[n+1];
   d7fe6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d7fea:	4622      	mov	r2, r4
   d7fec:	1c41      	adds	r1, r0, #1
   d7fee:	683b      	ldr	r3, [r7, #0]
   d7ff0:	4668      	mov	r0, sp
   d7ff2:	f7fe f8cd 	bl	d6190 <vsnprintf>
  return write(str);
   d7ff6:	4669      	mov	r1, sp
   d7ff8:	4628      	mov	r0, r5
   d7ffa:	f7ff ff8f 	bl	d7f1c <_ZN5Print5writeEPKc>
   d7ffe:	4604      	mov	r4, r0
   d8000:	46c5      	mov	sp, r8
   d8002:	e7e1      	b.n	d7fc8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d8004 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d8004:	b510      	push	{r4, lr}
  if (0 == max) {
   d8006:	4604      	mov	r4, r0
   d8008:	b128      	cbz	r0, d8016 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d800a:	f001 f85b 	bl	d90c4 <rand>
   d800e:	fb90 f3f4 	sdiv	r3, r0, r4
   d8012:	fb03 0414 	mls	r4, r3, r4, r0
}
   d8016:	4620      	mov	r0, r4
   d8018:	bd10      	pop	{r4, pc}

000d801a <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d801a:	4288      	cmp	r0, r1
{
   d801c:	b510      	push	{r4, lr}
   d801e:	4604      	mov	r4, r0
  if (min >= max) {
   d8020:	da03      	bge.n	d802a <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d8022:	1a08      	subs	r0, r1, r0
   d8024:	f7ff ffee 	bl	d8004 <_Z6randomi>
   d8028:	4404      	add	r4, r0
}
   d802a:	4620      	mov	r0, r4
   d802c:	bd10      	pop	{r4, pc}
	...

000d8030 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d8030:	4b01      	ldr	r3, [pc, #4]	; (d8038 <_GLOBAL__sub_I_RGB+0x8>)
   d8032:	2200      	movs	r2, #0
   d8034:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d8036:	4770      	bx	lr
   d8038:	2003e5d8 	.word	0x2003e5d8

000d803c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d803c:	2100      	movs	r1, #0
   d803e:	f7fd bee9 	b.w	d5e14 <hal_spi_acquire>

000d8042 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d8042:	2100      	movs	r1, #0
   d8044:	f7fd beee 	b.w	d5e24 <hal_spi_release>

000d8048 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d8048:	b510      	push	{r4, lr}
   d804a:	4604      	mov	r4, r0
   d804c:	4608      	mov	r0, r1
{
    _spi = spi;
   d804e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d8050:	f7fd fec0 	bl	d5dd4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d8054:	2300      	movs	r3, #0
   d8056:	6063      	str	r3, [r4, #4]
}
   d8058:	4620      	mov	r0, r4
   d805a:	bd10      	pop	{r4, pc}

000d805c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d805c:	b510      	push	{r4, lr}
   d805e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d8060:	7800      	ldrb	r0, [r0, #0]
   d8062:	f7ff ffeb 	bl	d803c <_ZN8SPIClass4lockEv.isra.0>
   d8066:	b948      	cbnz	r0, d807c <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d8068:	7820      	ldrb	r0, [r4, #0]
   d806a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d806e:	f7fd fe99 	bl	d5da4 <hal_spi_begin>
        unlock();
   d8072:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d8078:	f7ff bfe3 	b.w	d8042 <_ZN8SPIClass6unlockEv.isra.0>
}
   d807c:	bd10      	pop	{r4, pc}

000d807e <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   d807e:	b510      	push	{r4, lr}
   d8080:	4604      	mov	r4, r0
    if (!lock())
   d8082:	7800      	ldrb	r0, [r0, #0]
   d8084:	f7ff ffda 	bl	d803c <_ZN8SPIClass4lockEv.isra.0>
   d8088:	b938      	cbnz	r0, d809a <_ZN8SPIClass3endEv+0x1c>
    {
        hal_spi_end(_spi);
   d808a:	7820      	ldrb	r0, [r4, #0]
   d808c:	f7fd fe92 	bl	d5db4 <hal_spi_end>
        unlock();
   d8090:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d8096:	f7ff bfd4 	b.w	d8042 <_ZN8SPIClass6unlockEv.isra.0>
}
   d809a:	bd10      	pop	{r4, pc}

000d809c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d809c:	7800      	ldrb	r0, [r0, #0]
   d809e:	f7ff bfd0 	b.w	d8042 <_ZN8SPIClass6unlockEv.isra.0>
	...

000d80a4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d80a4:	0840      	lsrs	r0, r0, #1
{
   d80a6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d80a8:	6018      	str	r0, [r3, #0]
   d80aa:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d80ac:	6818      	ldr	r0, [r3, #0]
   d80ae:	4288      	cmp	r0, r1
   d80b0:	b2e5      	uxtb	r5, r4
   d80b2:	d906      	bls.n	d80c2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d80b4:	3401      	adds	r4, #1
   d80b6:	2c08      	cmp	r4, #8
   d80b8:	d002      	beq.n	d80c0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d80ba:	0840      	lsrs	r0, r0, #1
   d80bc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d80be:	e7f5      	b.n	d80ac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d80c0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d80c2:	4b02      	ldr	r3, [pc, #8]	; (d80cc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d80c4:	5d5b      	ldrb	r3, [r3, r5]
   d80c6:	7013      	strb	r3, [r2, #0]
}
   d80c8:	bd30      	pop	{r4, r5, pc}
   d80ca:	bf00      	nop
   d80cc:	000d9a04 	.word	0x000d9a04

000d80d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d80d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d80d4:	4606      	mov	r6, r0
   d80d6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d80d8:	7800      	ldrb	r0, [r0, #0]
{
   d80da:	460c      	mov	r4, r1
    CHECK(lock());
   d80dc:	f7ff ffae 	bl	d803c <_ZN8SPIClass4lockEv.isra.0>
   d80e0:	2800      	cmp	r0, #0
   d80e2:	db1b      	blt.n	d811c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d80e4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d80e6:	2214      	movs	r2, #20
   d80e8:	2100      	movs	r1, #0
   d80ea:	a809      	add	r0, sp, #36	; 0x24
   d80ec:	f000 ffbe 	bl	d906c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d80f0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d80f2:	2200      	movs	r2, #0
   d80f4:	a909      	add	r1, sp, #36	; 0x24
   d80f6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d80f8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d80fc:	f7fd fe7a 	bl	d5df4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d8100:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d8104:	b113      	cbz	r3, d810c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d8106:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d810a:	b155      	cbz	r5, d8122 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d810c:	2700      	movs	r7, #0
   d810e:	46b9      	mov	r9, r7
   d8110:	46b8      	mov	r8, r7
   d8112:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d8114:	7923      	ldrb	r3, [r4, #4]
   d8116:	b15d      	cbz	r5, d8130 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d8118:	b1c3      	cbz	r3, d814c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d811a:	2000      	movs	r0, #0
}
   d811c:	b00f      	add	sp, #60	; 0x3c
   d811e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d8122:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d8126:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d812a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d812e:	e7f1      	b.n	d8114 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d8130:	2b00      	cmp	r3, #0
   d8132:	d135      	bne.n	d81a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d8134:	68a3      	ldr	r3, [r4, #8]
   d8136:	4543      	cmp	r3, r8
   d8138:	d108      	bne.n	d814c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d813a:	f88d 9020 	strb.w	r9, [sp, #32]
   d813e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d8142:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d8146:	89a3      	ldrh	r3, [r4, #12]
   d8148:	429a      	cmp	r2, r3
   d814a:	d0e6      	beq.n	d811a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d814c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d814e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d8150:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d8154:	980a      	ldr	r0, [sp, #40]	; 0x28
   d8156:	ab04      	add	r3, sp, #16
   d8158:	f10d 020f 	add.w	r2, sp, #15
   d815c:	f7ff ffa2 	bl	d80a4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d8160:	7921      	ldrb	r1, [r4, #4]
   d8162:	b985      	cbnz	r5, d8186 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d8164:	b989      	cbnz	r1, d818a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d8166:	68a3      	ldr	r3, [r4, #8]
   d8168:	4543      	cmp	r3, r8
   d816a:	d30e      	bcc.n	d818a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d816c:	f88d 9020 	strb.w	r9, [sp, #32]
   d8170:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d8174:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d8178:	89a3      	ldrh	r3, [r4, #12]
   d817a:	429a      	cmp	r2, r3
   d817c:	d105      	bne.n	d818a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d817e:	9b04      	ldr	r3, [sp, #16]
   d8180:	4543      	cmp	r3, r8
   d8182:	d102      	bne.n	d818a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d8184:	e7c9      	b.n	d811a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d8186:	2900      	cmp	r1, #0
   d8188:	d1f9      	bne.n	d817e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d818a:	2300      	movs	r3, #0
   d818c:	9301      	str	r3, [sp, #4]
   d818e:	7b63      	ldrb	r3, [r4, #13]
   d8190:	9300      	str	r3, [sp, #0]
   d8192:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d8196:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d8198:	7830      	ldrb	r0, [r6, #0]
   d819a:	f7fd fe33 	bl	d5e04 <hal_spi_set_settings>
   d819e:	e7bc      	b.n	d811a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d81a0:	e9cd 5500 	strd	r5, r5, [sp]
   d81a4:	462b      	mov	r3, r5
   d81a6:	462a      	mov	r2, r5
   d81a8:	2101      	movs	r1, #1
   d81aa:	e7f5      	b.n	d8198 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d81ac <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d81ac:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d81ae:	7800      	ldrb	r0, [r0, #0]
   d81b0:	f7fd fe08 	bl	d5dc4 <hal_spi_transfer>
}
   d81b4:	b2c0      	uxtb	r0, r0
   d81b6:	bd08      	pop	{r3, pc}

000d81b8 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   d81b8:	4770      	bx	lr

000d81ba <_ZN8SPIClass15detachInterruptEv>:
   d81ba:	4770      	bx	lr

000d81bc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d81bc:	b510      	push	{r4, lr}
   d81be:	4604      	mov	r4, r0
{
	free(buffer);
   d81c0:	6800      	ldr	r0, [r0, #0]
   d81c2:	f7fd ffcd 	bl	d6160 <free>
}
   d81c6:	4620      	mov	r0, r4
   d81c8:	bd10      	pop	{r4, pc}

000d81ca <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d81ca:	b510      	push	{r4, lr}
   d81cc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d81ce:	6800      	ldr	r0, [r0, #0]
   d81d0:	b108      	cbz	r0, d81d6 <_ZN6String10invalidateEv+0xc>
   d81d2:	f7fd ffc5 	bl	d6160 <free>
	buffer = NULL;
   d81d6:	2300      	movs	r3, #0
	capacity = len = 0;
   d81d8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d81dc:	6023      	str	r3, [r4, #0]
}
   d81de:	bd10      	pop	{r4, pc}

000d81e0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d81e0:	b538      	push	{r3, r4, r5, lr}
   d81e2:	4604      	mov	r4, r0
   d81e4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d81e6:	6800      	ldr	r0, [r0, #0]
   d81e8:	3101      	adds	r1, #1
   d81ea:	f7fd ffc1 	bl	d6170 <realloc>
	if (newbuffer) {
   d81ee:	b110      	cbz	r0, d81f6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d81f0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d81f4:	2001      	movs	r0, #1
	}
	return 0;
}
   d81f6:	bd38      	pop	{r3, r4, r5, pc}

000d81f8 <_ZN6String7reserveEj>:
{
   d81f8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d81fa:	6803      	ldr	r3, [r0, #0]
{
   d81fc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d81fe:	b123      	cbz	r3, d820a <_ZN6String7reserveEj+0x12>
   d8200:	6843      	ldr	r3, [r0, #4]
   d8202:	428b      	cmp	r3, r1
   d8204:	d301      	bcc.n	d820a <_ZN6String7reserveEj+0x12>
   d8206:	2001      	movs	r0, #1
}
   d8208:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d820a:	4620      	mov	r0, r4
   d820c:	f7ff ffe8 	bl	d81e0 <_ZN6String12changeBufferEj>
   d8210:	2800      	cmp	r0, #0
   d8212:	d0f9      	beq.n	d8208 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d8214:	68a3      	ldr	r3, [r4, #8]
   d8216:	2b00      	cmp	r3, #0
   d8218:	d1f5      	bne.n	d8206 <_ZN6String7reserveEj+0xe>
   d821a:	6822      	ldr	r2, [r4, #0]
   d821c:	7013      	strb	r3, [r2, #0]
   d821e:	e7f2      	b.n	d8206 <_ZN6String7reserveEj+0xe>

000d8220 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8220:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8222:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d8224:	4611      	mov	r1, r2
   d8226:	9201      	str	r2, [sp, #4]
{
   d8228:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d822a:	f7ff ffe5 	bl	d81f8 <_ZN6String7reserveEj>
   d822e:	9a01      	ldr	r2, [sp, #4]
   d8230:	b928      	cbnz	r0, d823e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d8232:	4620      	mov	r0, r4
   d8234:	f7ff ffc9 	bl	d81ca <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d8238:	4620      	mov	r0, r4
   d823a:	b003      	add	sp, #12
   d823c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d823e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d8240:	4629      	mov	r1, r5
   d8242:	6820      	ldr	r0, [r4, #0]
   d8244:	f000 feea 	bl	d901c <memcpy>
	buffer[len] = 0;
   d8248:	6822      	ldr	r2, [r4, #0]
   d824a:	68a3      	ldr	r3, [r4, #8]
   d824c:	2100      	movs	r1, #0
   d824e:	54d1      	strb	r1, [r2, r3]
	return *this;
   d8250:	e7f2      	b.n	d8238 <_ZN6String4copyEPKcj+0x18>

000d8252 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8252:	b538      	push	{r3, r4, r5, lr}
   d8254:	4605      	mov	r5, r0
	if (buffer) {
   d8256:	6800      	ldr	r0, [r0, #0]
{
   d8258:	460c      	mov	r4, r1
	if (buffer) {
   d825a:	b168      	cbz	r0, d8278 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d825c:	686a      	ldr	r2, [r5, #4]
   d825e:	688b      	ldr	r3, [r1, #8]
   d8260:	429a      	cmp	r2, r3
   d8262:	d307      	bcc.n	d8274 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d8264:	6809      	ldr	r1, [r1, #0]
   d8266:	f000 ff82 	bl	d916e <strcpy>
			len = rhs.len;
   d826a:	68a3      	ldr	r3, [r4, #8]
   d826c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d826e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d8270:	60a3      	str	r3, [r4, #8]
}
   d8272:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d8274:	f7fd ff74 	bl	d6160 <free>
	buffer = rhs.buffer;
   d8278:	6823      	ldr	r3, [r4, #0]
   d827a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d827c:	6863      	ldr	r3, [r4, #4]
   d827e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d8280:	68a3      	ldr	r3, [r4, #8]
   d8282:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d8284:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d8286:	e9c4 3300 	strd	r3, r3, [r4]
   d828a:	e7f1      	b.n	d8270 <_ZN6String4moveERS_+0x1e>

000d828c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d828c:	b510      	push	{r4, lr}
	buffer = NULL;
   d828e:	2300      	movs	r3, #0
	capacity = 0;
   d8290:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d8294:	4604      	mov	r4, r0
	len = 0;
   d8296:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8298:	7303      	strb	r3, [r0, #12]
	move(rval);
   d829a:	f7ff ffda 	bl	d8252 <_ZN6String4moveERS_>
}
   d829e:	4620      	mov	r0, r4
   d82a0:	bd10      	pop	{r4, pc}

000d82a2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d82a2:	4288      	cmp	r0, r1
{
   d82a4:	b510      	push	{r4, lr}
   d82a6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d82a8:	d005      	beq.n	d82b6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d82aa:	680b      	ldr	r3, [r1, #0]
   d82ac:	b12b      	cbz	r3, d82ba <_ZN6StringaSERKS_+0x18>
   d82ae:	688a      	ldr	r2, [r1, #8]
   d82b0:	4619      	mov	r1, r3
   d82b2:	f7ff ffb5 	bl	d8220 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d82b6:	4620      	mov	r0, r4
   d82b8:	bd10      	pop	{r4, pc}
	else invalidate();
   d82ba:	f7ff ff86 	bl	d81ca <_ZN6String10invalidateEv>
   d82be:	e7fa      	b.n	d82b6 <_ZN6StringaSERKS_+0x14>

000d82c0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d82c0:	b510      	push	{r4, lr}
	buffer = NULL;
   d82c2:	2300      	movs	r3, #0
String::String(const String &value)
   d82c4:	4604      	mov	r4, r0
	capacity = 0;
   d82c6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d82ca:	6083      	str	r3, [r0, #8]
	flags = 0;
   d82cc:	7303      	strb	r3, [r0, #12]
	*this = value;
   d82ce:	f7ff ffe8 	bl	d82a2 <_ZN6StringaSERKS_>
}
   d82d2:	4620      	mov	r0, r4
   d82d4:	bd10      	pop	{r4, pc}
	...

000d82d8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d82d8:	4b05      	ldr	r3, [pc, #20]	; (d82f0 <_GLOBAL__sub_I_System+0x18>)
   d82da:	2202      	movs	r2, #2
   d82dc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d82de:	4b05      	ldr	r3, [pc, #20]	; (d82f4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d82e0:	4a05      	ldr	r2, [pc, #20]	; (d82f8 <_GLOBAL__sub_I_System+0x20>)
   d82e2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d82e4:	2000      	movs	r0, #0
   d82e6:	6018      	str	r0, [r3, #0]
   d82e8:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d82ea:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d82ec:	f7fd be64 	b.w	d5fb8 <set_system_mode>
   d82f0:	2003e5f4 	.word	0x2003e5f4
   d82f4:	2003e5e8 	.word	0x2003e5e8
   d82f8:	ffff0000 	.word	0xffff0000

000d82fc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d82fc:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d82fe:	2000      	movs	r0, #0
   d8300:	f7fd feb6 	bl	d6070 <spark_sync_time_pending>
   d8304:	b128      	cbz	r0, d8312 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8306:	f7fd fea3 	bl	d6050 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d830a:	f080 0001 	eor.w	r0, r0, #1
   d830e:	b2c0      	uxtb	r0, r0
    }
   d8310:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8312:	2001      	movs	r0, #1
   d8314:	e7fc      	b.n	d8310 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d8316 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8316:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d8318:	2000      	movs	r0, #0
   d831a:	f7fd fcbb 	bl	d5c94 <hal_rtc_time_is_valid>
    if (rtcstate)
   d831e:	4604      	mov	r4, r0
   d8320:	b9a0      	cbnz	r0, d834c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8322:	f7fd fe41 	bl	d5fa8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8326:	2801      	cmp	r0, #1
   d8328:	d110      	bne.n	d834c <_ZN9TimeClass7isValidEv+0x36>
   d832a:	4620      	mov	r0, r4
   d832c:	f7fd fe6c 	bl	d6008 <system_thread_get_state>
   d8330:	b960      	cbnz	r0, d834c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d8332:	f7ff ffe3 	bl	d82fc <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8336:	b910      	cbnz	r0, d833e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d8338:	f7fd fe82 	bl	d6040 <spark_process>
        while (_while() && !_condition()) {
   d833c:	e7f9      	b.n	d8332 <_ZN9TimeClass7isValidEv+0x1c>
   d833e:	f7ff ffdd 	bl	d82fc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d8342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d8346:	2000      	movs	r0, #0
   d8348:	f7fd bca4 	b.w	d5c94 <hal_rtc_time_is_valid>
}
   d834c:	4620      	mov	r0, r4
   d834e:	bd10      	pop	{r4, pc}

000d8350 <_ZN9TimeClass3nowEv>:
{
   d8350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d8352:	f7ff ffe0 	bl	d8316 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d8356:	2210      	movs	r2, #16
   d8358:	2100      	movs	r1, #0
   d835a:	4668      	mov	r0, sp
   d835c:	f000 fe86 	bl	d906c <memset>
    hal_rtc_get_time(&tv, nullptr);
   d8360:	2100      	movs	r1, #0
   d8362:	4668      	mov	r0, sp
   d8364:	f7fd fc9e 	bl	d5ca4 <hal_rtc_get_time>
}
   d8368:	9800      	ldr	r0, [sp, #0]
   d836a:	b005      	add	sp, #20
   d836c:	f85d fb04 	ldr.w	pc, [sp], #4

000d8370 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8370:	4b02      	ldr	r3, [pc, #8]	; (d837c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8372:	681a      	ldr	r2, [r3, #0]
   d8374:	4b02      	ldr	r3, [pc, #8]	; (d8380 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8376:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d8378:	4770      	bx	lr
   d837a:	bf00      	nop
   d837c:	2003df00 	.word	0x2003df00
   d8380:	2003e5f8 	.word	0x2003e5f8

000d8384 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d8384:	4770      	bx	lr

000d8386 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8386:	7441      	strb	r1, [r0, #17]
}
   d8388:	4770      	bx	lr

000d838a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d838a:	4770      	bx	lr

000d838c <_ZN11USARTSerial17availableForWriteEv>:
{
   d838c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d838e:	7c00      	ldrb	r0, [r0, #16]
   d8390:	f7fd fd90 	bl	d5eb4 <hal_usart_available_data_for_write>
}
   d8394:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8398:	bd08      	pop	{r3, pc}

000d839a <_ZN11USARTSerial9availableEv>:
{
   d839a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d839c:	7c00      	ldrb	r0, [r0, #16]
   d839e:	f7fd fd61 	bl	d5e64 <hal_usart_available>
}
   d83a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d83a6:	bd08      	pop	{r3, pc}

000d83a8 <_ZN11USARTSerial4peekEv>:
{
   d83a8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d83aa:	7c00      	ldrb	r0, [r0, #16]
   d83ac:	f7fd fd6a 	bl	d5e84 <hal_usart_peek>
}
   d83b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d83b4:	bd08      	pop	{r3, pc}

000d83b6 <_ZN11USARTSerial4readEv>:
{
   d83b6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d83b8:	7c00      	ldrb	r0, [r0, #16]
   d83ba:	f7fd fd5b 	bl	d5e74 <hal_usart_read>
}
   d83be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d83c2:	bd08      	pop	{r3, pc}

000d83c4 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d83c4:	7c00      	ldrb	r0, [r0, #16]
   d83c6:	f7fd bd65 	b.w	d5e94 <hal_usart_flush>

000d83ca <_ZN11USARTSerial5writeEh>:
{
   d83ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d83cc:	7c45      	ldrb	r5, [r0, #17]
{
   d83ce:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d83d0:	b12d      	cbz	r5, d83de <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d83d2:	7c20      	ldrb	r0, [r4, #16]
}
   d83d4:	b003      	add	sp, #12
   d83d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d83da:	f7fd bd3b 	b.w	d5e54 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d83de:	7c00      	ldrb	r0, [r0, #16]
   d83e0:	9101      	str	r1, [sp, #4]
   d83e2:	f7fd fd67 	bl	d5eb4 <hal_usart_available_data_for_write>
   d83e6:	2800      	cmp	r0, #0
   d83e8:	9901      	ldr	r1, [sp, #4]
   d83ea:	dcf2      	bgt.n	d83d2 <_ZN11USARTSerial5writeEh+0x8>
}
   d83ec:	4628      	mov	r0, r5
   d83ee:	b003      	add	sp, #12
   d83f0:	bd30      	pop	{r4, r5, pc}

000d83f2 <_ZN11USARTSerialD0Ev>:
   d83f2:	b510      	push	{r4, lr}
   d83f4:	2114      	movs	r1, #20
   d83f6:	4604      	mov	r4, r0
   d83f8:	f000 fa12 	bl	d8820 <_ZdlPvj>
   d83fc:	4620      	mov	r0, r4
   d83fe:	bd10      	pop	{r4, pc}

000d8400 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d8400:	b510      	push	{r4, lr}
   d8402:	f04f 0c00 	mov.w	ip, #0
   d8406:	4604      	mov	r4, r0
   d8408:	4608      	mov	r0, r1
   d840a:	4611      	mov	r1, r2
   d840c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8410:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d8414:	4a04      	ldr	r2, [pc, #16]	; (d8428 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d8416:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d8418:	2201      	movs	r2, #1
  _serial = serial;
   d841a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d841c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d841e:	461a      	mov	r2, r3
   d8420:	f7fd fd08 	bl	d5e34 <hal_usart_init>
}
   d8424:	4620      	mov	r0, r4
   d8426:	bd10      	pop	{r4, pc}
   d8428:	000d9a30 	.word	0x000d9a30

000d842c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d842c:	7c00      	ldrb	r0, [r0, #16]
   d842e:	2300      	movs	r3, #0
   d8430:	f7fd bd48 	b.w	d5ec4 <hal_usart_begin_config>

000d8434 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d8434:	2200      	movs	r2, #0
   d8436:	f7ff bff9 	b.w	d842c <_ZN11USARTSerial5beginEmm>

000d843a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d843a:	7c00      	ldrb	r0, [r0, #16]
   d843c:	f7fd bd02 	b.w	d5e44 <hal_usart_end>

000d8440 <_Z22__fetch_global_Serial1v>:
{
   d8440:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8442:	4c0d      	ldr	r4, [pc, #52]	; (d8478 <_Z22__fetch_global_Serial1v+0x38>)
   d8444:	7821      	ldrb	r1, [r4, #0]
   d8446:	f3bf 8f5b 	dmb	ish
   d844a:	f011 0101 	ands.w	r1, r1, #1
   d844e:	d110      	bne.n	d8472 <_Z22__fetch_global_Serial1v+0x32>
   d8450:	4620      	mov	r0, r4
   d8452:	9101      	str	r1, [sp, #4]
   d8454:	f7fb fe30 	bl	d40b8 <__cxa_guard_acquire>
   d8458:	9901      	ldr	r1, [sp, #4]
   d845a:	b150      	cbz	r0, d8472 <_Z22__fetch_global_Serial1v+0x32>
   d845c:	4b07      	ldr	r3, [pc, #28]	; (d847c <_Z22__fetch_global_Serial1v+0x3c>)
   d845e:	4a08      	ldr	r2, [pc, #32]	; (d8480 <_Z22__fetch_global_Serial1v+0x40>)
   d8460:	4808      	ldr	r0, [pc, #32]	; (d8484 <_Z22__fetch_global_Serial1v+0x44>)
   d8462:	f7ff ffcd 	bl	d8400 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d8466:	4620      	mov	r0, r4
   d8468:	f7fb fe2b 	bl	d40c2 <__cxa_guard_release>
   d846c:	4806      	ldr	r0, [pc, #24]	; (d8488 <_Z22__fetch_global_Serial1v+0x48>)
   d846e:	f000 fdcf 	bl	d9010 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8472:	4804      	ldr	r0, [pc, #16]	; (d8484 <_Z22__fetch_global_Serial1v+0x44>)
   d8474:	b002      	add	sp, #8
   d8476:	bd10      	pop	{r4, pc}
   d8478:	2003e5fc 	.word	0x2003e5fc
   d847c:	2003e684 	.word	0x2003e684
   d8480:	2003e600 	.word	0x2003e600
   d8484:	2003e708 	.word	0x2003e708
   d8488:	000d838b 	.word	0x000d838b

000d848c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d848c:	7441      	strb	r1, [r0, #17]
}
   d848e:	4770      	bx	lr

000d8490 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8490:	4770      	bx	lr

000d8492 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8492:	4770      	bx	lr

000d8494 <_ZN9USBSerial4readEv>:
{
   d8494:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8496:	2100      	movs	r1, #0
   d8498:	7c00      	ldrb	r0, [r0, #16]
   d849a:	f7fd fd43 	bl	d5f24 <HAL_USB_USART_Receive_Data>
}
   d849e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d84a2:	bd08      	pop	{r3, pc}

000d84a4 <_ZN9USBSerial4peekEv>:
{
   d84a4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d84a6:	2101      	movs	r1, #1
   d84a8:	7c00      	ldrb	r0, [r0, #16]
   d84aa:	f7fd fd3b 	bl	d5f24 <HAL_USB_USART_Receive_Data>
}
   d84ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d84b2:	bd08      	pop	{r3, pc}

000d84b4 <_ZN9USBSerial17availableForWriteEv>:
{
   d84b4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d84b6:	7c00      	ldrb	r0, [r0, #16]
   d84b8:	f7fd fd2c 	bl	d5f14 <HAL_USB_USART_Available_Data_For_Write>
}
   d84bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d84c0:	bd08      	pop	{r3, pc}

000d84c2 <_ZN9USBSerial9availableEv>:
{
   d84c2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d84c4:	7c00      	ldrb	r0, [r0, #16]
   d84c6:	f7fd fd1d 	bl	d5f04 <HAL_USB_USART_Available_Data>
}
   d84ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d84ce:	bd08      	pop	{r3, pc}

000d84d0 <_ZN9USBSerial5writeEh>:
{
   d84d0:	b513      	push	{r0, r1, r4, lr}
   d84d2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d84d4:	7c00      	ldrb	r0, [r0, #16]
{
   d84d6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d84d8:	f7fd fd1c 	bl	d5f14 <HAL_USB_USART_Available_Data_For_Write>
   d84dc:	2800      	cmp	r0, #0
   d84de:	9901      	ldr	r1, [sp, #4]
   d84e0:	dc01      	bgt.n	d84e6 <_ZN9USBSerial5writeEh+0x16>
   d84e2:	7c60      	ldrb	r0, [r4, #17]
   d84e4:	b120      	cbz	r0, d84f0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d84e6:	7c20      	ldrb	r0, [r4, #16]
   d84e8:	f7fd fd24 	bl	d5f34 <HAL_USB_USART_Send_Data>
   d84ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d84f0:	b002      	add	sp, #8
   d84f2:	bd10      	pop	{r4, pc}

000d84f4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d84f4:	7c00      	ldrb	r0, [r0, #16]
   d84f6:	f7fd bd25 	b.w	d5f44 <HAL_USB_USART_Flush_Data>

000d84fa <_ZN9USBSerialD0Ev>:
   d84fa:	b510      	push	{r4, lr}
   d84fc:	2114      	movs	r1, #20
   d84fe:	4604      	mov	r4, r0
   d8500:	f000 f98e 	bl	d8820 <_ZdlPvj>
   d8504:	4620      	mov	r0, r4
   d8506:	bd10      	pop	{r4, pc}

000d8508 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8508:	b510      	push	{r4, lr}
   d850a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d850e:	4604      	mov	r4, r0
   d8510:	4608      	mov	r0, r1
   d8512:	2100      	movs	r1, #0
   d8514:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8518:	4b04      	ldr	r3, [pc, #16]	; (d852c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d851a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d851c:	2301      	movs	r3, #1
  _serial = serial;
   d851e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8520:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d8522:	4611      	mov	r1, r2
   d8524:	f7fd fcd6 	bl	d5ed4 <HAL_USB_USART_Init>
}
   d8528:	4620      	mov	r0, r4
   d852a:	bd10      	pop	{r4, pc}
   d852c:	000d9a60 	.word	0x000d9a60

000d8530 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8530:	7c00      	ldrb	r0, [r0, #16]
   d8532:	2200      	movs	r2, #0
   d8534:	f7fd bcd6 	b.w	d5ee4 <HAL_USB_USART_Begin>

000d8538 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d8538:	7c00      	ldrb	r0, [r0, #16]
   d853a:	f7fd bcdb 	b.w	d5ef4 <HAL_USB_USART_End>

000d853e <_Z19acquireSerialBufferv>:
{
   d853e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8540:	2214      	movs	r2, #20
{
   d8542:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8544:	2100      	movs	r1, #0
   d8546:	f000 fd91 	bl	d906c <memset>
}
   d854a:	4620      	mov	r0, r4
   d854c:	bd10      	pop	{r4, pc}
	...

000d8550 <_Z16_fetch_usbserialv>:
{
   d8550:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8552:	4c0f      	ldr	r4, [pc, #60]	; (d8590 <_Z16_fetch_usbserialv+0x40>)
{
   d8554:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8556:	a803      	add	r0, sp, #12
   d8558:	f7ff fff1 	bl	d853e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d855c:	7821      	ldrb	r1, [r4, #0]
   d855e:	f3bf 8f5b 	dmb	ish
   d8562:	f011 0101 	ands.w	r1, r1, #1
   d8566:	d10f      	bne.n	d8588 <_Z16_fetch_usbserialv+0x38>
   d8568:	4620      	mov	r0, r4
   d856a:	9101      	str	r1, [sp, #4]
   d856c:	f7fb fda4 	bl	d40b8 <__cxa_guard_acquire>
   d8570:	9901      	ldr	r1, [sp, #4]
   d8572:	b148      	cbz	r0, d8588 <_Z16_fetch_usbserialv+0x38>
   d8574:	aa03      	add	r2, sp, #12
   d8576:	4807      	ldr	r0, [pc, #28]	; (d8594 <_Z16_fetch_usbserialv+0x44>)
   d8578:	f7ff ffc6 	bl	d8508 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d857c:	4620      	mov	r0, r4
   d857e:	f7fb fda0 	bl	d40c2 <__cxa_guard_release>
   d8582:	4805      	ldr	r0, [pc, #20]	; (d8598 <_Z16_fetch_usbserialv+0x48>)
   d8584:	f000 fd44 	bl	d9010 <atexit>
	return _usbserial;
}
   d8588:	4802      	ldr	r0, [pc, #8]	; (d8594 <_Z16_fetch_usbserialv+0x44>)
   d858a:	b008      	add	sp, #32
   d858c:	bd10      	pop	{r4, pc}
   d858e:	bf00      	nop
   d8590:	2003e71c 	.word	0x2003e71c
   d8594:	2003e720 	.word	0x2003e720
   d8598:	000d8491 	.word	0x000d8491

000d859c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d859c:	4b01      	ldr	r3, [pc, #4]	; (d85a4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d859e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d85a0:	4770      	bx	lr
   d85a2:	bf00      	nop
   d85a4:	2003df04 	.word	0x2003df04

000d85a8 <serialEventRun>:
{
   d85a8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d85aa:	4b0b      	ldr	r3, [pc, #44]	; (d85d8 <serialEventRun+0x30>)
   d85ac:	b143      	cbz	r3, d85c0 <serialEventRun+0x18>
   d85ae:	f7ff ffcf 	bl	d8550 <_Z16_fetch_usbserialv>
   d85b2:	6803      	ldr	r3, [r0, #0]
   d85b4:	691b      	ldr	r3, [r3, #16]
   d85b6:	4798      	blx	r3
   d85b8:	2800      	cmp	r0, #0
   d85ba:	dd01      	ble.n	d85c0 <serialEventRun+0x18>
        serialEvent();
   d85bc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d85c0:	4b06      	ldr	r3, [pc, #24]	; (d85dc <serialEventRun+0x34>)
   d85c2:	b143      	cbz	r3, d85d6 <serialEventRun+0x2e>
   d85c4:	f7ff ff3c 	bl	d8440 <_Z22__fetch_global_Serial1v>
   d85c8:	6803      	ldr	r3, [r0, #0]
   d85ca:	691b      	ldr	r3, [r3, #16]
   d85cc:	4798      	blx	r3
   d85ce:	2800      	cmp	r0, #0
   d85d0:	dd01      	ble.n	d85d6 <serialEventRun+0x2e>
        serialEvent1();
   d85d2:	f3af 8000 	nop.w
}
   d85d6:	bd08      	pop	{r3, pc}
	...

000d85e0 <_post_loop>:
{
   d85e0:	b508      	push	{r3, lr}
	serialEventRun();
   d85e2:	f7ff ffe1 	bl	d85a8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d85e6:	f7fd fb4d 	bl	d5c84 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d85ea:	4b01      	ldr	r3, [pc, #4]	; (d85f0 <_post_loop+0x10>)
   d85ec:	6018      	str	r0, [r3, #0]
}
   d85ee:	bd08      	pop	{r3, pc}
   d85f0:	2003e73c 	.word	0x2003e73c

000d85f4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d85f4:	4805      	ldr	r0, [pc, #20]	; (d860c <_Z33system_initialize_user_backup_ramv+0x18>)
   d85f6:	4a06      	ldr	r2, [pc, #24]	; (d8610 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d85f8:	4906      	ldr	r1, [pc, #24]	; (d8614 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d85fa:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d85fc:	1a12      	subs	r2, r2, r0
   d85fe:	f000 fd0d 	bl	d901c <memcpy>
    __backup_sram_signature = signature;
   d8602:	4b05      	ldr	r3, [pc, #20]	; (d8618 <_Z33system_initialize_user_backup_ramv+0x24>)
   d8604:	4a05      	ldr	r2, [pc, #20]	; (d861c <_Z33system_initialize_user_backup_ramv+0x28>)
   d8606:	601a      	str	r2, [r3, #0]
}
   d8608:	bd08      	pop	{r3, pc}
   d860a:	bf00      	nop
   d860c:	2003f400 	.word	0x2003f400
   d8610:	2003f408 	.word	0x2003f408
   d8614:	000d9bc0 	.word	0x000d9bc0
   d8618:	2003f404 	.word	0x2003f404
   d861c:	9a271c1e 	.word	0x9a271c1e

000d8620 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8620:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8622:	2300      	movs	r3, #0
   d8624:	9300      	str	r3, [sp, #0]
   d8626:	461a      	mov	r2, r3
   d8628:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d862c:	f7fd fcfe 	bl	d602c <system_ctrl_set_result>
}
   d8630:	b003      	add	sp, #12
   d8632:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8638 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d8638:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d863a:	8843      	ldrh	r3, [r0, #2]
   d863c:	2b0a      	cmp	r3, #10
   d863e:	d008      	beq.n	d8652 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8640:	2b50      	cmp	r3, #80	; 0x50
   d8642:	d10b      	bne.n	d865c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d8644:	4b09      	ldr	r3, [pc, #36]	; (d866c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8646:	681b      	ldr	r3, [r3, #0]
   d8648:	b14b      	cbz	r3, d865e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d864a:	b003      	add	sp, #12
   d864c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d8650:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d8652:	f7ff ffe5 	bl	d8620 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d8656:	b003      	add	sp, #12
   d8658:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d865c:	2300      	movs	r3, #0
   d865e:	9300      	str	r3, [sp, #0]
   d8660:	461a      	mov	r2, r3
   d8662:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8666:	f7fd fce1 	bl	d602c <system_ctrl_set_result>
}
   d866a:	e7f4      	b.n	d8656 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d866c:	2003e738 	.word	0x2003e738

000d8670 <module_user_init_hook>:
{
   d8670:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8672:	4812      	ldr	r0, [pc, #72]	; (d86bc <module_user_init_hook+0x4c>)
   d8674:	2100      	movs	r1, #0
   d8676:	f7fd fda3 	bl	d61c0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d867a:	4b11      	ldr	r3, [pc, #68]	; (d86c0 <module_user_init_hook+0x50>)
   d867c:	681a      	ldr	r2, [r3, #0]
   d867e:	4b11      	ldr	r3, [pc, #68]	; (d86c4 <module_user_init_hook+0x54>)
   d8680:	429a      	cmp	r2, r3
   d8682:	4b11      	ldr	r3, [pc, #68]	; (d86c8 <module_user_init_hook+0x58>)
   d8684:	bf0c      	ite	eq
   d8686:	2201      	moveq	r2, #1
   d8688:	2200      	movne	r2, #0
   d868a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d868c:	d001      	beq.n	d8692 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d868e:	f7ff ffb1 	bl	d85f4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8692:	f7fd fae7 	bl	d5c64 <HAL_RNG_GetRandomNumber>
   d8696:	4604      	mov	r4, r0
    srand(seed);
   d8698:	f000 fcf0 	bl	d907c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d869c:	4b0b      	ldr	r3, [pc, #44]	; (d86cc <module_user_init_hook+0x5c>)
   d869e:	b113      	cbz	r3, d86a6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d86a0:	4620      	mov	r0, r4
   d86a2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d86a6:	2100      	movs	r1, #0
   d86a8:	4808      	ldr	r0, [pc, #32]	; (d86cc <module_user_init_hook+0x5c>)
   d86aa:	f7fd fce9 	bl	d6080 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d86ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d86b2:	4807      	ldr	r0, [pc, #28]	; (d86d0 <module_user_init_hook+0x60>)
   d86b4:	2100      	movs	r1, #0
   d86b6:	f7fd bcaf 	b.w	d6018 <system_ctrl_set_app_request_handler>
   d86ba:	bf00      	nop
   d86bc:	000d859d 	.word	0x000d859d
   d86c0:	2003f404 	.word	0x2003f404
   d86c4:	9a271c1e 	.word	0x9a271c1e
   d86c8:	2003e734 	.word	0x2003e734
   d86cc:	00000000 	.word	0x00000000
   d86d0:	000d8639 	.word	0x000d8639

000d86d4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d86d4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d86d6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d86d8:	d902      	bls.n	d86e0 <pinAvailable+0xc>
    return false;
   d86da:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d86dc:	b002      	add	sp, #8
   d86de:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d86e0:	f1a0 030b 	sub.w	r3, r0, #11
   d86e4:	2b02      	cmp	r3, #2
   d86e6:	d81a      	bhi.n	d871e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d86e8:	4c17      	ldr	r4, [pc, #92]	; (d8748 <pinAvailable+0x74>)
   d86ea:	7821      	ldrb	r1, [r4, #0]
   d86ec:	f3bf 8f5b 	dmb	ish
   d86f0:	f011 0101 	ands.w	r1, r1, #1
   d86f4:	d10b      	bne.n	d870e <pinAvailable+0x3a>
   d86f6:	4620      	mov	r0, r4
   d86f8:	9101      	str	r1, [sp, #4]
   d86fa:	f7fb fcdd 	bl	d40b8 <__cxa_guard_acquire>
   d86fe:	9901      	ldr	r1, [sp, #4]
   d8700:	b128      	cbz	r0, d870e <pinAvailable+0x3a>
   d8702:	4812      	ldr	r0, [pc, #72]	; (d874c <pinAvailable+0x78>)
   d8704:	f7ff fca0 	bl	d8048 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8708:	4620      	mov	r0, r4
   d870a:	f7fb fcda 	bl	d40c2 <__cxa_guard_release>
   d870e:	4b0f      	ldr	r3, [pc, #60]	; (d874c <pinAvailable+0x78>)
   d8710:	7818      	ldrb	r0, [r3, #0]
   d8712:	f7fd fb67 	bl	d5de4 <hal_spi_is_enabled>
   d8716:	2800      	cmp	r0, #0
   d8718:	d1df      	bne.n	d86da <pinAvailable+0x6>
  return true; // 'pin' is available
   d871a:	2001      	movs	r0, #1
   d871c:	e7de      	b.n	d86dc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d871e:	2801      	cmp	r0, #1
   d8720:	d809      	bhi.n	d8736 <pinAvailable+0x62>
   d8722:	f000 f859 	bl	d87d8 <_Z19__fetch_global_Wirev>
   d8726:	2100      	movs	r1, #0
   d8728:	7c00      	ldrb	r0, [r0, #16]
   d872a:	f7fd fb13 	bl	d5d54 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d872e:	f080 0001 	eor.w	r0, r0, #1
   d8732:	b2c0      	uxtb	r0, r0
   d8734:	e7d2      	b.n	d86dc <pinAvailable+0x8>
   d8736:	3809      	subs	r0, #9
   d8738:	2801      	cmp	r0, #1
   d873a:	d8ee      	bhi.n	d871a <pinAvailable+0x46>
   d873c:	f7ff fe80 	bl	d8440 <_Z22__fetch_global_Serial1v>
   d8740:	7c00      	ldrb	r0, [r0, #16]
   d8742:	f7fd fbaf 	bl	d5ea4 <hal_usart_is_enabled>
   d8746:	e7f2      	b.n	d872e <pinAvailable+0x5a>
   d8748:	2003e330 	.word	0x2003e330
   d874c:	2003e334 	.word	0x2003e334

000d8750 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8750:	2823      	cmp	r0, #35	; 0x23
{
   d8752:	b538      	push	{r3, r4, r5, lr}
   d8754:	4604      	mov	r4, r0
   d8756:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8758:	d80a      	bhi.n	d8770 <pinMode+0x20>
   d875a:	29ff      	cmp	r1, #255	; 0xff
   d875c:	d008      	beq.n	d8770 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d875e:	f7ff ffb9 	bl	d86d4 <pinAvailable>
   d8762:	b128      	cbz	r0, d8770 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8764:	4629      	mov	r1, r5
   d8766:	4620      	mov	r0, r4
}
   d8768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d876c:	f7fd baa2 	b.w	d5cb4 <HAL_Pin_Mode>
}
   d8770:	bd38      	pop	{r3, r4, r5, pc}

000d8772 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8772:	b538      	push	{r3, r4, r5, lr}
   d8774:	4604      	mov	r4, r0
   d8776:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8778:	f7fd faa4 	bl	d5cc4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d877c:	28ff      	cmp	r0, #255	; 0xff
   d877e:	d010      	beq.n	d87a2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d8780:	2806      	cmp	r0, #6
   d8782:	d804      	bhi.n	d878e <digitalWrite+0x1c>
   d8784:	234d      	movs	r3, #77	; 0x4d
   d8786:	fa23 f000 	lsr.w	r0, r3, r0
   d878a:	07c3      	lsls	r3, r0, #31
   d878c:	d409      	bmi.n	d87a2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d878e:	4620      	mov	r0, r4
   d8790:	f7ff ffa0 	bl	d86d4 <pinAvailable>
   d8794:	b128      	cbz	r0, d87a2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8796:	4629      	mov	r1, r5
   d8798:	4620      	mov	r0, r4
}
   d879a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d879e:	f7fd ba99 	b.w	d5cd4 <HAL_GPIO_Write>
}
   d87a2:	bd38      	pop	{r3, r4, r5, pc}

000d87a4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d87a4:	4770      	bx	lr
	...

000d87a8 <_Z17acquireWireBufferv>:
{
   d87a8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d87aa:	2300      	movs	r3, #0
   d87ac:	2520      	movs	r5, #32
   d87ae:	8043      	strh	r3, [r0, #2]
   d87b0:	2314      	movs	r3, #20
{
   d87b2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d87b4:	8003      	strh	r3, [r0, #0]
   d87b6:	6085      	str	r5, [r0, #8]
   d87b8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d87ba:	4906      	ldr	r1, [pc, #24]	; (d87d4 <_Z17acquireWireBufferv+0x2c>)
   d87bc:	4628      	mov	r0, r5
   d87be:	f000 f833 	bl	d8828 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d87c2:	4904      	ldr	r1, [pc, #16]	; (d87d4 <_Z17acquireWireBufferv+0x2c>)
	};
   d87c4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d87c6:	4628      	mov	r0, r5
   d87c8:	f000 f82e 	bl	d8828 <_ZnajRKSt9nothrow_t>
	};
   d87cc:	60e0      	str	r0, [r4, #12]
}
   d87ce:	4620      	mov	r0, r4
   d87d0:	bd38      	pop	{r3, r4, r5, pc}
   d87d2:	bf00      	nop
   d87d4:	000d9a88 	.word	0x000d9a88

000d87d8 <_Z19__fetch_global_Wirev>:
{
   d87d8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d87da:	4d0e      	ldr	r5, [pc, #56]	; (d8814 <_Z19__fetch_global_Wirev+0x3c>)
   d87dc:	7829      	ldrb	r1, [r5, #0]
   d87de:	f3bf 8f5b 	dmb	ish
   d87e2:	f011 0401 	ands.w	r4, r1, #1
{
   d87e6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d87e8:	d111      	bne.n	d880e <_Z19__fetch_global_Wirev+0x36>
   d87ea:	4628      	mov	r0, r5
   d87ec:	f7fb fc64 	bl	d40b8 <__cxa_guard_acquire>
   d87f0:	b168      	cbz	r0, d880e <_Z19__fetch_global_Wirev+0x36>
   d87f2:	a801      	add	r0, sp, #4
   d87f4:	f7ff ffd8 	bl	d87a8 <_Z17acquireWireBufferv>
   d87f8:	aa01      	add	r2, sp, #4
   d87fa:	4621      	mov	r1, r4
   d87fc:	4806      	ldr	r0, [pc, #24]	; (d8818 <_Z19__fetch_global_Wirev+0x40>)
   d87fe:	f7fe f87b 	bl	d68f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8802:	4628      	mov	r0, r5
   d8804:	f7fb fc5d 	bl	d40c2 <__cxa_guard_release>
   d8808:	4804      	ldr	r0, [pc, #16]	; (d881c <_Z19__fetch_global_Wirev+0x44>)
   d880a:	f000 fc01 	bl	d9010 <atexit>
	return wire;
}
   d880e:	4802      	ldr	r0, [pc, #8]	; (d8818 <_Z19__fetch_global_Wirev+0x40>)
   d8810:	b007      	add	sp, #28
   d8812:	bd30      	pop	{r4, r5, pc}
   d8814:	2003e740 	.word	0x2003e740
   d8818:	2003e744 	.word	0x2003e744
   d881c:	000d87a5 	.word	0x000d87a5

000d8820 <_ZdlPvj>:
   d8820:	f7fb bc3d 	b.w	d409e <_ZdlPv>

000d8824 <_ZnwjRKSt9nothrow_t>:
   d8824:	f7fb bc37 	b.w	d4096 <_Znwj>

000d8828 <_ZnajRKSt9nothrow_t>:
   d8828:	f7fb bc37 	b.w	d409a <_Znaj>

000d882c <_ZSt25__throw_bad_function_callv>:
   d882c:	b508      	push	{r3, lr}
   d882e:	f7fd fcb7 	bl	d61a0 <abort>
	...

000d8834 <__aeabi_drsub>:
   d8834:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8838:	e002      	b.n	d8840 <__adddf3>
   d883a:	bf00      	nop

000d883c <__aeabi_dsub>:
   d883c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8840 <__adddf3>:
   d8840:	b530      	push	{r4, r5, lr}
   d8842:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8846:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d884a:	ea94 0f05 	teq	r4, r5
   d884e:	bf08      	it	eq
   d8850:	ea90 0f02 	teqeq	r0, r2
   d8854:	bf1f      	itttt	ne
   d8856:	ea54 0c00 	orrsne.w	ip, r4, r0
   d885a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d885e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8862:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8866:	f000 80e2 	beq.w	d8a2e <__adddf3+0x1ee>
   d886a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d886e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8872:	bfb8      	it	lt
   d8874:	426d      	neglt	r5, r5
   d8876:	dd0c      	ble.n	d8892 <__adddf3+0x52>
   d8878:	442c      	add	r4, r5
   d887a:	ea80 0202 	eor.w	r2, r0, r2
   d887e:	ea81 0303 	eor.w	r3, r1, r3
   d8882:	ea82 0000 	eor.w	r0, r2, r0
   d8886:	ea83 0101 	eor.w	r1, r3, r1
   d888a:	ea80 0202 	eor.w	r2, r0, r2
   d888e:	ea81 0303 	eor.w	r3, r1, r3
   d8892:	2d36      	cmp	r5, #54	; 0x36
   d8894:	bf88      	it	hi
   d8896:	bd30      	pophi	{r4, r5, pc}
   d8898:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d889c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d88a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d88a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d88a8:	d002      	beq.n	d88b0 <__adddf3+0x70>
   d88aa:	4240      	negs	r0, r0
   d88ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d88b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d88b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d88b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d88bc:	d002      	beq.n	d88c4 <__adddf3+0x84>
   d88be:	4252      	negs	r2, r2
   d88c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d88c4:	ea94 0f05 	teq	r4, r5
   d88c8:	f000 80a7 	beq.w	d8a1a <__adddf3+0x1da>
   d88cc:	f1a4 0401 	sub.w	r4, r4, #1
   d88d0:	f1d5 0e20 	rsbs	lr, r5, #32
   d88d4:	db0d      	blt.n	d88f2 <__adddf3+0xb2>
   d88d6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d88da:	fa22 f205 	lsr.w	r2, r2, r5
   d88de:	1880      	adds	r0, r0, r2
   d88e0:	f141 0100 	adc.w	r1, r1, #0
   d88e4:	fa03 f20e 	lsl.w	r2, r3, lr
   d88e8:	1880      	adds	r0, r0, r2
   d88ea:	fa43 f305 	asr.w	r3, r3, r5
   d88ee:	4159      	adcs	r1, r3
   d88f0:	e00e      	b.n	d8910 <__adddf3+0xd0>
   d88f2:	f1a5 0520 	sub.w	r5, r5, #32
   d88f6:	f10e 0e20 	add.w	lr, lr, #32
   d88fa:	2a01      	cmp	r2, #1
   d88fc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8900:	bf28      	it	cs
   d8902:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8906:	fa43 f305 	asr.w	r3, r3, r5
   d890a:	18c0      	adds	r0, r0, r3
   d890c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8910:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8914:	d507      	bpl.n	d8926 <__adddf3+0xe6>
   d8916:	f04f 0e00 	mov.w	lr, #0
   d891a:	f1dc 0c00 	rsbs	ip, ip, #0
   d891e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8922:	eb6e 0101 	sbc.w	r1, lr, r1
   d8926:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d892a:	d31b      	bcc.n	d8964 <__adddf3+0x124>
   d892c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8930:	d30c      	bcc.n	d894c <__adddf3+0x10c>
   d8932:	0849      	lsrs	r1, r1, #1
   d8934:	ea5f 0030 	movs.w	r0, r0, rrx
   d8938:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d893c:	f104 0401 	add.w	r4, r4, #1
   d8940:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8944:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8948:	f080 809a 	bcs.w	d8a80 <__adddf3+0x240>
   d894c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8950:	bf08      	it	eq
   d8952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8956:	f150 0000 	adcs.w	r0, r0, #0
   d895a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d895e:	ea41 0105 	orr.w	r1, r1, r5
   d8962:	bd30      	pop	{r4, r5, pc}
   d8964:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8968:	4140      	adcs	r0, r0
   d896a:	eb41 0101 	adc.w	r1, r1, r1
   d896e:	3c01      	subs	r4, #1
   d8970:	bf28      	it	cs
   d8972:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8976:	d2e9      	bcs.n	d894c <__adddf3+0x10c>
   d8978:	f091 0f00 	teq	r1, #0
   d897c:	bf04      	itt	eq
   d897e:	4601      	moveq	r1, r0
   d8980:	2000      	moveq	r0, #0
   d8982:	fab1 f381 	clz	r3, r1
   d8986:	bf08      	it	eq
   d8988:	3320      	addeq	r3, #32
   d898a:	f1a3 030b 	sub.w	r3, r3, #11
   d898e:	f1b3 0220 	subs.w	r2, r3, #32
   d8992:	da0c      	bge.n	d89ae <__adddf3+0x16e>
   d8994:	320c      	adds	r2, #12
   d8996:	dd08      	ble.n	d89aa <__adddf3+0x16a>
   d8998:	f102 0c14 	add.w	ip, r2, #20
   d899c:	f1c2 020c 	rsb	r2, r2, #12
   d89a0:	fa01 f00c 	lsl.w	r0, r1, ip
   d89a4:	fa21 f102 	lsr.w	r1, r1, r2
   d89a8:	e00c      	b.n	d89c4 <__adddf3+0x184>
   d89aa:	f102 0214 	add.w	r2, r2, #20
   d89ae:	bfd8      	it	le
   d89b0:	f1c2 0c20 	rsble	ip, r2, #32
   d89b4:	fa01 f102 	lsl.w	r1, r1, r2
   d89b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d89bc:	bfdc      	itt	le
   d89be:	ea41 010c 	orrle.w	r1, r1, ip
   d89c2:	4090      	lslle	r0, r2
   d89c4:	1ae4      	subs	r4, r4, r3
   d89c6:	bfa2      	ittt	ge
   d89c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d89cc:	4329      	orrge	r1, r5
   d89ce:	bd30      	popge	{r4, r5, pc}
   d89d0:	ea6f 0404 	mvn.w	r4, r4
   d89d4:	3c1f      	subs	r4, #31
   d89d6:	da1c      	bge.n	d8a12 <__adddf3+0x1d2>
   d89d8:	340c      	adds	r4, #12
   d89da:	dc0e      	bgt.n	d89fa <__adddf3+0x1ba>
   d89dc:	f104 0414 	add.w	r4, r4, #20
   d89e0:	f1c4 0220 	rsb	r2, r4, #32
   d89e4:	fa20 f004 	lsr.w	r0, r0, r4
   d89e8:	fa01 f302 	lsl.w	r3, r1, r2
   d89ec:	ea40 0003 	orr.w	r0, r0, r3
   d89f0:	fa21 f304 	lsr.w	r3, r1, r4
   d89f4:	ea45 0103 	orr.w	r1, r5, r3
   d89f8:	bd30      	pop	{r4, r5, pc}
   d89fa:	f1c4 040c 	rsb	r4, r4, #12
   d89fe:	f1c4 0220 	rsb	r2, r4, #32
   d8a02:	fa20 f002 	lsr.w	r0, r0, r2
   d8a06:	fa01 f304 	lsl.w	r3, r1, r4
   d8a0a:	ea40 0003 	orr.w	r0, r0, r3
   d8a0e:	4629      	mov	r1, r5
   d8a10:	bd30      	pop	{r4, r5, pc}
   d8a12:	fa21 f004 	lsr.w	r0, r1, r4
   d8a16:	4629      	mov	r1, r5
   d8a18:	bd30      	pop	{r4, r5, pc}
   d8a1a:	f094 0f00 	teq	r4, #0
   d8a1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8a22:	bf06      	itte	eq
   d8a24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8a28:	3401      	addeq	r4, #1
   d8a2a:	3d01      	subne	r5, #1
   d8a2c:	e74e      	b.n	d88cc <__adddf3+0x8c>
   d8a2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8a32:	bf18      	it	ne
   d8a34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8a38:	d029      	beq.n	d8a8e <__adddf3+0x24e>
   d8a3a:	ea94 0f05 	teq	r4, r5
   d8a3e:	bf08      	it	eq
   d8a40:	ea90 0f02 	teqeq	r0, r2
   d8a44:	d005      	beq.n	d8a52 <__adddf3+0x212>
   d8a46:	ea54 0c00 	orrs.w	ip, r4, r0
   d8a4a:	bf04      	itt	eq
   d8a4c:	4619      	moveq	r1, r3
   d8a4e:	4610      	moveq	r0, r2
   d8a50:	bd30      	pop	{r4, r5, pc}
   d8a52:	ea91 0f03 	teq	r1, r3
   d8a56:	bf1e      	ittt	ne
   d8a58:	2100      	movne	r1, #0
   d8a5a:	2000      	movne	r0, #0
   d8a5c:	bd30      	popne	{r4, r5, pc}
   d8a5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8a62:	d105      	bne.n	d8a70 <__adddf3+0x230>
   d8a64:	0040      	lsls	r0, r0, #1
   d8a66:	4149      	adcs	r1, r1
   d8a68:	bf28      	it	cs
   d8a6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8a6e:	bd30      	pop	{r4, r5, pc}
   d8a70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8a74:	bf3c      	itt	cc
   d8a76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8a7a:	bd30      	popcc	{r4, r5, pc}
   d8a7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8a80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8a84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8a88:	f04f 0000 	mov.w	r0, #0
   d8a8c:	bd30      	pop	{r4, r5, pc}
   d8a8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8a92:	bf1a      	itte	ne
   d8a94:	4619      	movne	r1, r3
   d8a96:	4610      	movne	r0, r2
   d8a98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8a9c:	bf1c      	itt	ne
   d8a9e:	460b      	movne	r3, r1
   d8aa0:	4602      	movne	r2, r0
   d8aa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8aa6:	bf06      	itte	eq
   d8aa8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8aac:	ea91 0f03 	teqeq	r1, r3
   d8ab0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8ab4:	bd30      	pop	{r4, r5, pc}
   d8ab6:	bf00      	nop

000d8ab8 <__aeabi_ui2d>:
   d8ab8:	f090 0f00 	teq	r0, #0
   d8abc:	bf04      	itt	eq
   d8abe:	2100      	moveq	r1, #0
   d8ac0:	4770      	bxeq	lr
   d8ac2:	b530      	push	{r4, r5, lr}
   d8ac4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8ac8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8acc:	f04f 0500 	mov.w	r5, #0
   d8ad0:	f04f 0100 	mov.w	r1, #0
   d8ad4:	e750      	b.n	d8978 <__adddf3+0x138>
   d8ad6:	bf00      	nop

000d8ad8 <__aeabi_i2d>:
   d8ad8:	f090 0f00 	teq	r0, #0
   d8adc:	bf04      	itt	eq
   d8ade:	2100      	moveq	r1, #0
   d8ae0:	4770      	bxeq	lr
   d8ae2:	b530      	push	{r4, r5, lr}
   d8ae4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8ae8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8aec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8af0:	bf48      	it	mi
   d8af2:	4240      	negmi	r0, r0
   d8af4:	f04f 0100 	mov.w	r1, #0
   d8af8:	e73e      	b.n	d8978 <__adddf3+0x138>
   d8afa:	bf00      	nop

000d8afc <__aeabi_f2d>:
   d8afc:	0042      	lsls	r2, r0, #1
   d8afe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8b02:	ea4f 0131 	mov.w	r1, r1, rrx
   d8b06:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8b0a:	bf1f      	itttt	ne
   d8b0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8b10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8b14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8b18:	4770      	bxne	lr
   d8b1a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8b1e:	bf08      	it	eq
   d8b20:	4770      	bxeq	lr
   d8b22:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8b26:	bf04      	itt	eq
   d8b28:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8b2c:	4770      	bxeq	lr
   d8b2e:	b530      	push	{r4, r5, lr}
   d8b30:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8b34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8b38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8b3c:	e71c      	b.n	d8978 <__adddf3+0x138>
   d8b3e:	bf00      	nop

000d8b40 <__aeabi_ul2d>:
   d8b40:	ea50 0201 	orrs.w	r2, r0, r1
   d8b44:	bf08      	it	eq
   d8b46:	4770      	bxeq	lr
   d8b48:	b530      	push	{r4, r5, lr}
   d8b4a:	f04f 0500 	mov.w	r5, #0
   d8b4e:	e00a      	b.n	d8b66 <__aeabi_l2d+0x16>

000d8b50 <__aeabi_l2d>:
   d8b50:	ea50 0201 	orrs.w	r2, r0, r1
   d8b54:	bf08      	it	eq
   d8b56:	4770      	bxeq	lr
   d8b58:	b530      	push	{r4, r5, lr}
   d8b5a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8b5e:	d502      	bpl.n	d8b66 <__aeabi_l2d+0x16>
   d8b60:	4240      	negs	r0, r0
   d8b62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8b66:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8b6a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8b6e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8b72:	f43f aed8 	beq.w	d8926 <__adddf3+0xe6>
   d8b76:	f04f 0203 	mov.w	r2, #3
   d8b7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8b7e:	bf18      	it	ne
   d8b80:	3203      	addne	r2, #3
   d8b82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8b86:	bf18      	it	ne
   d8b88:	3203      	addne	r2, #3
   d8b8a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8b8e:	f1c2 0320 	rsb	r3, r2, #32
   d8b92:	fa00 fc03 	lsl.w	ip, r0, r3
   d8b96:	fa20 f002 	lsr.w	r0, r0, r2
   d8b9a:	fa01 fe03 	lsl.w	lr, r1, r3
   d8b9e:	ea40 000e 	orr.w	r0, r0, lr
   d8ba2:	fa21 f102 	lsr.w	r1, r1, r2
   d8ba6:	4414      	add	r4, r2
   d8ba8:	e6bd      	b.n	d8926 <__adddf3+0xe6>
   d8baa:	bf00      	nop

000d8bac <__aeabi_dmul>:
   d8bac:	b570      	push	{r4, r5, r6, lr}
   d8bae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8bb2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8bb6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8bba:	bf1d      	ittte	ne
   d8bbc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8bc0:	ea94 0f0c 	teqne	r4, ip
   d8bc4:	ea95 0f0c 	teqne	r5, ip
   d8bc8:	f000 f8de 	bleq	d8d88 <__aeabi_dmul+0x1dc>
   d8bcc:	442c      	add	r4, r5
   d8bce:	ea81 0603 	eor.w	r6, r1, r3
   d8bd2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8bd6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8bda:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8bde:	bf18      	it	ne
   d8be0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8be4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8be8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8bec:	d038      	beq.n	d8c60 <__aeabi_dmul+0xb4>
   d8bee:	fba0 ce02 	umull	ip, lr, r0, r2
   d8bf2:	f04f 0500 	mov.w	r5, #0
   d8bf6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8bfa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8bfe:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8c02:	f04f 0600 	mov.w	r6, #0
   d8c06:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8c0a:	f09c 0f00 	teq	ip, #0
   d8c0e:	bf18      	it	ne
   d8c10:	f04e 0e01 	orrne.w	lr, lr, #1
   d8c14:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8c18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8c1c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8c20:	d204      	bcs.n	d8c2c <__aeabi_dmul+0x80>
   d8c22:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8c26:	416d      	adcs	r5, r5
   d8c28:	eb46 0606 	adc.w	r6, r6, r6
   d8c2c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8c30:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8c34:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8c38:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8c3c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8c40:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8c44:	bf88      	it	hi
   d8c46:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8c4a:	d81e      	bhi.n	d8c8a <__aeabi_dmul+0xde>
   d8c4c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8c50:	bf08      	it	eq
   d8c52:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8c56:	f150 0000 	adcs.w	r0, r0, #0
   d8c5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8c5e:	bd70      	pop	{r4, r5, r6, pc}
   d8c60:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8c64:	ea46 0101 	orr.w	r1, r6, r1
   d8c68:	ea40 0002 	orr.w	r0, r0, r2
   d8c6c:	ea81 0103 	eor.w	r1, r1, r3
   d8c70:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8c74:	bfc2      	ittt	gt
   d8c76:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8c7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8c7e:	bd70      	popgt	{r4, r5, r6, pc}
   d8c80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8c84:	f04f 0e00 	mov.w	lr, #0
   d8c88:	3c01      	subs	r4, #1
   d8c8a:	f300 80ab 	bgt.w	d8de4 <__aeabi_dmul+0x238>
   d8c8e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8c92:	bfde      	ittt	le
   d8c94:	2000      	movle	r0, #0
   d8c96:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8c9a:	bd70      	pople	{r4, r5, r6, pc}
   d8c9c:	f1c4 0400 	rsb	r4, r4, #0
   d8ca0:	3c20      	subs	r4, #32
   d8ca2:	da35      	bge.n	d8d10 <__aeabi_dmul+0x164>
   d8ca4:	340c      	adds	r4, #12
   d8ca6:	dc1b      	bgt.n	d8ce0 <__aeabi_dmul+0x134>
   d8ca8:	f104 0414 	add.w	r4, r4, #20
   d8cac:	f1c4 0520 	rsb	r5, r4, #32
   d8cb0:	fa00 f305 	lsl.w	r3, r0, r5
   d8cb4:	fa20 f004 	lsr.w	r0, r0, r4
   d8cb8:	fa01 f205 	lsl.w	r2, r1, r5
   d8cbc:	ea40 0002 	orr.w	r0, r0, r2
   d8cc0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8cc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8cc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8ccc:	fa21 f604 	lsr.w	r6, r1, r4
   d8cd0:	eb42 0106 	adc.w	r1, r2, r6
   d8cd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8cd8:	bf08      	it	eq
   d8cda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8cde:	bd70      	pop	{r4, r5, r6, pc}
   d8ce0:	f1c4 040c 	rsb	r4, r4, #12
   d8ce4:	f1c4 0520 	rsb	r5, r4, #32
   d8ce8:	fa00 f304 	lsl.w	r3, r0, r4
   d8cec:	fa20 f005 	lsr.w	r0, r0, r5
   d8cf0:	fa01 f204 	lsl.w	r2, r1, r4
   d8cf4:	ea40 0002 	orr.w	r0, r0, r2
   d8cf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8cfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8d00:	f141 0100 	adc.w	r1, r1, #0
   d8d04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8d08:	bf08      	it	eq
   d8d0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8d0e:	bd70      	pop	{r4, r5, r6, pc}
   d8d10:	f1c4 0520 	rsb	r5, r4, #32
   d8d14:	fa00 f205 	lsl.w	r2, r0, r5
   d8d18:	ea4e 0e02 	orr.w	lr, lr, r2
   d8d1c:	fa20 f304 	lsr.w	r3, r0, r4
   d8d20:	fa01 f205 	lsl.w	r2, r1, r5
   d8d24:	ea43 0302 	orr.w	r3, r3, r2
   d8d28:	fa21 f004 	lsr.w	r0, r1, r4
   d8d2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d30:	fa21 f204 	lsr.w	r2, r1, r4
   d8d34:	ea20 0002 	bic.w	r0, r0, r2
   d8d38:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8d3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8d40:	bf08      	it	eq
   d8d42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8d46:	bd70      	pop	{r4, r5, r6, pc}
   d8d48:	f094 0f00 	teq	r4, #0
   d8d4c:	d10f      	bne.n	d8d6e <__aeabi_dmul+0x1c2>
   d8d4e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8d52:	0040      	lsls	r0, r0, #1
   d8d54:	eb41 0101 	adc.w	r1, r1, r1
   d8d58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d5c:	bf08      	it	eq
   d8d5e:	3c01      	subeq	r4, #1
   d8d60:	d0f7      	beq.n	d8d52 <__aeabi_dmul+0x1a6>
   d8d62:	ea41 0106 	orr.w	r1, r1, r6
   d8d66:	f095 0f00 	teq	r5, #0
   d8d6a:	bf18      	it	ne
   d8d6c:	4770      	bxne	lr
   d8d6e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8d72:	0052      	lsls	r2, r2, #1
   d8d74:	eb43 0303 	adc.w	r3, r3, r3
   d8d78:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8d7c:	bf08      	it	eq
   d8d7e:	3d01      	subeq	r5, #1
   d8d80:	d0f7      	beq.n	d8d72 <__aeabi_dmul+0x1c6>
   d8d82:	ea43 0306 	orr.w	r3, r3, r6
   d8d86:	4770      	bx	lr
   d8d88:	ea94 0f0c 	teq	r4, ip
   d8d8c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8d90:	bf18      	it	ne
   d8d92:	ea95 0f0c 	teqne	r5, ip
   d8d96:	d00c      	beq.n	d8db2 <__aeabi_dmul+0x206>
   d8d98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8d9c:	bf18      	it	ne
   d8d9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8da2:	d1d1      	bne.n	d8d48 <__aeabi_dmul+0x19c>
   d8da4:	ea81 0103 	eor.w	r1, r1, r3
   d8da8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8dac:	f04f 0000 	mov.w	r0, #0
   d8db0:	bd70      	pop	{r4, r5, r6, pc}
   d8db2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8db6:	bf06      	itte	eq
   d8db8:	4610      	moveq	r0, r2
   d8dba:	4619      	moveq	r1, r3
   d8dbc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8dc0:	d019      	beq.n	d8df6 <__aeabi_dmul+0x24a>
   d8dc2:	ea94 0f0c 	teq	r4, ip
   d8dc6:	d102      	bne.n	d8dce <__aeabi_dmul+0x222>
   d8dc8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8dcc:	d113      	bne.n	d8df6 <__aeabi_dmul+0x24a>
   d8dce:	ea95 0f0c 	teq	r5, ip
   d8dd2:	d105      	bne.n	d8de0 <__aeabi_dmul+0x234>
   d8dd4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8dd8:	bf1c      	itt	ne
   d8dda:	4610      	movne	r0, r2
   d8ddc:	4619      	movne	r1, r3
   d8dde:	d10a      	bne.n	d8df6 <__aeabi_dmul+0x24a>
   d8de0:	ea81 0103 	eor.w	r1, r1, r3
   d8de4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8de8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8dec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8df0:	f04f 0000 	mov.w	r0, #0
   d8df4:	bd70      	pop	{r4, r5, r6, pc}
   d8df6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8dfa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8dfe:	bd70      	pop	{r4, r5, r6, pc}

000d8e00 <__aeabi_ddiv>:
   d8e00:	b570      	push	{r4, r5, r6, lr}
   d8e02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8e06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8e0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8e0e:	bf1d      	ittte	ne
   d8e10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8e14:	ea94 0f0c 	teqne	r4, ip
   d8e18:	ea95 0f0c 	teqne	r5, ip
   d8e1c:	f000 f8a7 	bleq	d8f6e <__aeabi_ddiv+0x16e>
   d8e20:	eba4 0405 	sub.w	r4, r4, r5
   d8e24:	ea81 0e03 	eor.w	lr, r1, r3
   d8e28:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8e2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8e30:	f000 8088 	beq.w	d8f44 <__aeabi_ddiv+0x144>
   d8e34:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8e38:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8e3c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8e40:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8e44:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8e48:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8e4c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8e50:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8e54:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8e58:	429d      	cmp	r5, r3
   d8e5a:	bf08      	it	eq
   d8e5c:	4296      	cmpeq	r6, r2
   d8e5e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8e62:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8e66:	d202      	bcs.n	d8e6e <__aeabi_ddiv+0x6e>
   d8e68:	085b      	lsrs	r3, r3, #1
   d8e6a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e6e:	1ab6      	subs	r6, r6, r2
   d8e70:	eb65 0503 	sbc.w	r5, r5, r3
   d8e74:	085b      	lsrs	r3, r3, #1
   d8e76:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e7a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8e7e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8e82:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e86:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e8a:	bf22      	ittt	cs
   d8e8c:	1ab6      	subcs	r6, r6, r2
   d8e8e:	4675      	movcs	r5, lr
   d8e90:	ea40 000c 	orrcs.w	r0, r0, ip
   d8e94:	085b      	lsrs	r3, r3, #1
   d8e96:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e9a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8ea2:	bf22      	ittt	cs
   d8ea4:	1ab6      	subcs	r6, r6, r2
   d8ea6:	4675      	movcs	r5, lr
   d8ea8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8eac:	085b      	lsrs	r3, r3, #1
   d8eae:	ea4f 0232 	mov.w	r2, r2, rrx
   d8eb2:	ebb6 0e02 	subs.w	lr, r6, r2
   d8eb6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8eba:	bf22      	ittt	cs
   d8ebc:	1ab6      	subcs	r6, r6, r2
   d8ebe:	4675      	movcs	r5, lr
   d8ec0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8ec4:	085b      	lsrs	r3, r3, #1
   d8ec6:	ea4f 0232 	mov.w	r2, r2, rrx
   d8eca:	ebb6 0e02 	subs.w	lr, r6, r2
   d8ece:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8ed2:	bf22      	ittt	cs
   d8ed4:	1ab6      	subcs	r6, r6, r2
   d8ed6:	4675      	movcs	r5, lr
   d8ed8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8edc:	ea55 0e06 	orrs.w	lr, r5, r6
   d8ee0:	d018      	beq.n	d8f14 <__aeabi_ddiv+0x114>
   d8ee2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8ee6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8eea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8eee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8ef2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8ef6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8efa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8efe:	d1c0      	bne.n	d8e82 <__aeabi_ddiv+0x82>
   d8f00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8f04:	d10b      	bne.n	d8f1e <__aeabi_ddiv+0x11e>
   d8f06:	ea41 0100 	orr.w	r1, r1, r0
   d8f0a:	f04f 0000 	mov.w	r0, #0
   d8f0e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8f12:	e7b6      	b.n	d8e82 <__aeabi_ddiv+0x82>
   d8f14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8f18:	bf04      	itt	eq
   d8f1a:	4301      	orreq	r1, r0
   d8f1c:	2000      	moveq	r0, #0
   d8f1e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8f22:	bf88      	it	hi
   d8f24:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8f28:	f63f aeaf 	bhi.w	d8c8a <__aeabi_dmul+0xde>
   d8f2c:	ebb5 0c03 	subs.w	ip, r5, r3
   d8f30:	bf04      	itt	eq
   d8f32:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8f36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8f3a:	f150 0000 	adcs.w	r0, r0, #0
   d8f3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8f42:	bd70      	pop	{r4, r5, r6, pc}
   d8f44:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8f48:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8f4c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8f50:	bfc2      	ittt	gt
   d8f52:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8f56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8f5a:	bd70      	popgt	{r4, r5, r6, pc}
   d8f5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8f60:	f04f 0e00 	mov.w	lr, #0
   d8f64:	3c01      	subs	r4, #1
   d8f66:	e690      	b.n	d8c8a <__aeabi_dmul+0xde>
   d8f68:	ea45 0e06 	orr.w	lr, r5, r6
   d8f6c:	e68d      	b.n	d8c8a <__aeabi_dmul+0xde>
   d8f6e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8f72:	ea94 0f0c 	teq	r4, ip
   d8f76:	bf08      	it	eq
   d8f78:	ea95 0f0c 	teqeq	r5, ip
   d8f7c:	f43f af3b 	beq.w	d8df6 <__aeabi_dmul+0x24a>
   d8f80:	ea94 0f0c 	teq	r4, ip
   d8f84:	d10a      	bne.n	d8f9c <__aeabi_ddiv+0x19c>
   d8f86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8f8a:	f47f af34 	bne.w	d8df6 <__aeabi_dmul+0x24a>
   d8f8e:	ea95 0f0c 	teq	r5, ip
   d8f92:	f47f af25 	bne.w	d8de0 <__aeabi_dmul+0x234>
   d8f96:	4610      	mov	r0, r2
   d8f98:	4619      	mov	r1, r3
   d8f9a:	e72c      	b.n	d8df6 <__aeabi_dmul+0x24a>
   d8f9c:	ea95 0f0c 	teq	r5, ip
   d8fa0:	d106      	bne.n	d8fb0 <__aeabi_ddiv+0x1b0>
   d8fa2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8fa6:	f43f aefd 	beq.w	d8da4 <__aeabi_dmul+0x1f8>
   d8faa:	4610      	mov	r0, r2
   d8fac:	4619      	mov	r1, r3
   d8fae:	e722      	b.n	d8df6 <__aeabi_dmul+0x24a>
   d8fb0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8fb4:	bf18      	it	ne
   d8fb6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8fba:	f47f aec5 	bne.w	d8d48 <__aeabi_dmul+0x19c>
   d8fbe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8fc2:	f47f af0d 	bne.w	d8de0 <__aeabi_dmul+0x234>
   d8fc6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8fca:	f47f aeeb 	bne.w	d8da4 <__aeabi_dmul+0x1f8>
   d8fce:	e712      	b.n	d8df6 <__aeabi_dmul+0x24a>

000d8fd0 <__aeabi_d2uiz>:
   d8fd0:	004a      	lsls	r2, r1, #1
   d8fd2:	d211      	bcs.n	d8ff8 <__aeabi_d2uiz+0x28>
   d8fd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8fd8:	d211      	bcs.n	d8ffe <__aeabi_d2uiz+0x2e>
   d8fda:	d50d      	bpl.n	d8ff8 <__aeabi_d2uiz+0x28>
   d8fdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8fe0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8fe4:	d40e      	bmi.n	d9004 <__aeabi_d2uiz+0x34>
   d8fe6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8fea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8fee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8ff2:	fa23 f002 	lsr.w	r0, r3, r2
   d8ff6:	4770      	bx	lr
   d8ff8:	f04f 0000 	mov.w	r0, #0
   d8ffc:	4770      	bx	lr
   d8ffe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9002:	d102      	bne.n	d900a <__aeabi_d2uiz+0x3a>
   d9004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9008:	4770      	bx	lr
   d900a:	f04f 0000 	mov.w	r0, #0
   d900e:	4770      	bx	lr

000d9010 <atexit>:
   d9010:	2300      	movs	r3, #0
   d9012:	4601      	mov	r1, r0
   d9014:	461a      	mov	r2, r3
   d9016:	4618      	mov	r0, r3
   d9018:	f000 b982 	b.w	d9320 <__register_exitproc>

000d901c <memcpy>:
   d901c:	440a      	add	r2, r1
   d901e:	4291      	cmp	r1, r2
   d9020:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d9024:	d100      	bne.n	d9028 <memcpy+0xc>
   d9026:	4770      	bx	lr
   d9028:	b510      	push	{r4, lr}
   d902a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d902e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9032:	4291      	cmp	r1, r2
   d9034:	d1f9      	bne.n	d902a <memcpy+0xe>
   d9036:	bd10      	pop	{r4, pc}

000d9038 <memmove>:
   d9038:	4288      	cmp	r0, r1
   d903a:	b510      	push	{r4, lr}
   d903c:	eb01 0402 	add.w	r4, r1, r2
   d9040:	d902      	bls.n	d9048 <memmove+0x10>
   d9042:	4284      	cmp	r4, r0
   d9044:	4623      	mov	r3, r4
   d9046:	d807      	bhi.n	d9058 <memmove+0x20>
   d9048:	1e43      	subs	r3, r0, #1
   d904a:	42a1      	cmp	r1, r4
   d904c:	d008      	beq.n	d9060 <memmove+0x28>
   d904e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9052:	f803 2f01 	strb.w	r2, [r3, #1]!
   d9056:	e7f8      	b.n	d904a <memmove+0x12>
   d9058:	4402      	add	r2, r0
   d905a:	4601      	mov	r1, r0
   d905c:	428a      	cmp	r2, r1
   d905e:	d100      	bne.n	d9062 <memmove+0x2a>
   d9060:	bd10      	pop	{r4, pc}
   d9062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9066:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d906a:	e7f7      	b.n	d905c <memmove+0x24>

000d906c <memset>:
   d906c:	4402      	add	r2, r0
   d906e:	4603      	mov	r3, r0
   d9070:	4293      	cmp	r3, r2
   d9072:	d100      	bne.n	d9076 <memset+0xa>
   d9074:	4770      	bx	lr
   d9076:	f803 1b01 	strb.w	r1, [r3], #1
   d907a:	e7f9      	b.n	d9070 <memset+0x4>

000d907c <srand>:
   d907c:	b538      	push	{r3, r4, r5, lr}
   d907e:	4b0d      	ldr	r3, [pc, #52]	; (d90b4 <srand+0x38>)
   d9080:	681d      	ldr	r5, [r3, #0]
   d9082:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9084:	4604      	mov	r4, r0
   d9086:	b97b      	cbnz	r3, d90a8 <srand+0x2c>
   d9088:	2018      	movs	r0, #24
   d908a:	f7fd f861 	bl	d6150 <malloc>
   d908e:	4a0a      	ldr	r2, [pc, #40]	; (d90b8 <srand+0x3c>)
   d9090:	4b0a      	ldr	r3, [pc, #40]	; (d90bc <srand+0x40>)
   d9092:	63a8      	str	r0, [r5, #56]	; 0x38
   d9094:	e9c0 2300 	strd	r2, r3, [r0]
   d9098:	4b09      	ldr	r3, [pc, #36]	; (d90c0 <srand+0x44>)
   d909a:	6083      	str	r3, [r0, #8]
   d909c:	230b      	movs	r3, #11
   d909e:	8183      	strh	r3, [r0, #12]
   d90a0:	2201      	movs	r2, #1
   d90a2:	2300      	movs	r3, #0
   d90a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d90a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d90aa:	2200      	movs	r2, #0
   d90ac:	611c      	str	r4, [r3, #16]
   d90ae:	615a      	str	r2, [r3, #20]
   d90b0:	bd38      	pop	{r3, r4, r5, pc}
   d90b2:	bf00      	nop
   d90b4:	2003df04 	.word	0x2003df04
   d90b8:	abcd330e 	.word	0xabcd330e
   d90bc:	e66d1234 	.word	0xe66d1234
   d90c0:	0005deec 	.word	0x0005deec

000d90c4 <rand>:
   d90c4:	4b13      	ldr	r3, [pc, #76]	; (d9114 <rand+0x50>)
   d90c6:	b510      	push	{r4, lr}
   d90c8:	681c      	ldr	r4, [r3, #0]
   d90ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d90cc:	b97b      	cbnz	r3, d90ee <rand+0x2a>
   d90ce:	2018      	movs	r0, #24
   d90d0:	f7fd f83e 	bl	d6150 <malloc>
   d90d4:	4a10      	ldr	r2, [pc, #64]	; (d9118 <rand+0x54>)
   d90d6:	4b11      	ldr	r3, [pc, #68]	; (d911c <rand+0x58>)
   d90d8:	63a0      	str	r0, [r4, #56]	; 0x38
   d90da:	e9c0 2300 	strd	r2, r3, [r0]
   d90de:	4b10      	ldr	r3, [pc, #64]	; (d9120 <rand+0x5c>)
   d90e0:	6083      	str	r3, [r0, #8]
   d90e2:	230b      	movs	r3, #11
   d90e4:	8183      	strh	r3, [r0, #12]
   d90e6:	2201      	movs	r2, #1
   d90e8:	2300      	movs	r3, #0
   d90ea:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d90ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d90f0:	480c      	ldr	r0, [pc, #48]	; (d9124 <rand+0x60>)
   d90f2:	690a      	ldr	r2, [r1, #16]
   d90f4:	694b      	ldr	r3, [r1, #20]
   d90f6:	4c0c      	ldr	r4, [pc, #48]	; (d9128 <rand+0x64>)
   d90f8:	4350      	muls	r0, r2
   d90fa:	fb04 0003 	mla	r0, r4, r3, r0
   d90fe:	fba2 3404 	umull	r3, r4, r2, r4
   d9102:	1c5a      	adds	r2, r3, #1
   d9104:	4404      	add	r4, r0
   d9106:	f144 0000 	adc.w	r0, r4, #0
   d910a:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d910e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d9112:	bd10      	pop	{r4, pc}
   d9114:	2003df04 	.word	0x2003df04
   d9118:	abcd330e 	.word	0xabcd330e
   d911c:	e66d1234 	.word	0xe66d1234
   d9120:	0005deec 	.word	0x0005deec
   d9124:	5851f42d 	.word	0x5851f42d
   d9128:	4c957f2d 	.word	0x4c957f2d

000d912c <strchr>:
   d912c:	b2c9      	uxtb	r1, r1
   d912e:	4603      	mov	r3, r0
   d9130:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9134:	b11a      	cbz	r2, d913e <strchr+0x12>
   d9136:	428a      	cmp	r2, r1
   d9138:	d1f9      	bne.n	d912e <strchr+0x2>
   d913a:	4618      	mov	r0, r3
   d913c:	4770      	bx	lr
   d913e:	2900      	cmp	r1, #0
   d9140:	bf18      	it	ne
   d9142:	2300      	movne	r3, #0
   d9144:	e7f9      	b.n	d913a <strchr+0xe>

000d9146 <strchrnul>:
   d9146:	b510      	push	{r4, lr}
   d9148:	4604      	mov	r4, r0
   d914a:	f7ff ffef 	bl	d912c <strchr>
   d914e:	b918      	cbnz	r0, d9158 <strchrnul+0x12>
   d9150:	4620      	mov	r0, r4
   d9152:	f000 f832 	bl	d91ba <strlen>
   d9156:	4420      	add	r0, r4
   d9158:	bd10      	pop	{r4, pc}

000d915a <strcmp>:
   d915a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d915e:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9162:	2a01      	cmp	r2, #1
   d9164:	bf28      	it	cs
   d9166:	429a      	cmpcs	r2, r3
   d9168:	d0f7      	beq.n	d915a <strcmp>
   d916a:	1ad0      	subs	r0, r2, r3
   d916c:	4770      	bx	lr

000d916e <strcpy>:
   d916e:	4603      	mov	r3, r0
   d9170:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9174:	f803 2b01 	strb.w	r2, [r3], #1
   d9178:	2a00      	cmp	r2, #0
   d917a:	d1f9      	bne.n	d9170 <strcpy+0x2>
   d917c:	4770      	bx	lr
	...

000d9180 <strdup>:
   d9180:	4b02      	ldr	r3, [pc, #8]	; (d918c <strdup+0xc>)
   d9182:	4601      	mov	r1, r0
   d9184:	6818      	ldr	r0, [r3, #0]
   d9186:	f000 b803 	b.w	d9190 <_strdup_r>
   d918a:	bf00      	nop
   d918c:	2003df04 	.word	0x2003df04

000d9190 <_strdup_r>:
   d9190:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9192:	4604      	mov	r4, r0
   d9194:	4608      	mov	r0, r1
   d9196:	460d      	mov	r5, r1
   d9198:	f000 f80f 	bl	d91ba <strlen>
   d919c:	1c42      	adds	r2, r0, #1
   d919e:	4611      	mov	r1, r2
   d91a0:	4620      	mov	r0, r4
   d91a2:	9201      	str	r2, [sp, #4]
   d91a4:	f7fd f804 	bl	d61b0 <_malloc_r>
   d91a8:	4604      	mov	r4, r0
   d91aa:	b118      	cbz	r0, d91b4 <_strdup_r+0x24>
   d91ac:	9a01      	ldr	r2, [sp, #4]
   d91ae:	4629      	mov	r1, r5
   d91b0:	f7ff ff34 	bl	d901c <memcpy>
   d91b4:	4620      	mov	r0, r4
   d91b6:	b003      	add	sp, #12
   d91b8:	bd30      	pop	{r4, r5, pc}

000d91ba <strlen>:
   d91ba:	4603      	mov	r3, r0
   d91bc:	f813 2b01 	ldrb.w	r2, [r3], #1
   d91c0:	2a00      	cmp	r2, #0
   d91c2:	d1fb      	bne.n	d91bc <strlen+0x2>
   d91c4:	1a18      	subs	r0, r3, r0
   d91c6:	3801      	subs	r0, #1
   d91c8:	4770      	bx	lr

000d91ca <strncmp>:
   d91ca:	b510      	push	{r4, lr}
   d91cc:	b16a      	cbz	r2, d91ea <strncmp+0x20>
   d91ce:	3901      	subs	r1, #1
   d91d0:	1884      	adds	r4, r0, r2
   d91d2:	f810 3b01 	ldrb.w	r3, [r0], #1
   d91d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d91da:	4293      	cmp	r3, r2
   d91dc:	d103      	bne.n	d91e6 <strncmp+0x1c>
   d91de:	42a0      	cmp	r0, r4
   d91e0:	d001      	beq.n	d91e6 <strncmp+0x1c>
   d91e2:	2b00      	cmp	r3, #0
   d91e4:	d1f5      	bne.n	d91d2 <strncmp+0x8>
   d91e6:	1a98      	subs	r0, r3, r2
   d91e8:	bd10      	pop	{r4, pc}
   d91ea:	4610      	mov	r0, r2
   d91ec:	e7fc      	b.n	d91e8 <strncmp+0x1e>

000d91ee <strrchr>:
   d91ee:	b538      	push	{r3, r4, r5, lr}
   d91f0:	4603      	mov	r3, r0
   d91f2:	460c      	mov	r4, r1
   d91f4:	b969      	cbnz	r1, d9212 <strrchr+0x24>
   d91f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d91fa:	f7ff bf97 	b.w	d912c <strchr>
   d91fe:	1c43      	adds	r3, r0, #1
   d9200:	4605      	mov	r5, r0
   d9202:	4621      	mov	r1, r4
   d9204:	4618      	mov	r0, r3
   d9206:	f7ff ff91 	bl	d912c <strchr>
   d920a:	2800      	cmp	r0, #0
   d920c:	d1f7      	bne.n	d91fe <strrchr+0x10>
   d920e:	4628      	mov	r0, r5
   d9210:	bd38      	pop	{r3, r4, r5, pc}
   d9212:	2500      	movs	r5, #0
   d9214:	e7f5      	b.n	d9202 <strrchr+0x14>
	...

000d9218 <_strtol_l.isra.0>:
   d9218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d921c:	4e3a      	ldr	r6, [pc, #232]	; (d9308 <_strtol_l.isra.0+0xf0>)
   d921e:	4686      	mov	lr, r0
   d9220:	468c      	mov	ip, r1
   d9222:	4660      	mov	r0, ip
   d9224:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9228:	5da5      	ldrb	r5, [r4, r6]
   d922a:	f015 0508 	ands.w	r5, r5, #8
   d922e:	d1f8      	bne.n	d9222 <_strtol_l.isra.0+0xa>
   d9230:	2c2d      	cmp	r4, #45	; 0x2d
   d9232:	d133      	bne.n	d929c <_strtol_l.isra.0+0x84>
   d9234:	f89c 4000 	ldrb.w	r4, [ip]
   d9238:	f04f 0801 	mov.w	r8, #1
   d923c:	f100 0c02 	add.w	ip, r0, #2
   d9240:	2b00      	cmp	r3, #0
   d9242:	d05c      	beq.n	d92fe <_strtol_l.isra.0+0xe6>
   d9244:	2b10      	cmp	r3, #16
   d9246:	d10c      	bne.n	d9262 <_strtol_l.isra.0+0x4a>
   d9248:	2c30      	cmp	r4, #48	; 0x30
   d924a:	d10a      	bne.n	d9262 <_strtol_l.isra.0+0x4a>
   d924c:	f89c 0000 	ldrb.w	r0, [ip]
   d9250:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9254:	2858      	cmp	r0, #88	; 0x58
   d9256:	d14d      	bne.n	d92f4 <_strtol_l.isra.0+0xdc>
   d9258:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d925c:	2310      	movs	r3, #16
   d925e:	f10c 0c02 	add.w	ip, ip, #2
   d9262:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d9266:	3f01      	subs	r7, #1
   d9268:	2600      	movs	r6, #0
   d926a:	fbb7 f9f3 	udiv	r9, r7, r3
   d926e:	4630      	mov	r0, r6
   d9270:	fb03 7a19 	mls	sl, r3, r9, r7
   d9274:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d9278:	2d09      	cmp	r5, #9
   d927a:	d818      	bhi.n	d92ae <_strtol_l.isra.0+0x96>
   d927c:	462c      	mov	r4, r5
   d927e:	42a3      	cmp	r3, r4
   d9280:	dd24      	ble.n	d92cc <_strtol_l.isra.0+0xb4>
   d9282:	1c75      	adds	r5, r6, #1
   d9284:	d007      	beq.n	d9296 <_strtol_l.isra.0+0x7e>
   d9286:	4581      	cmp	r9, r0
   d9288:	d31d      	bcc.n	d92c6 <_strtol_l.isra.0+0xae>
   d928a:	d101      	bne.n	d9290 <_strtol_l.isra.0+0x78>
   d928c:	45a2      	cmp	sl, r4
   d928e:	db1a      	blt.n	d92c6 <_strtol_l.isra.0+0xae>
   d9290:	fb00 4003 	mla	r0, r0, r3, r4
   d9294:	2601      	movs	r6, #1
   d9296:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d929a:	e7eb      	b.n	d9274 <_strtol_l.isra.0+0x5c>
   d929c:	2c2b      	cmp	r4, #43	; 0x2b
   d929e:	bf08      	it	eq
   d92a0:	f89c 4000 	ldrbeq.w	r4, [ip]
   d92a4:	46a8      	mov	r8, r5
   d92a6:	bf08      	it	eq
   d92a8:	f100 0c02 	addeq.w	ip, r0, #2
   d92ac:	e7c8      	b.n	d9240 <_strtol_l.isra.0+0x28>
   d92ae:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d92b2:	2d19      	cmp	r5, #25
   d92b4:	d801      	bhi.n	d92ba <_strtol_l.isra.0+0xa2>
   d92b6:	3c37      	subs	r4, #55	; 0x37
   d92b8:	e7e1      	b.n	d927e <_strtol_l.isra.0+0x66>
   d92ba:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d92be:	2d19      	cmp	r5, #25
   d92c0:	d804      	bhi.n	d92cc <_strtol_l.isra.0+0xb4>
   d92c2:	3c57      	subs	r4, #87	; 0x57
   d92c4:	e7db      	b.n	d927e <_strtol_l.isra.0+0x66>
   d92c6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d92ca:	e7e4      	b.n	d9296 <_strtol_l.isra.0+0x7e>
   d92cc:	1c73      	adds	r3, r6, #1
   d92ce:	d106      	bne.n	d92de <_strtol_l.isra.0+0xc6>
   d92d0:	2322      	movs	r3, #34	; 0x22
   d92d2:	f8ce 3000 	str.w	r3, [lr]
   d92d6:	4638      	mov	r0, r7
   d92d8:	b942      	cbnz	r2, d92ec <_strtol_l.isra.0+0xd4>
   d92da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d92de:	f1b8 0f00 	cmp.w	r8, #0
   d92e2:	d000      	beq.n	d92e6 <_strtol_l.isra.0+0xce>
   d92e4:	4240      	negs	r0, r0
   d92e6:	2a00      	cmp	r2, #0
   d92e8:	d0f7      	beq.n	d92da <_strtol_l.isra.0+0xc2>
   d92ea:	b10e      	cbz	r6, d92f0 <_strtol_l.isra.0+0xd8>
   d92ec:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d92f0:	6011      	str	r1, [r2, #0]
   d92f2:	e7f2      	b.n	d92da <_strtol_l.isra.0+0xc2>
   d92f4:	2430      	movs	r4, #48	; 0x30
   d92f6:	2b00      	cmp	r3, #0
   d92f8:	d1b3      	bne.n	d9262 <_strtol_l.isra.0+0x4a>
   d92fa:	2308      	movs	r3, #8
   d92fc:	e7b1      	b.n	d9262 <_strtol_l.isra.0+0x4a>
   d92fe:	2c30      	cmp	r4, #48	; 0x30
   d9300:	d0a4      	beq.n	d924c <_strtol_l.isra.0+0x34>
   d9302:	230a      	movs	r3, #10
   d9304:	e7ad      	b.n	d9262 <_strtol_l.isra.0+0x4a>
   d9306:	bf00      	nop
   d9308:	000d9a8a 	.word	0x000d9a8a

000d930c <strtol>:
   d930c:	4613      	mov	r3, r2
   d930e:	460a      	mov	r2, r1
   d9310:	4601      	mov	r1, r0
   d9312:	4802      	ldr	r0, [pc, #8]	; (d931c <strtol+0x10>)
   d9314:	6800      	ldr	r0, [r0, #0]
   d9316:	f7ff bf7f 	b.w	d9218 <_strtol_l.isra.0>
   d931a:	bf00      	nop
   d931c:	2003df04 	.word	0x2003df04

000d9320 <__register_exitproc>:
   d9320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9324:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d93e0 <__register_exitproc+0xc0>
   d9328:	4606      	mov	r6, r0
   d932a:	f8d8 0000 	ldr.w	r0, [r8]
   d932e:	461f      	mov	r7, r3
   d9330:	460d      	mov	r5, r1
   d9332:	4691      	mov	r9, r2
   d9334:	f000 f856 	bl	d93e4 <__retarget_lock_acquire_recursive>
   d9338:	4b25      	ldr	r3, [pc, #148]	; (d93d0 <__register_exitproc+0xb0>)
   d933a:	681c      	ldr	r4, [r3, #0]
   d933c:	b934      	cbnz	r4, d934c <__register_exitproc+0x2c>
   d933e:	4c25      	ldr	r4, [pc, #148]	; (d93d4 <__register_exitproc+0xb4>)
   d9340:	601c      	str	r4, [r3, #0]
   d9342:	4b25      	ldr	r3, [pc, #148]	; (d93d8 <__register_exitproc+0xb8>)
   d9344:	b113      	cbz	r3, d934c <__register_exitproc+0x2c>
   d9346:	681b      	ldr	r3, [r3, #0]
   d9348:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d934c:	6863      	ldr	r3, [r4, #4]
   d934e:	2b1f      	cmp	r3, #31
   d9350:	dd07      	ble.n	d9362 <__register_exitproc+0x42>
   d9352:	f8d8 0000 	ldr.w	r0, [r8]
   d9356:	f000 f847 	bl	d93e8 <__retarget_lock_release_recursive>
   d935a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d935e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9362:	b34e      	cbz	r6, d93b8 <__register_exitproc+0x98>
   d9364:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d9368:	b988      	cbnz	r0, d938e <__register_exitproc+0x6e>
   d936a:	4b1c      	ldr	r3, [pc, #112]	; (d93dc <__register_exitproc+0xbc>)
   d936c:	b923      	cbnz	r3, d9378 <__register_exitproc+0x58>
   d936e:	f8d8 0000 	ldr.w	r0, [r8]
   d9372:	f000 f838 	bl	d93e6 <__retarget_lock_release>
   d9376:	e7f0      	b.n	d935a <__register_exitproc+0x3a>
   d9378:	f44f 7084 	mov.w	r0, #264	; 0x108
   d937c:	f7fc fee8 	bl	d6150 <malloc>
   d9380:	2800      	cmp	r0, #0
   d9382:	d0f4      	beq.n	d936e <__register_exitproc+0x4e>
   d9384:	2300      	movs	r3, #0
   d9386:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d938a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d938e:	6863      	ldr	r3, [r4, #4]
   d9390:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d9394:	2201      	movs	r2, #1
   d9396:	409a      	lsls	r2, r3
   d9398:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d939c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d93a0:	4313      	orrs	r3, r2
   d93a2:	2e02      	cmp	r6, #2
   d93a4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d93a8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d93ac:	bf02      	ittt	eq
   d93ae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d93b2:	431a      	orreq	r2, r3
   d93b4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d93b8:	6863      	ldr	r3, [r4, #4]
   d93ba:	f8d8 0000 	ldr.w	r0, [r8]
   d93be:	1c5a      	adds	r2, r3, #1
   d93c0:	3302      	adds	r3, #2
   d93c2:	6062      	str	r2, [r4, #4]
   d93c4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d93c8:	f000 f80e 	bl	d93e8 <__retarget_lock_release_recursive>
   d93cc:	2000      	movs	r0, #0
   d93ce:	e7c6      	b.n	d935e <__register_exitproc+0x3e>
   d93d0:	2003e7e4 	.word	0x2003e7e4
   d93d4:	2003e758 	.word	0x2003e758
   d93d8:	00000000 	.word	0x00000000
   d93dc:	000d6151 	.word	0x000d6151
   d93e0:	2003df68 	.word	0x2003df68

000d93e4 <__retarget_lock_acquire_recursive>:
   d93e4:	4770      	bx	lr

000d93e6 <__retarget_lock_release>:
   d93e6:	4770      	bx	lr

000d93e8 <__retarget_lock_release_recursive>:
   d93e8:	4770      	bx	lr

000d93ea <link_code_end>:
	...

000d93ec <dynalib_user>:
   d93ec:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d93fc:	0000 0000 6e69 7469 6620 6961 656c 0064     ....init failed.
   d940c:	7453 7261 7574 2070 6f63 706d 656c 6574     Startup complete
   d941c:	2d20 6220 7461 6574 7972 2520 2e34 6632      - battery %4.2f
   d942c:	7500 736e 6375 6563 7373 7566 006c 6553     .unsuccessful.Se
   d943c:	646e 6e69 2067 6f74 6d20 6e61 6761 7265     nding to manager
   d944c:	6d5f 7365 5f68 6573 7672 7265 0031 6573     _mesh_server1.se
   d945c:	646e 6e69 2067 656d 7373 6761 2065 6425     nding message %d
   d946c:	7000 7961 6f6c 6461 7420 206f 6573 7672     .payload to serv
   d947c:	7265 0031 6573 646e 6e69 0067 6552 7073     er1.sending.Resp
   d948c:	6e6f 6573 203a 7830 3025 7832 7220 7373     onse: 0x%02x rss
   d949c:	3d69 6425 2d20 6420 6c65 7669 7265 2079     i=%d - delivery 
   d94ac:	7325 5500 6470 7461 0065 6f4e 7220 7065     %s.Update.No rep
   d94bc:	796c 202c 7369 7220 3966 5f35 656d 6873     ly, is rf95_mesh
   d94cc:	735f 7265 6576 3172 202c 6672 3539 6d5f     _server1, rf95_m
   d94dc:	7365 5f68 6573 7672 7265 2032 6e61 2064     esh_server2 and 
   d94ec:	6672 3539 6d5f 7365 5f68 6573 7672 7265     rf95_mesh_server
   d94fc:	2033 7572 6e6e 6e69 3f67 7300 6e65 7464     3 running?.sendt
   d950c:	576f 6961 2074 6166 6c69 6465 202e 7241     oWait failed. Ar
   d951c:	2065 6874 2065 6e69 6574 6d72 6465 6169     e the intermedia
   d952c:	6574 6d20 7365 2068 6573 7672 7265 2073     te mesh servers 
   d953c:	7572 6e6e 6e69 3f67 0000 0000               running?....

000d9548 <_ZTVN5spark10LogHandlerE>:
	...
   d9558:	40a5 000d 40c9 000d                         .@...@..

000d9560 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d9568:	40e1 000d 4115 000d 7a79 000d 40cb 000d     .@...A..yz...@..

000d9578 <_ZTV15RHGenericDriver>:
	...
   d9588:	483d 000d 40a5 000d 40a5 000d 40a5 000d     =H...@...@...@..
   d9598:	40a5 000d 489f 000d 4841 000d 48ef 000d     .@...H..AH...H..
   d95a8:	48bd 000d 4913 000d 484b 000d 4853 000d     .H...I..KH..SH..
   d95b8:	4857 000d 485b 000d 485f 000d 4863 000d     WH..[H.._H..cH..
   d95c8:	484f 000d 486f 000d 4873 000d 4877 000d     OH..oH..sH..wH..
   d95d8:	487b 000d 487f 000d 4885 000d 4889 000d     {H...H...H...H..
   d95e8:	484b 000d 488d 000d 4893 000d 4899 000d     KH...H...H...H..

000d95f8 <_ZTV12RHGenericSPI>:
	...
   d9600:	40a5 000d 4971 000d 4973 000d 40a5 000d     .@..qI..sI...@..
   d9610:	40a5 000d 497b 000d 497f 000d 4983 000d     .@..{I...I...I..
   d9620:	4975 000d 4977 000d 4979 000d 6564 6166     uI..wI..yI..defa
   d9630:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   d9640:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   d9650:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   d9660:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000d9670 <_ZTVN8particle11SPISettingsE>:
	...
   d9678:	49c9 000d 499d 000d 499f 000d               .I...I...I..

000d9684 <_ZTV13RHHardwareSPI>:
	...
   d968c:	4a7d 000d 4a91 000d 4a9f 000d 4aad 000d     }J...J...J...J..
   d969c:	4b19 000d 497b 000d 497f 000d 4983 000d     .K..{I...I...I..
   d96ac:	4b27 000d 4b3b 000d 4b49 000d               'K..;K..IK..

000d96b8 <_ZTV6RHMesh>:
	...
   d96c0:	4c19 000d 4f21 000d 4b75 000d 4b61 000d     .L..!O..uK..aK..

000d96d0 <_ZTV8RHRouter>:
	...
   d96d8:	5187 000d 51cb 000d                         .Q...Q..

000d96e0 <_ZTV11RHSPIDriver>:
	...
   d96f0:	5469 000d 40a5 000d 40a5 000d 40a5 000d     iT...@...@...@..
   d9700:	40a5 000d 489f 000d 4841 000d 48ef 000d     .@...H..AH...H..
   d9710:	48bd 000d 4913 000d 484b 000d 4853 000d     .H...I..KH..SH..
   d9720:	4857 000d 485b 000d 485f 000d 4863 000d     WH..[H.._H..cH..
   d9730:	484f 000d 486f 000d 4873 000d 4877 000d     OH..oH..sH..wH..
   d9740:	487b 000d 487f 000d 4885 000d 4889 000d     {H...H...H...H..
   d9750:	484b 000d 488d 000d 4893 000d 4899 000d     KH...H...H...H..
   d9760:	5495 000d 549f 000d                         .T...T..

000d9768 <_ZL18MODEM_CONFIG_TABLE>:
   d9768:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000d9778 <_ZTV7RH_RF95>:
	...
   d9780:	5607 000d 563f 000d 5b01 000d 5967 000d     .V..?V...[..gY..
   d9790:	5675 000d 59af 000d 5603 000d 489f 000d     uV...Y...V...H..
   d97a0:	4841 000d 48ef 000d 48bd 000d 4913 000d     AH...H...H...I..
   d97b0:	5609 000d 4853 000d 4857 000d 485b 000d     .V..SH..WH..[H..
   d97c0:	485f 000d 4863 000d 484f 000d 486f 000d     _H..cH..OH..oH..
   d97d0:	4873 000d 4877 000d 487b 000d 487f 000d     sH..wH..{H...H..
   d97e0:	4885 000d 4889 000d 564f 000d 488d 000d     .H...H..OV...H..
   d97f0:	4893 000d 4899 000d 5495 000d 549f 000d     .H...H...T...T..
   d9800:	55ff 000d                                   .U..

000d9804 <_ZTVN5spark13CellularClassE>:
	...
   d980c:	627b 000d 6271 000d 6267 000d 621d 000d     {b..qb..gb...b..
   d981c:	625b 000d 624f 000d 7dd1 000d 7dd9 000d     [b..Ob...}...}..
   d982c:	6243 000d 623b 000d 6231 000d 6227 000d     Cb..;b..1b..'b..
   d983c:	7e09 000d                                   .~..

000d9840 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9848:	62b5 000d 62bb 000d 630b 000d 62c9 000d     .b...b...c...b..
   d9858:	62b7 000d                                   .b..

000d985c <_ZTVN5spark13EthernetClassE>:
	...
   d9864:	6883 000d 6879 000d 686f 000d 6865 000d     .h..yh..oh..eh..
   d9874:	6859 000d 684d 000d 7dd1 000d 7dd9 000d     Yh..Mh...}...}..
   d9884:	6841 000d 6839 000d 682f 000d 6825 000d     Ah..9h../h..%h..
   d9894:	7e09 000d                                   .~..

000d9898 <_ZTV7TwoWire>:
	...
   d98a0:	68a1 000d 68eb 000d 68c3 000d 68a3 000d     .h...h...h...h..
   d98b0:	68cb 000d 68d3 000d 68db 000d 68e3 000d     .h...h...h...h..

000d98c0 <_ZTV9IPAddress>:
	...
   d98c8:	6985 000d 6975 000d 6977 000d 7525 7500     .i..ui..wi..%u.u
   d98d8:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   d98e8:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   d98f8:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   d9908:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   d9918:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d9928:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d9938:	006d 0063 6e6c 6600 006e 0074 6f63 6564     m.c.ln.fn.t.code
   d9948:	6400 7465 6961 006c                         .detail.

000d9950 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d9958:	6e41 000d 6e67 000d 6e25 000d 6a85 000d     An..gn..%n...j..

000d9968 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d9970:	7295 000d 72ad 000d 7a79 000d 40cb 000d     .r...r..yz...@..

000d9980 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d9988:	72c1 000d 72d5 000d 7c1d 000d 6e2d 000d     .r...r...|..-n..

000d9998 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d99a0:	6e3f 000d 6e75 000d 79b5 000d 6e2f 000d     ?n..un...y../n..

000d99b0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d99b8:	6e3d 000d 6e83 000d 71dd 000d 6ea1 000d     =n...n...q...n..

000d99c8 <_ZTVN5spark12NetworkClassE>:
	...
   d99d0:	7d91 000d 7d9b 000d 7da5 000d 7daf 000d     .}...}...}...}..
   d99e0:	7db9 000d 7dc5 000d 7dd1 000d 7dd9 000d     .}...}...}...}..
   d99f0:	7de1 000d 7ded 000d 7df5 000d 7dff 000d     .}...}...}...}..
   d9a00:	7e09 000d                                   .~..

000d9a04 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9a04:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   d9a14:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d9a24:	6d69 0065                                   ime.

000d9a28 <_ZTV11USARTSerial>:
	...
   d9a30:	8385 000d 83f3 000d 83cb 000d 7ef1 000d     .............~..
   d9a40:	839b 000d 83b7 000d 83a9 000d 83c5 000d     ................
   d9a50:	8387 000d 838d 000d                         ........

000d9a58 <_ZTV9USBSerial>:
	...
   d9a60:	8493 000d 84fb 000d 84d1 000d 7ef1 000d     .............~..
   d9a70:	84c3 000d 8495 000d 84a5 000d 84f5 000d     ................
   d9a80:	84b5 000d 848d 000d                         ........

000d9a88 <_ZSt7nothrow>:
	...

000d9a89 <_ctype_>:
   d9a89:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9a99:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9aa9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9ab9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d9ac9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d9ad9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d9ae9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d9af9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d9b09:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d9b8a <link_const_variable_data_end>:
	...

000d9b8c <link_constructors_location>:
   d9b8c:	000d4651 	.word	0x000d4651
   d9b90:	000d4b51 	.word	0x000d4b51
   d9b94:	000d620d 	.word	0x000d620d
   d9b98:	000d6285 	.word	0x000d6285
   d9b9c:	000d688d 	.word	0x000d688d
   d9ba0:	000d7a69 	.word	0x000d7a69
   d9ba4:	000d7edd 	.word	0x000d7edd
   d9ba8:	000d8031 	.word	0x000d8031
   d9bac:	000d82d9 	.word	0x000d82d9
   d9bb0:	000d8371 	.word	0x000d8371

000d9bb4 <link_constructors_end>:
	...
