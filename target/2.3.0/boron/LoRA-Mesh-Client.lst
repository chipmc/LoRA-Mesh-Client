
/Users/chipmc/Documents/Maker/Particle/Utilities/LoRA-Mesh-Client/target/2.3.0/boron/LoRA-Mesh-Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005fe0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000008  2003f400  000da000  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000080  2003ded8  000da008  0001ded8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000898  2003df58  2003df58  0002df58  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000da088  000da088  0002a088  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da0b0  000da0b0  0002a0b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00208d78  00000000  00000000  0002a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00020891  00000000  00000000  00232e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00032498  00000000  00000000  002536bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003058  00000000  00000000  00285b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008638  00000000  00000000  00288bad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00045752  00000000  00000000  002911e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005029c  00000000  00000000  002d6937  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00114a25  00000000  00000000  00326bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008638  00000000  00000000  0043b5f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f9a3 	bl	d937c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f9c5 	bl	d93cc <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003ded8 	.word	0x2003ded8
   d404c:	000da008 	.word	0x000da008
   d4050:	2003df58 	.word	0x2003df58
   d4054:	2003df58 	.word	0x2003df58
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 fc5b 	bl	d891c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9fcc 	.word	0x000d9fcc
   d4080:	000d9ff4 	.word	0x000d9ff4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8d8 	b.w	d4238 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fab7 	bl	d45fc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 bbfb 	b.w	d888c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 b8f3 	b.w	d6280 <malloc>

000d409a <_Znaj>:
   d409a:	f002 b8f1 	b.w	d6280 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 b8f7 	b.w	d6290 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f001 ffe2 	bl	d6074 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d5d65 	.word	0x000d5d65

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z9sensorISRv>:

	if (sensorDetect) recordCount();                // The ISR had raised the sensor flag - this will service interrupts regardless of state
}

void sensorISR() {
	sensorDetect = true;
   d40d4:	4b01      	ldr	r3, [pc, #4]	; (d40dc <_Z9sensorISRv+0x8>)
   d40d6:	2201      	movs	r2, #1
   d40d8:	701a      	strb	r2, [r3, #0]
}
   d40da:	4770      	bx	lr
   d40dc:	2003e314 	.word	0x2003e314

000d40e0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40e0:	4b0a      	ldr	r3, [pc, #40]	; (d410c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40e2:	b510      	push	{r4, lr}
   d40e4:	4604      	mov	r4, r0
   d40e6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40e8:	f003 f884 	bl	d71f4 <_ZN5spark10LogManager8instanceEv>
   d40ec:	4621      	mov	r1, r4
   d40ee:	f003 fa82 	bl	d75f6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40f2:	f004 fb83 	bl	d87fc <_Z16_fetch_usbserialv>
   d40f6:	f004 fb73 	bl	d87e0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d40fa:	4620      	mov	r0, r4
   d40fc:	4b04      	ldr	r3, [pc, #16]	; (d4110 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40fe:	f840 3b04 	str.w	r3, [r0], #4
   d4102:	f003 f965 	bl	d73d0 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4106:	4620      	mov	r0, r4
   d4108:	bd10      	pop	{r4, pc}
   d410a:	bf00      	nop
   d410c:	000d9950 	.word	0x000d9950
   d4110:	000d9938 	.word	0x000d9938

000d4114 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4114:	b510      	push	{r4, lr}
   d4116:	4604      	mov	r4, r0
    }
   d4118:	f7ff ffe2 	bl	d40e0 <_ZN5spark16SerialLogHandlerD1Ev>
   d411c:	4620      	mov	r0, r4
   d411e:	2124      	movs	r1, #36	; 0x24
   d4120:	f004 fcd4 	bl	d8acc <_ZdlPvj>
   d4124:	4620      	mov	r0, r4
   d4126:	bd10      	pop	{r4, pc}

000d4128 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4128:	b40e      	push	{r1, r2, r3}
   d412a:	b510      	push	{r4, lr}
   d412c:	b08d      	sub	sp, #52	; 0x34
   d412e:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4130:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4132:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4136:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4138:	2300      	movs	r3, #0
   d413a:	2020      	movs	r0, #32
   d413c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4140:	e9cd 4200 	strd	r4, r2, [sp]
   d4144:	201e      	movs	r0, #30
   d4146:	aa04      	add	r2, sp, #16
   d4148:	f001 ff9c 	bl	d6084 <log_message_v>
}
   d414c:	b00d      	add	sp, #52	; 0x34
   d414e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4152:	b003      	add	sp, #12
   d4154:	4770      	bx	lr
	...

000d4158 <_Z11recordCountv>:

void recordCount() {
   d4158:	b538      	push	{r3, r4, r5, lr}
	static time_t lastCount = Time.now();
   d415a:	4d17      	ldr	r5, [pc, #92]	; (d41b8 <_Z11recordCountv+0x60>)
   d415c:	4c17      	ldr	r4, [pc, #92]	; (d41bc <_Z11recordCountv+0x64>)
   d415e:	782b      	ldrb	r3, [r5, #0]
   d4160:	f3bf 8f5b 	dmb	ish
   d4164:	f013 0f01 	tst.w	r3, #1
   d4168:	d10b      	bne.n	d4182 <_Z11recordCountv+0x2a>
   d416a:	4628      	mov	r0, r5
   d416c:	f7ff ffa4 	bl	d40b8 <__cxa_guard_acquire>
   d4170:	b138      	cbz	r0, d4182 <_Z11recordCountv+0x2a>
   d4172:	f004 fa40 	bl	d85f6 <_ZN9TimeClass3nowEv>
   d4176:	17c1      	asrs	r1, r0, #31
   d4178:	e9c4 0100 	strd	r0, r1, [r4]
   d417c:	4628      	mov	r0, r5
   d417e:	f7ff ffa0 	bl	d40c2 <__cxa_guard_release>
	if (Time.now() - lastCount) {
   d4182:	f004 fa38 	bl	d85f6 <_ZN9TimeClass3nowEv>
   d4186:	e9d4 2300 	ldrd	r2, r3, [r4]
   d418a:	17c1      	asrs	r1, r0, #31
   d418c:	4299      	cmp	r1, r3
   d418e:	bf08      	it	eq
   d4190:	4290      	cmpeq	r0, r2
   d4192:	d00f      	beq.n	d41b4 <_Z11recordCountv+0x5c>
		lastCount = Time.now();
   d4194:	f004 fa2f 	bl	d85f6 <_ZN9TimeClass3nowEv>
		hourly++;
   d4198:	4a09      	ldr	r2, [pc, #36]	; (d41c0 <_Z11recordCountv+0x68>)
   d419a:	8813      	ldrh	r3, [r2, #0]
   d419c:	3301      	adds	r3, #1
   d419e:	8013      	strh	r3, [r2, #0]
		daily++;
   d41a0:	4a08      	ldr	r2, [pc, #32]	; (d41c4 <_Z11recordCountv+0x6c>)
   d41a2:	8813      	ldrh	r3, [r2, #0]
		lastCount = Time.now();
   d41a4:	17c1      	asrs	r1, r0, #31
		daily++;
   d41a6:	3301      	adds	r3, #1
   d41a8:	8013      	strh	r3, [r2, #0]
		lastCount = Time.now();
   d41aa:	e9c4 0100 	strd	r0, r1, [r4]
		sensorDetect = false;
   d41ae:	4b06      	ldr	r3, [pc, #24]	; (d41c8 <_Z11recordCountv+0x70>)
   d41b0:	2200      	movs	r2, #0
   d41b2:	701a      	strb	r2, [r3, #0]
	}
}
   d41b4:	bd38      	pop	{r3, r4, r5, pc}
   d41b6:	bf00      	nop
   d41b8:	2003df64 	.word	0x2003df64
   d41bc:	2003df70 	.word	0x2003df70
   d41c0:	2003e1a8 	.word	0x2003e1a8
   d41c4:	2003e074 	.word	0x2003e074
   d41c8:	2003e314 	.word	0x2003e314

000d41cc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d41cc:	b530      	push	{r4, r5, lr}
   d41ce:	b085      	sub	sp, #20
   d41d0:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d41d2:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d41d4:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d41d6:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d41d8:	f001 ff6c 	bl	d60b4 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d41dc:	b9b0      	cbnz	r0, d420c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d41de:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d41e0:	b10c      	cbz	r4, d41e6 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d41e2:	6923      	ldr	r3, [r4, #16]
   d41e4:	b923      	cbnz	r3, d41f0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d41e6:	4a0a      	ldr	r2, [pc, #40]	; (d4210 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d41e8:	2100      	movs	r1, #0
   d41ea:	200a      	movs	r0, #10
   d41ec:	f001 ff42 	bl	d6074 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d41f0:	2300      	movs	r3, #0
   d41f2:	f8ad 3006 	strh.w	r3, [sp, #6]
   d41f6:	230c      	movs	r3, #12
   d41f8:	f8ad 3004 	strh.w	r3, [sp, #4]
   d41fc:	2304      	movs	r3, #4
   d41fe:	9303      	str	r3, [sp, #12]
   d4200:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4202:	6923      	ldr	r3, [r4, #16]
   d4204:	aa01      	add	r2, sp, #4
   d4206:	2101      	movs	r1, #1
   d4208:	4620      	mov	r0, r4
   d420a:	4798      	blx	r3
}
   d420c:	b005      	add	sp, #20
   d420e:	bd30      	pop	{r4, r5, pc}
   d4210:	000d5d65 	.word	0x000d5d65

000d4214 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
            return r;
        }
        return val;
    }

    float batteryCharge() const {
   d4214:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4216:	2003      	movs	r0, #3
   d4218:	a901      	add	r1, sp, #4
   d421a:	f7ff ffd7 	bl	d41cc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d421e:	b940      	cbnz	r0, d4232 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4220:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d4224:	ee00 3a10 	vmov	s0, r3
   d4228:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
   d422c:	b003      	add	sp, #12
   d422e:	f85d fb04 	ldr.w	pc, [sp], #4
            return -1.0f;
   d4232:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d4236:	e7f9      	b.n	d422c <_ZNK11SystemClass13batteryChargeEv.isra.0+0x18>

000d4238 <setup>:
{
   d4238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return hal_timer_millis(nullptr);
   d423c:	2000      	movs	r0, #0
   d423e:	b087      	sub	sp, #28
   d4240:	f001 fda8 	bl	d5d94 <hal_timer_millis>
   d4244:	f04f 0900 	mov.w	r9, #0
   d4248:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d424a:	f643 2697 	movw	r6, #14999	; 0x3a97
   d424e:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d4250:	2000      	movs	r0, #0
   d4252:	f001 fd9f 	bl	d5d94 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4256:	ebb0 0408 	subs.w	r4, r0, r8
   d425a:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d425e:	42af      	cmp	r7, r5
   d4260:	bf08      	it	eq
   d4262:	42a6      	cmpeq	r6, r4
   d4264:	d307      	bcc.n	d4276 <setup+0x3e>
	waitFor(Serial.isConnected, 15000);
   d4266:	f004 fac9 	bl	d87fc <_Z16_fetch_usbserialv>
   d426a:	f004 fabc 	bl	d87e6 <_ZN9USBSerial11isConnectedEv>
   d426e:	b910      	cbnz	r0, d4276 <setup+0x3e>
            spark_process();
   d4270:	f001 ff7e 	bl	d6170 <spark_process>
        while (_while() && !_condition()) {
   d4274:	e7ec      	b.n	d4250 <setup+0x18>
   d4276:	f004 fac1 	bl	d87fc <_Z16_fetch_usbserialv>
   d427a:	f004 fab4 	bl	d87e6 <_ZN9USBSerial11isConnectedEv>
	pinMode(blueLED,OUTPUT);						// Blue led signals sends
   d427e:	2101      	movs	r1, #1
   d4280:	2007      	movs	r0, #7
   d4282:	f004 fbbb 	bl	d89fc <pinMode>
	pinMode(intPin, INPUT_PULLDOWN);				// Initialize sensor interrupt pin
   d4286:	2103      	movs	r1, #3
   d4288:	4608      	mov	r0, r1
   d428a:	f004 fbb7 	bl	d89fc <pinMode>
        int reason = RESET_REASON_NONE;
   d428e:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4290:	4611      	mov	r1, r2
   d4292:	a805      	add	r0, sp, #20
        int reason = RESET_REASON_NONE;
   d4294:	9205      	str	r2, [sp, #20]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4296:	f001 fd55 	bl	d5d44 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d429a:	9b05      	ldr	r3, [sp, #20]
  	if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d429c:	2b14      	cmp	r3, #20
   d429e:	f04f 0200 	mov.w	r2, #0
   d42a2:	d14f      	bne.n	d4344 <setup+0x10c>
    	resetCount++;
   d42a4:	4a2e      	ldr	r2, [pc, #184]	; (d4360 <setup+0x128>)
   d42a6:	7813      	ldrb	r3, [r2, #0]
   d42a8:	3301      	adds	r3, #1
   d42aa:	b2db      	uxtb	r3, r3
    	if (resetCount > 6) alerts = 13;            // Excessive resets
   d42ac:	2b06      	cmp	r3, #6
    	resetCount++;
   d42ae:	7013      	strb	r3, [r2, #0]
    	if (resetCount > 6) alerts = 13;            // Excessive resets
   d42b0:	d851      	bhi.n	d4356 <setup+0x11e>
	if (!manager.init()) Log.info("init failed"); // Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   d42b2:	482c      	ldr	r0, [pc, #176]	; (d4364 <setup+0x12c>)
   d42b4:	f000 ffe2 	bl	d527c <_ZN8RHRouter4initEv>
   d42b8:	b918      	cbnz	r0, d42c2 <setup+0x8a>
   d42ba:	492b      	ldr	r1, [pc, #172]	; (d4368 <setup+0x130>)
   d42bc:	482b      	ldr	r0, [pc, #172]	; (d436c <setup+0x134>)
   d42be:	f7ff ff33 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
	driver.setFrequency(RF95_FREQ);					// Setup ISM frequency - typically 868.0 or 915.0 in the Americas, or 433.0 in the EU
   d42c2:	ed9f 0a2b 	vldr	s0, [pc, #172]	; d4370 <setup+0x138>
   d42c6:	482b      	ldr	r0, [pc, #172]	; (d4374 <setup+0x13c>)
	Log.info("Startup complete - battery %4.2f%%, reporting every %u seconds clock is %s", System.batteryCharge(), nextReportSeconds, (Time.isValid()) ? "valid" : "not valid");
   d42c8:	4d2b      	ldr	r5, [pc, #172]	; (d4378 <setup+0x140>)
	driver.setFrequency(RF95_FREQ);					// Setup ISM frequency - typically 868.0 or 915.0 in the Americas, or 433.0 in the EU
   d42ca:	f001 faad 	bl	d5828 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);
   d42ce:	4829      	ldr	r0, [pc, #164]	; (d4374 <setup+0x13c>)
   d42d0:	2200      	movs	r2, #0
   d42d2:	2117      	movs	r1, #23
   d42d4:	f001 fc22 	bl	d5b1c <_ZN7RH_RF9510setTxPowerEab>
	attachInterrupt(intPin, sensorISR, RISING);     // Pressure Sensor interrupt from low to high
   d42d8:	2300      	movs	r3, #0
   d42da:	2201      	movs	r2, #1
   d42dc:	4927      	ldr	r1, [pc, #156]	; (d437c <setup+0x144>)
   d42de:	9300      	str	r3, [sp, #0]
   d42e0:	2003      	movs	r0, #3
   d42e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d42e6:	f002 fbc3 	bl	d6a70 <_Z15attachInterrupttPFvvE13InterruptModeah>
	Log.info("Startup complete - battery %4.2f%%, reporting every %u seconds clock is %s", System.batteryCharge(), nextReportSeconds, (Time.isValid()) ? "valid" : "not valid");
   d42ea:	f7ff ff93 	bl	d4214 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   d42ee:	ee10 0a10 	vmov	r0, s0
   d42f2:	f004 fd59 	bl	d8da8 <__aeabi_f2d>
   d42f6:	460b      	mov	r3, r1
   d42f8:	4921      	ldr	r1, [pc, #132]	; (d4380 <setup+0x148>)
   d42fa:	4602      	mov	r2, r0
   d42fc:	880c      	ldrh	r4, [r1, #0]
   d42fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d4302:	f004 f95b 	bl	d85bc <_ZN9TimeClass7isValidEv>
   d4306:	491f      	ldr	r1, [pc, #124]	; (d4384 <setup+0x14c>)
   d4308:	2800      	cmp	r0, #0
   d430a:	bf14      	ite	ne
   d430c:	4608      	movne	r0, r1
   d430e:	4628      	moveq	r0, r5
   d4310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d4314:	491c      	ldr	r1, [pc, #112]	; (d4388 <setup+0x150>)
   d4316:	e9cd 4000 	strd	r4, r0, [sp]
   d431a:	4814      	ldr	r0, [pc, #80]	; (d436c <setup+0x134>)
   d431c:	f7ff ff04 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
	Time.zone(-5.0);								// Local time in East Coast
   d4320:	eeb9 0a04 	vmov.f32	s0, #148	; 0xc0a00000 -5.0
   d4324:	f004 f8b4 	bl	d8490 <_ZN9TimeClass4zoneEf>
	Time.setDSTOffset(1.0);							// DST offset of 1
   d4328:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d432c:	f004 f8d0 	bl	d84d0 <_ZN9TimeClass12setDSTOffsetEf>
	Time.beginDST();								// Summer - so daylight savings
   d4330:	f004 f8ec 	bl	d850c <_ZN9TimeClass8beginDSTEv>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;	// We got through setup without error
   d4334:	4b15      	ldr	r3, [pc, #84]	; (d438c <setup+0x154>)
   d4336:	781a      	ldrb	r2, [r3, #0]
   d4338:	b90a      	cbnz	r2, d433e <setup+0x106>
   d433a:	2202      	movs	r2, #2
   d433c:	701a      	strb	r2, [r3, #0]
}
   d433e:	b007      	add	sp, #28
   d4340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4344:	4611      	mov	r1, r2
   d4346:	a805      	add	r0, sp, #20
        int reason = RESET_REASON_NONE;
   d4348:	9205      	str	r2, [sp, #20]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d434a:	f001 fcfb 	bl	d5d44 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d434e:	9b05      	ldr	r3, [sp, #20]
  	if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d4350:	2b8c      	cmp	r3, #140	; 0x8c
   d4352:	d1ae      	bne.n	d42b2 <setup+0x7a>
   d4354:	e7a6      	b.n	d42a4 <setup+0x6c>
    	if (resetCount > 6) alerts = 13;            // Excessive resets
   d4356:	4b0e      	ldr	r3, [pc, #56]	; (d4390 <setup+0x158>)
   d4358:	220d      	movs	r2, #13
   d435a:	701a      	strb	r2, [r3, #0]
   d435c:	e7a9      	b.n	d42b2 <setup+0x7a>
   d435e:	bf00      	nop
   d4360:	2003f400 	.word	0x2003f400
   d4364:	2003e1dc 	.word	0x2003e1dc
   d4368:	000d976a 	.word	0x000d976a
   d436c:	2003e58c 	.word	0x2003e58c
   d4370:	4464c000 	.word	0x4464c000
   d4374:	2003e078 	.word	0x2003e078
   d4378:	000d9760 	.word	0x000d9760
   d437c:	000d40d5 	.word	0x000d40d5
   d4380:	2003ded8 	.word	0x2003ded8
   d4384:	000d9764 	.word	0x000d9764
   d4388:	000d9776 	.word	0x000d9776
   d438c:	2003e315 	.word	0x2003e315
   d4390:	2003df79 	.word	0x2003df79

000d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4394:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4396:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4398:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d439a:	b17c      	cbz	r4, d43bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d439c:	6863      	ldr	r3, [r4, #4]
   d439e:	3b01      	subs	r3, #1
   d43a0:	6063      	str	r3, [r4, #4]
   d43a2:	b95b      	cbnz	r3, d43bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d43a4:	6823      	ldr	r3, [r4, #0]
   d43a6:	4620      	mov	r0, r4
   d43a8:	689b      	ldr	r3, [r3, #8]
   d43aa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d43ac:	68a3      	ldr	r3, [r4, #8]
   d43ae:	3b01      	subs	r3, #1
   d43b0:	60a3      	str	r3, [r4, #8]
   d43b2:	b91b      	cbnz	r3, d43bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d43b4:	6823      	ldr	r3, [r4, #0]
   d43b6:	4620      	mov	r0, r4
   d43b8:	68db      	ldr	r3, [r3, #12]
   d43ba:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d43bc:	4628      	mov	r0, r5
   d43be:	bd38      	pop	{r3, r4, r5, pc}

000d43c0 <_Z11sendMessagev>:

void sendMessage() {
   d43c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	Log.info("Sending to manager_mesh_server1");
   d43c2:	4973      	ldr	r1, [pc, #460]	; (d4590 <_Z11sendMessagev+0x1d0>)
   d43c4:	4873      	ldr	r0, [pc, #460]	; (d4594 <_Z11sendMessagev+0x1d4>)
void sendMessage() {
   d43c6:	b0a3      	sub	sp, #140	; 0x8c
	Log.info("Sending to manager_mesh_server1");
   d43c8:	f7ff feae 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(blueLED,HIGH);
   d43cc:	2101      	movs	r1, #1
   d43ce:	2007      	movs	r0, #7
   d43d0:	f004 fb25 	bl	d8a1e <digitalWrite>

	const uint8_t temp = 85;
	uint8_t battChg = System.batteryCharge();
   d43d4:	f7ff ff1e 	bl	d4214 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   d43d8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   d43dc:	a912      	add	r1, sp, #72	; 0x48
   d43de:	edcd 7a07 	vstr	s15, [sp, #28]
   d43e2:	2007      	movs	r0, #7
   d43e4:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d43e8:	f7ff fef0 	bl	d41cc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   d43ec:	1e04      	subs	r4, r0, #0
	uint8_t battState = System.batteryState();
    int16_t rssi = driver.lastRssi();
   d43ee:	486a      	ldr	r0, [pc, #424]	; (d4598 <_Z11sendMessagev+0x1d8>)
        return val;
   d43f0:	bfa8      	it	ge
   d43f2:	9c12      	ldrge	r4, [sp, #72]	; 0x48
   d43f4:	f000 fabd 	bl	d4972 <_ZN15RHGenericDriver8lastRssiEv>
	static uint8_t msgCnt = 0;
	uint8_t payload[17];

	payload[0] = 0; 								// to be replaced/updated
   d43f8:	4b68      	ldr	r3, [pc, #416]	; (d459c <_Z11sendMessagev+0x1dc>)
   d43fa:	930d      	str	r3, [sp, #52]	; 0x34
	payload[1] = 0; 								// to be replaced/updated
	payload[2] = highByte(devID);					// Set for device
	payload[3] = lowByte(devID);
	payload[4] = firmVersion;						// Set for code release
   d43fc:	2301      	movs	r3, #1
   d43fe:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	payload[5] = highByte(hourly);
   d4402:	4b67      	ldr	r3, [pc, #412]	; (d45a0 <_Z11sendMessagev+0x1e0>)
	payload[6] = lowByte(hourly); 
	payload[7] = highByte(daily);
	payload[8] = lowByte(daily); 
	payload[9] = temp;
	payload[10] = battChg;
   d4404:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
	payload[5] = highByte(hourly);
   d4408:	881b      	ldrh	r3, [r3, #0]
	payload[6] = lowByte(hourly); 
   d440a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
	payload[5] = highByte(hourly);
   d440e:	121a      	asrs	r2, r3, #8
	payload[7] = highByte(daily);
   d4410:	4b64      	ldr	r3, [pc, #400]	; (d45a4 <_Z11sendMessagev+0x1e4>)
	payload[5] = highByte(hourly);
   d4412:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	payload[7] = highByte(daily);
   d4416:	881b      	ldrh	r3, [r3, #0]
	payload[8] = lowByte(daily); 
   d4418:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	payload[7] = highByte(daily);
   d441c:	121a      	asrs	r2, r3, #8
	payload[9] = temp;
   d441e:	2355      	movs	r3, #85	; 0x55
   d4420:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	payload[11] = battState;	
	payload[12] = resetCount;
   d4424:	4b60      	ldr	r3, [pc, #384]	; (d45a8 <_Z11sendMessagev+0x1e8>)
	payload[7] = highByte(daily);
   d4426:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	payload[12] = resetCount;
   d442a:	781b      	ldrb	r3, [r3, #0]
   d442c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	payload[13] = alerts;
   d4430:	4b5e      	ldr	r3, [pc, #376]	; (d45ac <_Z11sendMessagev+0x1ec>)
	uint8_t battState = System.batteryState();
   d4432:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
	payload[13] = alerts;
   d4436:	781b      	ldrb	r3, [r3, #0]
   d4438:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
	payload[14] = highByte(rssi);
	payload[15] = lowByte(rssi); 
	payload[16] = msgCnt++;
   d443c:	4b5c      	ldr	r3, [pc, #368]	; (d45b0 <_Z11sendMessagev+0x1f0>)
   d443e:	781a      	ldrb	r2, [r3, #0]
   d4440:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
   d4444:	1c51      	adds	r1, r2, #1
	payload[14] = highByte(rssi);
   d4446:	ba40      	rev16	r0, r0
	payload[16] = msgCnt++;
   d4448:	7019      	strb	r1, [r3, #0]
	payload[14] = highByte(rssi);
   d444a:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("sending message %d", payload[16]);
   d444e:	4959      	ldr	r1, [pc, #356]	; (d45b4 <_Z11sendMessagev+0x1f4>)
   d4450:	4850      	ldr	r0, [pc, #320]	; (d4594 <_Z11sendMessagev+0x1d4>)
   d4452:	f7ff fe69 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4456:	f001 fe93 	bl	d6180 <spark_cloud_flag_connected>
	if (Particle.connected()) Particle.publish("sending","payload to server1",PRIVATE);
   d445a:	b160      	cbz	r0, d4476 <_Z11sendMessagev+0xb6>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d445c:	4b56      	ldr	r3, [pc, #344]	; (d45b8 <_Z11sendMessagev+0x1f8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d445e:	4a57      	ldr	r2, [pc, #348]	; (d45bc <_Z11sendMessagev+0x1fc>)
   d4460:	781b      	ldrb	r3, [r3, #0]
   d4462:	f88d 3000 	strb.w	r3, [sp]
   d4466:	a812      	add	r0, sp, #72	; 0x48
   d4468:	4955      	ldr	r1, [pc, #340]	; (d45c0 <_Z11sendMessagev+0x200>)
   d446a:	233c      	movs	r3, #60	; 0x3c
   d446c:	f002 f90c 	bl	d6688 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4470:	a813      	add	r0, sp, #76	; 0x4c
   d4472:	f7ff ff8f 	bl	d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	if (manager.sendtoWait(payload, sizeof(payload), SERVER1_ADDRESS) == RH_ROUTER_ERROR_NONE) {
   d4476:	2300      	movs	r3, #0
   d4478:	9300      	str	r3, [sp, #0]
   d447a:	4852      	ldr	r0, [pc, #328]	; (d45c4 <_Z11sendMessagev+0x204>)
   d447c:	2302      	movs	r3, #2
   d447e:	2211      	movs	r2, #17
   d4480:	a90d      	add	r1, sp, #52	; 0x34
   d4482:	f000 fc93 	bl	d4dac <_ZN6RHMesh10sendtoWaitEPhhhh>
   d4486:	4604      	mov	r4, r0
   d4488:	2800      	cmp	r0, #0
   d448a:	d17f      	bne.n	d458c <_Z11sendMessagev+0x1cc>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server
		uint8_t len = sizeof(buf);
   d448c:	23f9      	movs	r3, #249	; 0xf9
		uint8_t from;     
		Log.info("Message sent");
   d448e:	494e      	ldr	r1, [pc, #312]	; (d45c8 <_Z11sendMessagev+0x208>)
   d4490:	4840      	ldr	r0, [pc, #256]	; (d4594 <_Z11sendMessagev+0x1d4>)
		if (manager.recvfromAckTimeout(buf, &len, 3000, &from)) {
   d4492:	4d4e      	ldr	r5, [pc, #312]	; (d45cc <_Z11sendMessagev+0x20c>)
		uint8_t len = sizeof(buf);
   d4494:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		Log.info("Message sent");
   d4498:	f7ff fe46 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
		if (manager.recvfromAckTimeout(buf, &len, 3000, &from)) {
   d449c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   d44a0:	9300      	str	r3, [sp, #0]
   d44a2:	e9cd 4403 	strd	r4, r4, [sp, #12]
   d44a6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d44aa:	4846      	ldr	r0, [pc, #280]	; (d45c4 <_Z11sendMessagev+0x204>)
   d44ac:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d44b0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d44b4:	4629      	mov	r1, r5
   d44b6:	f000 fd7f 	bl	d4fb8 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>
   d44ba:	2800      	cmp	r0, #0
   d44bc:	d061      	beq.n	d4582 <_Z11sendMessagev+0x1c2>
			buf[len] = 0;
   d44be:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
			char data[64];
			snprintf(data, sizeof(data),"Response: 0x%02x rssi=%d - delivery %s", from, driver.lastRssi(), (buf[0] == payload[16]) ? "successful":"unsuccessful");
   d44c2:	4835      	ldr	r0, [pc, #212]	; (d4598 <_Z11sendMessagev+0x1d8>)
			buf[len] = 0;
   d44c4:	54ec      	strb	r4, [r5, r3]
			snprintf(data, sizeof(data),"Response: 0x%02x rssi=%d - delivery %s", from, driver.lastRssi(), (buf[0] == payload[16]) ? "successful":"unsuccessful");
   d44c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   d44ca:	9307      	str	r3, [sp, #28]
   d44cc:	f000 fa51 	bl	d4972 <_ZN15RHGenericDriver8lastRssiEv>
   d44d0:	782f      	ldrb	r7, [r5, #0]
   d44d2:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
   d44d6:	493e      	ldr	r1, [pc, #248]	; (d45d0 <_Z11sendMessagev+0x210>)
   d44d8:	4a3e      	ldr	r2, [pc, #248]	; (d45d4 <_Z11sendMessagev+0x214>)
   d44da:	9b07      	ldr	r3, [sp, #28]
   d44dc:	42b7      	cmp	r7, r6
   d44de:	bf18      	it	ne
   d44e0:	460a      	movne	r2, r1
   d44e2:	e9cd 0200 	strd	r0, r2, [sp]
   d44e6:	2140      	movs	r1, #64	; 0x40
   d44e8:	4a3b      	ldr	r2, [pc, #236]	; (d45d8 <_Z11sendMessagev+0x218>)
   d44ea:	a812      	add	r0, sp, #72	; 0x48
   d44ec:	f001 fee8 	bl	d62c0 <snprintf>
			Log.info(data);
   d44f0:	4828      	ldr	r0, [pc, #160]	; (d4594 <_Z11sendMessagev+0x1d4>)
   d44f2:	a912      	add	r1, sp, #72	; 0x48
   d44f4:	f7ff fe18 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
			uint32_t newTime = ((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]);
   d44f8:	f8d5 2001 	ldr.w	r2, [r5, #1]
			Log.info("Time is: %lu",newTime);
   d44fc:	4937      	ldr	r1, [pc, #220]	; (d45dc <_Z11sendMessagev+0x21c>)
   d44fe:	4825      	ldr	r0, [pc, #148]	; (d4594 <_Z11sendMessagev+0x1d4>)
   d4500:	ba12      	rev	r2, r2
   d4502:	9207      	str	r2, [sp, #28]
   d4504:	f7ff fe10 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
			Time.setTime(newTime);  // Set time based on response from gateway
   d4508:	9a07      	ldr	r2, [sp, #28]
   d450a:	4621      	mov	r1, r4
   d450c:	4610      	mov	r0, r2
   d450e:	f004 f809 	bl	d8524 <_ZN9TimeClass7setTimeEx>
			Log.info("Time set to %lu local time is %s", newTime, Time.timeStr(newTime).c_str());
   d4512:	9a07      	ldr	r2, [sp, #28]
   d4514:	4623      	mov	r3, r4
   d4516:	a809      	add	r0, sp, #36	; 0x24
   d4518:	f004 f818 	bl	d854c <_ZN9TimeClass7timeStrEx>
   d451c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d451e:	9a07      	ldr	r2, [sp, #28]
   d4520:	492f      	ldr	r1, [pc, #188]	; (d45e0 <_Z11sendMessagev+0x220>)
   d4522:	481c      	ldr	r0, [pc, #112]	; (d4594 <_Z11sendMessagev+0x1d4>)
   d4524:	f7ff fe00 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
   d4528:	a809      	add	r0, sp, #36	; 0x24
   d452a:	f003 feef 	bl	d830c <_ZN6StringD1Ev>
			Log.info("Next report in %u seconds",((buf[5] << 8) | buf[6]));
   d452e:	f8b5 2005 	ldrh.w	r2, [r5, #5]
   d4532:	492c      	ldr	r1, [pc, #176]	; (d45e4 <_Z11sendMessagev+0x224>)
   d4534:	4817      	ldr	r0, [pc, #92]	; (d4594 <_Z11sendMessagev+0x1d4>)
   d4536:	ba52      	rev16	r2, r2
   d4538:	b292      	uxth	r2, r2
   d453a:	f7ff fdf5 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
			nextReportSeconds = ((buf[5] << 8) | buf[6]);
   d453e:	796a      	ldrb	r2, [r5, #5]
   d4540:	79ab      	ldrb	r3, [r5, #6]
   d4542:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4546:	4a28      	ldr	r2, [pc, #160]	; (d45e8 <_Z11sendMessagev+0x228>)
   d4548:	8013      	strh	r3, [r2, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d454a:	f001 fe19 	bl	d6180 <spark_cloud_flag_connected>
			if (Particle.connected()) Particle.publish("Update",data,PRIVATE);
   d454e:	b160      	cbz	r0, d456a <_Z11sendMessagev+0x1aa>
   d4550:	4b19      	ldr	r3, [pc, #100]	; (d45b8 <_Z11sendMessagev+0x1f8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4552:	4926      	ldr	r1, [pc, #152]	; (d45ec <_Z11sendMessagev+0x22c>)
   d4554:	781b      	ldrb	r3, [r3, #0]
   d4556:	f88d 3000 	strb.w	r3, [sp]
   d455a:	a809      	add	r0, sp, #36	; 0x24
   d455c:	233c      	movs	r3, #60	; 0x3c
   d455e:	aa12      	add	r2, sp, #72	; 0x48
   d4560:	f002 f892 	bl	d6688 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4564:	a80a      	add	r0, sp, #40	; 0x28
   d4566:	f7ff ff15 	bl	d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		else {
			Log.info("No reply, is rf95_mesh_server1, rf95_mesh_server2 and rf95_mesh_server3 running?");
		}
	}
	else Log.info("sendtoWait failed. Are the intermediate mesh servers running?");
	lastReportSeconds = Time.now();
   d456a:	f004 f844 	bl	d85f6 <_ZN9TimeClass3nowEv>
   d456e:	4b20      	ldr	r3, [pc, #128]	; (d45f0 <_Z11sendMessagev+0x230>)
   d4570:	17c1      	asrs	r1, r0, #31
   d4572:	e9c3 0100 	strd	r0, r1, [r3]
	digitalWrite(blueLED,LOW);
   d4576:	2100      	movs	r1, #0
   d4578:	2007      	movs	r0, #7
   d457a:	f004 fa50 	bl	d8a1e <digitalWrite>
}
   d457e:	b023      	add	sp, #140	; 0x8c
   d4580:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Log.info("No reply, is rf95_mesh_server1, rf95_mesh_server2 and rf95_mesh_server3 running?");
   d4582:	491c      	ldr	r1, [pc, #112]	; (d45f4 <_Z11sendMessagev+0x234>)
	else Log.info("sendtoWait failed. Are the intermediate mesh servers running?");
   d4584:	4803      	ldr	r0, [pc, #12]	; (d4594 <_Z11sendMessagev+0x1d4>)
   d4586:	f7ff fdcf 	bl	d4128 <_ZNK5spark6Logger4infoEPKcz>
   d458a:	e7ee      	b.n	d456a <_Z11sendMessagev+0x1aa>
   d458c:	491a      	ldr	r1, [pc, #104]	; (d45f8 <_Z11sendMessagev+0x238>)
   d458e:	e7f9      	b.n	d4584 <_Z11sendMessagev+0x1c4>
   d4590:	000d97ce 	.word	0x000d97ce
   d4594:	2003e58c 	.word	0x2003e58c
   d4598:	2003e078 	.word	0x2003e078
   d459c:	feff0000 	.word	0xfeff0000
   d45a0:	2003e1a8 	.word	0x2003e1a8
   d45a4:	2003e074 	.word	0x2003e074
   d45a8:	2003f400 	.word	0x2003f400
   d45ac:	2003df79 	.word	0x2003df79
   d45b0:	2003df78 	.word	0x2003df78
   d45b4:	000d97ee 	.word	0x000d97ee
   d45b8:	2003df68 	.word	0x2003df68
   d45bc:	000d9801 	.word	0x000d9801
   d45c0:	000d9814 	.word	0x000d9814
   d45c4:	2003e1dc 	.word	0x2003e1dc
   d45c8:	000d981c 	.word	0x000d981c
   d45cc:	2003df7a 	.word	0x2003df7a
   d45d0:	000d97c1 	.word	0x000d97c1
   d45d4:	000d97c3 	.word	0x000d97c3
   d45d8:	000d9829 	.word	0x000d9829
   d45dc:	000d9850 	.word	0x000d9850
   d45e0:	000d985d 	.word	0x000d985d
   d45e4:	000d987e 	.word	0x000d987e
   d45e8:	2003ded8 	.word	0x2003ded8
   d45ec:	000d9898 	.word	0x000d9898
   d45f0:	2003e1b0 	.word	0x2003e1b0
   d45f4:	000d989f 	.word	0x000d989f
   d45f8:	000d98f0 	.word	0x000d98f0

000d45fc <loop>:
{
   d45fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (state) {
   d45fe:	4c13      	ldr	r4, [pc, #76]	; (d464c <loop+0x50>)
   d4600:	4d13      	ldr	r5, [pc, #76]	; (d4650 <loop+0x54>)
   d4602:	7823      	ldrb	r3, [r4, #0]
   d4604:	2b02      	cmp	r3, #2
   d4606:	d007      	beq.n	d4618 <loop+0x1c>
   d4608:	2b06      	cmp	r3, #6
   d460a:	d01a      	beq.n	d4642 <loop+0x46>
	if (sensorDetect) recordCount();                // The ISR had raised the sensor flag - this will service interrupts regardless of state
   d460c:	782b      	ldrb	r3, [r5, #0]
   d460e:	b1e3      	cbz	r3, d464a <loop+0x4e>
}
   d4610:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	if (sensorDetect) recordCount();                // The ISR had raised the sensor flag - this will service interrupts regardless of state
   d4614:	f7ff bda0 	b.w	d4158 <_Z11recordCountv>
			if (Time.now() - lastReportSeconds > nextReportSeconds) {	// Using the sendFrequency set above, we go to the reporing state
   d4618:	f003 ffed 	bl	d85f6 <_ZN9TimeClass3nowEv>
   d461c:	4a0d      	ldr	r2, [pc, #52]	; (d4654 <loop+0x58>)
   d461e:	e9d2 3200 	ldrd	r3, r2, [r2]
   d4622:	1ac6      	subs	r6, r0, r3
   d4624:	4b0c      	ldr	r3, [pc, #48]	; (d4658 <loop+0x5c>)
   d4626:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d462a:	eb61 0702 	sbc.w	r7, r1, r2
   d462e:	881a      	ldrh	r2, [r3, #0]
   d4630:	2300      	movs	r3, #0
   d4632:	42b2      	cmp	r2, r6
   d4634:	41bb      	sbcs	r3, r7
   d4636:	dae9      	bge.n	d460c <loop+0x10>
				sensorDetect = true;
   d4638:	2301      	movs	r3, #1
   d463a:	702b      	strb	r3, [r5, #0]
				state = REPORTING_STATE;
   d463c:	2306      	movs	r3, #6
			state = IDLE_STATE;
   d463e:	7023      	strb	r3, [r4, #0]
		break;
   d4640:	e7e4      	b.n	d460c <loop+0x10>
			sendMessage();
   d4642:	f7ff febd 	bl	d43c0 <_Z11sendMessagev>
			state = IDLE_STATE;
   d4646:	2302      	movs	r3, #2
   d4648:	e7f9      	b.n	d463e <loop+0x42>
}
   d464a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d464c:	2003e315 	.word	0x2003e315
   d4650:	2003e314 	.word	0x2003e314
   d4654:	2003e1b0 	.word	0x2003e1b0
   d4658:	2003ded8 	.word	0x2003ded8

000d465c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d465c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d465e:	e9d0 5300 	ldrd	r5, r3, [r0]
   d4662:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4664:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4666:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d466a:	42ae      	cmp	r6, r5
   d466c:	d004      	beq.n	d4678 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d466e:	4628      	mov	r0, r5
   d4670:	f003 fe4c 	bl	d830c <_ZN6StringD1Ev>
   d4674:	3514      	adds	r5, #20
   d4676:	e7f8      	b.n	d466a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4678:	6820      	ldr	r0, [r4, #0]
   d467a:	f001 fe09 	bl	d6290 <free>
    AllocatorT::free(data_);
}
   d467e:	4620      	mov	r0, r4
   d4680:	bd70      	pop	{r4, r5, r6, pc}

000d4682 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4682:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4686:	4604      	mov	r4, r0
   d4688:	460d      	mov	r5, r1
   d468a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d468c:	d916      	bls.n	d46bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d468e:	4290      	cmp	r0, r2
   d4690:	d215      	bcs.n	d46be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d4692:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d4696:	1a75      	subs	r5, r6, r1
   d4698:	f1a1 0714 	sub.w	r7, r1, #20
   d469c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d469e:	42b7      	cmp	r7, r6
   d46a0:	d01c      	beq.n	d46dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d46a2:	b12c      	cbz	r4, d46b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d46a4:	4631      	mov	r1, r6
   d46a6:	4620      	mov	r0, r4
   d46a8:	f003 feac 	bl	d8404 <_ZN6StringC1EOS_>
   d46ac:	7c33      	ldrb	r3, [r6, #16]
   d46ae:	7423      	strb	r3, [r4, #16]
   d46b0:	4630      	mov	r0, r6
   d46b2:	f003 fe2b 	bl	d830c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d46b6:	3e14      	subs	r6, #20
   d46b8:	3c14      	subs	r4, #20
   d46ba:	e7f0      	b.n	d469e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d46bc:	d00e      	beq.n	d46dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d46be:	42b5      	cmp	r5, r6
   d46c0:	d00c      	beq.n	d46dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d46c2:	b12c      	cbz	r4, d46d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d46c4:	4629      	mov	r1, r5
   d46c6:	4620      	mov	r0, r4
   d46c8:	f003 fe9c 	bl	d8404 <_ZN6StringC1EOS_>
   d46cc:	7c2b      	ldrb	r3, [r5, #16]
   d46ce:	7423      	strb	r3, [r4, #16]
   d46d0:	4628      	mov	r0, r5
   d46d2:	f003 fe1b 	bl	d830c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d46d6:	3514      	adds	r5, #20
   d46d8:	3414      	adds	r4, #20
   d46da:	e7f0      	b.n	d46be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d46dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d46de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d46de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d46e2:	2300      	movs	r3, #0
   d46e4:	e9c0 3300 	strd	r3, r3, [r0]
   d46e8:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d46ea:	684f      	ldr	r7, [r1, #4]
   d46ec:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d46ee:	4604      	mov	r4, r0
   d46f0:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d46f2:	dd23      	ble.n	d473c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d46f4:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d46f8:	fb08 f007 	mul.w	r0, r8, r7
   d46fc:	f001 fdc0 	bl	d6280 <malloc>
            if (!d) {
   d4700:	4605      	mov	r5, r0
   d4702:	b1d8      	cbz	r0, d473c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4704:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4708:	fb08 1202 	mla	r2, r8, r2, r1
   d470c:	f7ff ffb9 	bl	d4682 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4710:	6820      	ldr	r0, [r4, #0]
   d4712:	f001 fdbd 	bl	d6290 <free>
        data_ = d;
   d4716:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4718:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d471a:	e9d6 7300 	ldrd	r7, r3, [r6]
   d471e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d4722:	45b8      	cmp	r8, r7
   d4724:	d008      	beq.n	d4738 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d4726:	4639      	mov	r1, r7
   d4728:	4628      	mov	r0, r5
   d472a:	f003 fe85 	bl	d8438 <_ZN6StringC1ERKS_>
   d472e:	7c3b      	ldrb	r3, [r7, #16]
   d4730:	742b      	strb	r3, [r5, #16]
   d4732:	3714      	adds	r7, #20
   d4734:	3514      	adds	r5, #20
   d4736:	e7f4      	b.n	d4722 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d4738:	6873      	ldr	r3, [r6, #4]
   d473a:	6063      	str	r3, [r4, #4]
}
   d473c:	4620      	mov	r0, r4
   d473e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4744 <_GLOBAL__sub_I_SystemMode>:
}
   d4744:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d4746:	4b2e      	ldr	r3, [pc, #184]	; (d4800 <_GLOBAL__sub_I_SystemMode+0xbc>)
    SleepResult() {}
   d4748:	4a2e      	ldr	r2, [pc, #184]	; (d4804 <_GLOBAL__sub_I_SystemMode+0xc0>)
   d474a:	2501      	movs	r5, #1
   d474c:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   d474e:	4b2e      	ldr	r3, [pc, #184]	; (d4808 <_GLOBAL__sub_I_SystemMode+0xc4>)
   d4750:	2400      	movs	r4, #0
   d4752:	b08d      	sub	sp, #52	; 0x34
    SleepResult() {}
   d4754:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4756:	601c      	str	r4, [r3, #0]
   d4758:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d475a:	719c      	strb	r4, [r3, #6]
        set_system_mode(mode);
   d475c:	2003      	movs	r0, #3
   d475e:	f001 fcbb 	bl	d60d8 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d4762:	4621      	mov	r1, r4
   d4764:	4628      	mov	r0, r5
   d4766:	f001 fcc7 	bl	d60f8 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d476a:	4629      	mov	r1, r5
   d476c:	2004      	movs	r0, #4
   d476e:	f001 fae1 	bl	d5d34 <HAL_Feature_Set>
        capacity_(0) {
   d4772:	e9cd 4400 	strd	r4, r4, [sp]
   d4776:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d4778:	f004 f840 	bl	d87fc <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d477c:	4c23      	ldr	r4, [pc, #140]	; (d480c <_GLOBAL__sub_I_SystemMode+0xc8>)
   d477e:	4606      	mov	r6, r0
   d4780:	4669      	mov	r1, sp
   d4782:	a803      	add	r0, sp, #12
   d4784:	f7ff ffab 	bl	d46de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4788:	4627      	mov	r7, r4
        stream_(&stream) {
   d478a:	a903      	add	r1, sp, #12
   d478c:	a806      	add	r0, sp, #24
   d478e:	f7ff ffa6 	bl	d46de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4792:	4b1f      	ldr	r3, [pc, #124]	; (d4810 <_GLOBAL__sub_I_SystemMode+0xcc>)
   d4794:	f847 3b04 	str.w	r3, [r7], #4
   d4798:	a906      	add	r1, sp, #24
   d479a:	a809      	add	r0, sp, #36	; 0x24
   d479c:	f7ff ff9f 	bl	d46de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d47a0:	aa09      	add	r2, sp, #36	; 0x24
   d47a2:	211e      	movs	r1, #30
   d47a4:	4638      	mov	r0, r7
   d47a6:	f003 f880 	bl	d78aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d47aa:	a809      	add	r0, sp, #36	; 0x24
   d47ac:	f7ff ff56 	bl	d465c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d47b0:	a806      	add	r0, sp, #24
   d47b2:	f7ff ff53 	bl	d465c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47b6:	4b17      	ldr	r3, [pc, #92]	; (d4814 <_GLOBAL__sub_I_SystemMode+0xd0>)
   d47b8:	6023      	str	r3, [r4, #0]
   d47ba:	6226      	str	r6, [r4, #32]
   d47bc:	a803      	add	r0, sp, #12
   d47be:	f7ff ff4d 	bl	d465c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47c2:	4b15      	ldr	r3, [pc, #84]	; (d4818 <_GLOBAL__sub_I_SystemMode+0xd4>)
   d47c4:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d47c6:	f004 f819 	bl	d87fc <_Z16_fetch_usbserialv>
   d47ca:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d47ce:	f004 f803 	bl	d87d8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d47d2:	f002 fd0f 	bl	d71f4 <_ZN5spark10LogManager8instanceEv>
   d47d6:	4621      	mov	r1, r4
RH_RF95 driver(RFM95_CS, RFM95_INT);
   d47d8:	4c10      	ldr	r4, [pc, #64]	; (d481c <_GLOBAL__sub_I_SystemMode+0xd8>)
   d47da:	f002 fff8 	bl	d77ce <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   d47de:	4668      	mov	r0, sp
   d47e0:	f7ff ff3c 	bl	d465c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
RH_RF95 driver(RFM95_CS, RFM95_INT);
   d47e4:	4b0e      	ldr	r3, [pc, #56]	; (d4820 <_GLOBAL__sub_I_SystemMode+0xdc>)
   d47e6:	2202      	movs	r2, #2
   d47e8:	2106      	movs	r1, #6
   d47ea:	4620      	mov	r0, r4
   d47ec:	f000 ffde 	bl	d57ac <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, CLIENT_ADDRESS);
   d47f0:	462a      	mov	r2, r5
   d47f2:	4621      	mov	r1, r4
   d47f4:	480b      	ldr	r0, [pc, #44]	; (d4824 <_GLOBAL__sub_I_SystemMode+0xe0>)
   d47f6:	f000 facf 	bl	d4d98 <_ZN6RHMeshC1ER15RHGenericDriverh>
}
   d47fa:	b00d      	add	sp, #52	; 0x34
   d47fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d47fe:	bf00      	nop
   d4800:	2003df68 	.word	0x2003df68
   d4804:	ffff0000 	.word	0xffff0000
   d4808:	2003df58 	.word	0x2003df58
   d480c:	2003e1b8 	.word	0x2003e1b8
   d4810:	000d9938 	.word	0x000d9938
   d4814:	000d9d58 	.word	0x000d9d58
   d4818:	000d9950 	.word	0x000d9950
   d481c:	2003e078 	.word	0x2003e078
   d4820:	2003e324 	.word	0x2003e324
   d4824:	2003e1dc 	.word	0x2003e1dc

000d4828 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   d4828:	6001      	str	r1, [r0, #0]
   d482a:	7102      	strb	r2, [r0, #4]
{
}
   d482c:	4770      	bx	lr

000d482e <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   d482e:	6800      	ldr	r0, [r0, #0]
   d4830:	6803      	ldr	r3, [r0, #0]
   d4832:	68db      	ldr	r3, [r3, #12]
   d4834:	4718      	bx	r3

000d4836 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   d4836:	6800      	ldr	r0, [r0, #0]
   d4838:	6803      	ldr	r3, [r0, #0]
   d483a:	6a1b      	ldr	r3, [r3, #32]
   d483c:	4718      	bx	r3

000d483e <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   d483e:	6800      	ldr	r0, [r0, #0]
   d4840:	6803      	ldr	r3, [r0, #0]
   d4842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4844:	4718      	bx	r3

000d4846 <_ZN10RHDatagram11setHeaderToEh>:
    return _thisAddress;
}

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   d4846:	6800      	ldr	r0, [r0, #0]
   d4848:	6803      	ldr	r3, [r0, #0]
   d484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d484c:	4718      	bx	r3

000d484e <_ZN10RHDatagram6sendtoEPhhh>:
{
   d484e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4850:	4605      	mov	r5, r0
   d4852:	460c      	mov	r4, r1
    setHeaderTo(address);
   d4854:	4619      	mov	r1, r3
{
   d4856:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   d4858:	f7ff fff5 	bl	d4846 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   d485c:	6828      	ldr	r0, [r5, #0]
   d485e:	9a01      	ldr	r2, [sp, #4]
   d4860:	6803      	ldr	r3, [r0, #0]
   d4862:	695b      	ldr	r3, [r3, #20]
   d4864:	4621      	mov	r1, r4
}
   d4866:	b003      	add	sp, #12
   d4868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   d486c:	4718      	bx	r3

000d486e <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   d486e:	6800      	ldr	r0, [r0, #0]
   d4870:	6803      	ldr	r3, [r0, #0]
   d4872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4874:	4718      	bx	r3

000d4876 <_ZN10RHDatagram14setThisAddressEh>:
{
   d4876:	b538      	push	{r3, r4, r5, lr}
   d4878:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   d487a:	6800      	ldr	r0, [r0, #0]
   d487c:	6803      	ldr	r3, [r0, #0]
{
   d487e:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   d4880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4882:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   d4884:	4629      	mov	r1, r5
   d4886:	4620      	mov	r0, r4
   d4888:	f7ff fff1 	bl	d486e <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   d488c:	7125      	strb	r5, [r4, #4]
}
   d488e:	bd38      	pop	{r3, r4, r5, pc}

000d4890 <_ZN10RHDatagram4initEv>:
{
   d4890:	b538      	push	{r3, r4, r5, lr}
   d4892:	4604      	mov	r4, r0
    bool ret = _driver.init();
   d4894:	6800      	ldr	r0, [r0, #0]
   d4896:	6803      	ldr	r3, [r0, #0]
   d4898:	689b      	ldr	r3, [r3, #8]
   d489a:	4798      	blx	r3
    if (ret)
   d489c:	4605      	mov	r5, r0
   d489e:	b118      	cbz	r0, d48a8 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   d48a0:	7921      	ldrb	r1, [r4, #4]
   d48a2:	4620      	mov	r0, r4
   d48a4:	f7ff ffe7 	bl	d4876 <_ZN10RHDatagram14setThisAddressEh>
}
   d48a8:	4628      	mov	r0, r5
   d48aa:	bd38      	pop	{r3, r4, r5, pc}

000d48ac <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   d48ac:	6800      	ldr	r0, [r0, #0]
   d48ae:	6803      	ldr	r3, [r0, #0]
   d48b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d48b2:	4718      	bx	r3

000d48b4 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   d48b4:	6800      	ldr	r0, [r0, #0]
   d48b6:	6803      	ldr	r3, [r0, #0]
   d48b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d48ba:	4718      	bx	r3

000d48bc <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   d48bc:	6800      	ldr	r0, [r0, #0]
   d48be:	6803      	ldr	r3, [r0, #0]
   d48c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d48c2:	4718      	bx	r3

000d48c4 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   d48c4:	6800      	ldr	r0, [r0, #0]
   d48c6:	6803      	ldr	r3, [r0, #0]
   d48c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d48ca:	4718      	bx	r3

000d48cc <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   d48cc:	6800      	ldr	r0, [r0, #0]
   d48ce:	6803      	ldr	r3, [r0, #0]
   d48d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d48d2:	4718      	bx	r3

000d48d4 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   d48d4:	6800      	ldr	r0, [r0, #0]
   d48d6:	6803      	ldr	r3, [r0, #0]
   d48d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d48da:	4718      	bx	r3

000d48dc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   d48dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d48e0:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   d48e2:	6800      	ldr	r0, [r0, #0]
{
   d48e4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   d48e6:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   d48e8:	6803      	ldr	r3, [r0, #0]
   d48ea:	691b      	ldr	r3, [r3, #16]
{
   d48ec:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   d48f0:	4798      	blx	r3
   d48f2:	4605      	mov	r5, r0
   d48f4:	b1c8      	cbz	r0, d492a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   d48f6:	b11e      	cbz	r6, d4900 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   d48f8:	4620      	mov	r0, r4
   d48fa:	f7ff ffe3 	bl	d48c4 <_ZN10RHDatagram10headerFromEv>
   d48fe:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   d4900:	f1b9 0f00 	cmp.w	r9, #0
   d4904:	d004      	beq.n	d4910 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   d4906:	4620      	mov	r0, r4
   d4908:	f7ff ffd8 	bl	d48bc <_ZN10RHDatagram8headerToEv>
   d490c:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   d4910:	f1b8 0f00 	cmp.w	r8, #0
   d4914:	d004      	beq.n	d4920 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   d4916:	4620      	mov	r0, r4
   d4918:	f7ff ffd8 	bl	d48cc <_ZN10RHDatagram8headerIdEv>
   d491c:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   d4920:	b11f      	cbz	r7, d492a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   d4922:	4620      	mov	r0, r4
   d4924:	f7ff ffd6 	bl	d48d4 <_ZN10RHDatagram11headerFlagsEv>
   d4928:	7038      	strb	r0, [r7, #0]
}
   d492a:	4628      	mov	r0, r5
   d492c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4930 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   d4930:	2001      	movs	r0, #1
   d4932:	4770      	bx	lr

000d4934 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   d4934:	7903      	ldrb	r3, [r0, #4]
   d4936:	2b03      	cmp	r3, #3
   d4938:	d0fc      	beq.n	d4934 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   d493a:	2001      	movs	r0, #1
   d493c:	4770      	bx	lr

000d493e <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   d493e:	2000      	movs	r0, #0
   d4940:	4770      	bx	lr

000d4942 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   d4942:	7181      	strb	r1, [r0, #6]
}
   d4944:	4770      	bx	lr

000d4946 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   d4946:	7141      	strb	r1, [r0, #5]
}
   d4948:	4770      	bx	lr

000d494a <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   d494a:	72c1      	strb	r1, [r0, #11]
}
   d494c:	4770      	bx	lr

000d494e <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   d494e:	7301      	strb	r1, [r0, #12]
}
   d4950:	4770      	bx	lr

000d4952 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   d4952:	7341      	strb	r1, [r0, #13]
}
   d4954:	4770      	bx	lr

000d4956 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   d4956:	7b83      	ldrb	r3, [r0, #14]
   d4958:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   d495c:	4311      	orrs	r1, r2
   d495e:	7381      	strb	r1, [r0, #14]
}
   d4960:	4770      	bx	lr

000d4962 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   d4962:	79c0      	ldrb	r0, [r0, #7]
}
   d4964:	4770      	bx	lr

000d4966 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   d4966:	7a00      	ldrb	r0, [r0, #8]
}
   d4968:	4770      	bx	lr

000d496a <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   d496a:	7a40      	ldrb	r0, [r0, #9]
}
   d496c:	4770      	bx	lr

000d496e <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   d496e:	7a80      	ldrb	r0, [r0, #10]
}
   d4970:	4770      	bx	lr

000d4972 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   d4972:	8a00      	ldrh	r0, [r0, #16]
}
   d4974:	b200      	sxth	r0, r0
   d4976:	4770      	bx	lr

000d4978 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   d4978:	7900      	ldrb	r0, [r0, #4]
}
   d497a:	4770      	bx	lr

000d497c <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   d497c:	7101      	strb	r1, [r0, #4]
}
   d497e:	4770      	bx	lr

000d4980 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   d4980:	8a40      	ldrh	r0, [r0, #18]
}
   d4982:	b280      	uxth	r0, r0
   d4984:	4770      	bx	lr

000d4986 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   d4986:	8a80      	ldrh	r0, [r0, #20]
}
   d4988:	b280      	uxth	r0, r0
   d498a:	4770      	bx	lr

000d498c <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   d498c:	8ac0      	ldrh	r0, [r0, #22]
}
   d498e:	b280      	uxth	r0, r0
   d4990:	4770      	bx	lr

000d4992 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   d4992:	b538      	push	{r3, r4, r5, lr}
   d4994:	4605      	mov	r5, r0
   d4996:	460c      	mov	r4, r1
    while (!available())
   d4998:	682b      	ldr	r3, [r5, #0]
   d499a:	4628      	mov	r0, r5
   d499c:	68db      	ldr	r3, [r3, #12]
   d499e:	4798      	blx	r3
   d49a0:	b928      	cbnz	r0, d49ae <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   d49a2:	2c00      	cmp	r4, #0
   d49a4:	d0f8      	beq.n	d4998 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   d49a6:	4620      	mov	r0, r4
   d49a8:	f001 fcba 	bl	d6320 <delay>
   d49ac:	e7f4      	b.n	d4998 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   d49ae:	bd38      	pop	{r3, r4, r5, pc}

000d49b0 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   d49b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d49b2:	4605      	mov	r5, r0
   d49b4:	460f      	mov	r7, r1
   d49b6:	4614      	mov	r4, r2

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d49b8:	f001 f9dc 	bl	d5d74 <HAL_Timer_Get_Milli_Seconds>
   d49bc:	4606      	mov	r6, r0
   d49be:	f001 f9d9 	bl	d5d74 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d49c2:	1b80      	subs	r0, r0, r6
   d49c4:	42b8      	cmp	r0, r7
   d49c6:	d20a      	bcs.n	d49de <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   d49c8:	682b      	ldr	r3, [r5, #0]
   d49ca:	4628      	mov	r0, r5
   d49cc:	68db      	ldr	r3, [r3, #12]
   d49ce:	4798      	blx	r3
   d49d0:	b930      	cbnz	r0, d49e0 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   d49d2:	2c00      	cmp	r4, #0
   d49d4:	d0f3      	beq.n	d49be <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   d49d6:	4620      	mov	r0, r4
   d49d8:	f001 fca2 	bl	d6320 <delay>
   d49dc:	e7ef      	b.n	d49be <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   d49de:	2000      	movs	r0, #0
}
   d49e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d49e2 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   d49e2:	b570      	push	{r4, r5, r6, lr}
   d49e4:	4604      	mov	r4, r0
   d49e6:	460e      	mov	r6, r1
   d49e8:	f001 f9c4 	bl	d5d74 <HAL_Timer_Get_Milli_Seconds>
   d49ec:	4605      	mov	r5, r0
   d49ee:	f001 f9c1 	bl	d5d74 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d49f2:	1b40      	subs	r0, r0, r5
   d49f4:	42b0      	cmp	r0, r6
   d49f6:	d204      	bcs.n	d4a02 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   d49f8:	7923      	ldrb	r3, [r4, #4]
   d49fa:	2b03      	cmp	r3, #3
   d49fc:	d0f7      	beq.n	d49ee <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   d49fe:	2001      	movs	r0, #1
}
   d4a00:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d4a02:	2000      	movs	r0, #0
   d4a04:	e7fc      	b.n	d4a00 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000d4a06 <_ZN15RHGenericDriver7waitCADEv>:
{
   d4a06:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   d4a08:	69c3      	ldr	r3, [r0, #28]
{
   d4a0a:	4604      	mov	r4, r0
    if (!_cad_timeout)
   d4a0c:	b1b3      	cbz	r3, d4a3c <_ZN15RHGenericDriver7waitCADEv+0x36>
   d4a0e:	f001 f9b1 	bl	d5d74 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d4a12:	2664      	movs	r6, #100	; 0x64
   d4a14:	4605      	mov	r5, r0
    while (isChannelActive())
   d4a16:	6823      	ldr	r3, [r4, #0]
   d4a18:	4620      	mov	r0, r4
   d4a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a1c:	4798      	blx	r3
   d4a1e:	b168      	cbz	r0, d4a3c <_ZN15RHGenericDriver7waitCADEv+0x36>
   d4a20:	f001 f9a8 	bl	d5d74 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   d4a24:	69e3      	ldr	r3, [r4, #28]
   d4a26:	1b40      	subs	r0, r0, r5
   d4a28:	4298      	cmp	r0, r3
   d4a2a:	d809      	bhi.n	d4a40 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d4a2c:	210a      	movs	r1, #10
   d4a2e:	2001      	movs	r0, #1
   d4a30:	f003 fb9b 	bl	d816a <_Z6randomii>
   d4a34:	4370      	muls	r0, r6
   d4a36:	f001 fc73 	bl	d6320 <delay>
    while (isChannelActive())
   d4a3a:	e7ec      	b.n	d4a16 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   d4a3c:	2001      	movs	r0, #1
}
   d4a3e:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   d4a40:	2000      	movs	r0, #0
   d4a42:	e7fc      	b.n	d4a3e <_ZN15RHGenericDriver7waitCADEv+0x38>

000d4a44 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   d4a44:	4a06      	ldr	r2, [pc, #24]	; (d4a60 <_ZN15RHGenericDriverC1Ev+0x1c>)
   d4a46:	6002      	str	r2, [r0, #0]
   d4a48:	21ff      	movs	r1, #255	; 0xff
   d4a4a:	2200      	movs	r2, #0
   d4a4c:	7102      	strb	r2, [r0, #4]
   d4a4e:	7141      	strb	r1, [r0, #5]
   d4a50:	8242      	strh	r2, [r0, #18]
   d4a52:	72c1      	strb	r1, [r0, #11]
   d4a54:	8282      	strh	r2, [r0, #20]
   d4a56:	8181      	strh	r1, [r0, #12]
   d4a58:	7382      	strb	r2, [r0, #14]
   d4a5a:	82c2      	strh	r2, [r0, #22]
   d4a5c:	61c2      	str	r2, [r0, #28]
}
   d4a5e:	4770      	bx	lr
   d4a60:	000d9968 	.word	0x000d9968

000d4a64 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   d4a64:	4770      	bx	lr

000d4a66 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   d4a66:	4770      	bx	lr

000d4a68 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   d4a68:	4770      	bx	lr

000d4a6a <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   d4a6a:	4770      	bx	lr

000d4a6c <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   d4a6c:	4770      	bx	lr

000d4a6e <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   d4a6e:	7141      	strb	r1, [r0, #5]
}
   d4a70:	4770      	bx	lr

000d4a72 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   d4a72:	7181      	strb	r1, [r0, #6]
}
   d4a74:	4770      	bx	lr

000d4a76 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   d4a76:	7101      	strb	r1, [r0, #4]
}
   d4a78:	4770      	bx	lr
	...

000d4a7c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d4a7c:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   d4a7e:	4d03      	ldr	r5, [pc, #12]	; (d4a8c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   d4a80:	6005      	str	r5, [r0, #0]
   d4a82:	7101      	strb	r1, [r0, #4]
   d4a84:	7142      	strb	r2, [r0, #5]
   d4a86:	7183      	strb	r3, [r0, #6]
}
   d4a88:	bd30      	pop	{r4, r5, pc}
   d4a8a:	bf00      	nop
   d4a8c:	000d99e8 	.word	0x000d99e8

000d4a90 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4a90:	4770      	bx	lr

000d4a92 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4a92:	b510      	push	{r4, lr}
  }
   d4a94:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4a96:	4604      	mov	r4, r0
  }
   d4a98:	f004 f818 	bl	d8acc <_ZdlPvj>
   d4a9c:	4620      	mov	r0, r4
   d4a9e:	bd10      	pop	{r4, pc}

000d4aa0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4aa0:	b40e      	push	{r1, r2, r3}
   d4aa2:	b503      	push	{r0, r1, lr}
   d4aa4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4aa6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4aa8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4aac:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4aae:	f003 fb20 	bl	d80f2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4ab2:	b002      	add	sp, #8
   d4ab4:	f85d eb04 	ldr.w	lr, [sp], #4
   d4ab8:	b003      	add	sp, #12
   d4aba:	4770      	bx	lr

000d4abc <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4abc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4abe:	4604      	mov	r4, r0
   d4ac0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4ac2:	7922      	ldrb	r2, [r4, #4]
   d4ac4:	68a3      	ldr	r3, [r4, #8]
   d4ac6:	b132      	cbz	r2, d4ad6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4ac8:	b9a3      	cbnz	r3, d4af4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4aca:	490b      	ldr	r1, [pc, #44]	; (d4af8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4acc:	b002      	add	sp, #8
   d4ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4ad2:	f003 badd 	b.w	d8090 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4ad6:	4a09      	ldr	r2, [pc, #36]	; (d4afc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4ad8:	7b26      	ldrb	r6, [r4, #12]
   d4ada:	4d09      	ldr	r5, [pc, #36]	; (d4b00 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4adc:	4909      	ldr	r1, [pc, #36]	; (d4b04 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4ade:	7b64      	ldrb	r4, [r4, #13]
   d4ae0:	2e01      	cmp	r6, #1
   d4ae2:	bf18      	it	ne
   d4ae4:	4629      	movne	r1, r5
   d4ae6:	e9cd 1400 	strd	r1, r4, [sp]
   d4aea:	4907      	ldr	r1, [pc, #28]	; (d4b08 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4aec:	f7ff ffd8 	bl	d4aa0 <_ZN5Print6printfEPKcz>
  }
   d4af0:	b002      	add	sp, #8
   d4af2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4af4:	4a05      	ldr	r2, [pc, #20]	; (d4b0c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4af6:	e7ef      	b.n	d4ad8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4af8:	000d9a25 	.word	0x000d9a25
   d4afc:	000d9d1f 	.word	0x000d9d1f
   d4b00:	000d9a21 	.word	0x000d9a21
   d4b04:	000d9a1d 	.word	0x000d9a1d
   d4b08:	000d9a3b 	.word	0x000d9a3b
   d4b0c:	000d9a14 	.word	0x000d9a14

000d4b10 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d4b10:	b510      	push	{r4, lr}
   d4b12:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   d4b14:	f7ff ffb2 	bl	d4a7c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   d4b18:	4b05      	ldr	r3, [pc, #20]	; (d4b30 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   d4b1a:	6023      	str	r3, [r4, #0]
  {
   d4b1c:	4b05      	ldr	r3, [pc, #20]	; (d4b34 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   d4b1e:	60a3      	str	r3, [r4, #8]
   d4b20:	2301      	movs	r3, #1
   d4b22:	7323      	strb	r3, [r4, #12]
   d4b24:	2300      	movs	r3, #0
   d4b26:	6123      	str	r3, [r4, #16]
   d4b28:	82a3      	strh	r3, [r4, #20]
{
}
   d4b2a:	4620      	mov	r0, r4
   d4b2c:	bd10      	pop	{r4, pc}
   d4b2e:	bf00      	nop
   d4b30:	000d9a74 	.word	0x000d9a74
   d4b34:	000d9a60 	.word	0x000d9a60

000d4b38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4b38:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4b3a:	4c0b      	ldr	r4, [pc, #44]	; (d4b68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4b3c:	7821      	ldrb	r1, [r4, #0]
   d4b3e:	f3bf 8f5b 	dmb	ish
   d4b42:	f011 0101 	ands.w	r1, r1, #1
   d4b46:	d10b      	bne.n	d4b60 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4b48:	4620      	mov	r0, r4
   d4b4a:	9101      	str	r1, [sp, #4]
   d4b4c:	f7ff fab4 	bl	d40b8 <__cxa_guard_acquire>
   d4b50:	9901      	ldr	r1, [sp, #4]
   d4b52:	b128      	cbz	r0, d4b60 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4b54:	4805      	ldr	r0, [pc, #20]	; (d4b6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4b56:	f003 fb1f 	bl	d8198 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4b5a:	4620      	mov	r0, r4
   d4b5c:	f7ff fab1 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d4b60:	4802      	ldr	r0, [pc, #8]	; (d4b6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4b62:	b002      	add	sp, #8
   d4b64:	bd10      	pop	{r4, pc}
   d4b66:	bf00      	nop
   d4b68:	2003e318 	.word	0x2003e318
   d4b6c:	2003e31c 	.word	0x2003e31c

000d4b70 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   d4b70:	b507      	push	{r0, r1, r2, lr}
   d4b72:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4b74:	f7ff ffe0 	bl	d4b38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4b78:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   d4b7a:	b003      	add	sp, #12
   d4b7c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4b80:	f003 bbbc 	b.w	d82fc <_ZN8SPIClass8transferEh>

000d4b84 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   d4b84:	b508      	push	{r3, lr}
    }
    void transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   d4b86:	f7ff ffd7 	bl	d4b38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   d4b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4b8e:	f003 bbbb 	b.w	d8308 <_ZN8SPIClass15attachInterruptEv>

000d4b92 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   d4b92:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   d4b94:	f7ff ffd0 	bl	d4b38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   d4b98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4b9c:	f003 bbb5 	b.w	d830a <_ZN8SPIClass15detachInterruptEv>

000d4ba0 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   d4ba0:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   d4ba2:	7903      	ldrb	r3, [r0, #4]
   d4ba4:	2b04      	cmp	r3, #4
   d4ba6:	d020      	beq.n	d4bea <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   d4ba8:	2b03      	cmp	r3, #3
   d4baa:	d020      	beq.n	d4bee <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   d4bac:	2b02      	cmp	r3, #2
   d4bae:	d020      	beq.n	d4bf2 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   d4bb0:	4a11      	ldr	r2, [pc, #68]	; (d4bf8 <_ZN13RHHardwareSPI5beginEv+0x58>)
   d4bb2:	4912      	ldr	r1, [pc, #72]	; (d4bfc <_ZN13RHHardwareSPI5beginEv+0x5c>)
   d4bb4:	2b01      	cmp	r3, #1
   d4bb6:	bf18      	it	ne
   d4bb8:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   d4bba:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   d4bbc:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   d4bbe:	3901      	subs	r1, #1
   d4bc0:	bf18      	it	ne
   d4bc2:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   d4bc4:	b133      	cbz	r3, d4bd4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   d4bc6:	2b01      	cmp	r3, #1
   d4bc8:	d004      	beq.n	d4bd4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   d4bca:	2b02      	cmp	r3, #2
   d4bcc:	d002      	beq.n	d4bd4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   d4bce:	2b03      	cmp	r3, #3
   d4bd0:	bf18      	it	ne
   d4bd2:	2300      	movne	r3, #0
class SPISettings : public Printable {
   d4bd4:	2400      	movs	r4, #0
   d4bd6:	7304      	strb	r4, [r0, #12]
   d4bd8:	6102      	str	r2, [r0, #16]
   d4bda:	7501      	strb	r1, [r0, #20]
   d4bdc:	7543      	strb	r3, [r0, #21]
        instance().begin();
   d4bde:	f7ff ffab 	bl	d4b38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   d4be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4be6:	f003 bae1 	b.w	d81ac <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   d4bea:	4a05      	ldr	r2, [pc, #20]	; (d4c00 <_ZN13RHHardwareSPI5beginEv+0x60>)
   d4bec:	e7e5      	b.n	d4bba <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   d4bee:	4a05      	ldr	r2, [pc, #20]	; (d4c04 <_ZN13RHHardwareSPI5beginEv+0x64>)
   d4bf0:	e7e3      	b.n	d4bba <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   d4bf2:	4a05      	ldr	r2, [pc, #20]	; (d4c08 <_ZN13RHHardwareSPI5beginEv+0x68>)
   d4bf4:	e7e1      	b.n	d4bba <_ZN13RHHardwareSPI5beginEv+0x1a>
   d4bf6:	bf00      	nop
   d4bf8:	001e8480 	.word	0x001e8480
   d4bfc:	000f4240 	.word	0x000f4240
   d4c00:	00f42400 	.word	0x00f42400
   d4c04:	007a1200 	.word	0x007a1200
   d4c08:	003d0900 	.word	0x003d0900

000d4c0c <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   d4c0c:	b508      	push	{r3, lr}
        instance().end();
   d4c0e:	f7ff ff93 	bl	d4b38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   d4c12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4c16:	f003 bada 	b.w	d81ce <_ZN8SPIClass3endEv>

000d4c1a <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   d4c1a:	b510      	push	{r4, lr}
   d4c1c:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d4c1e:	f7ff ff8b 	bl	d4b38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4c22:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   d4c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4c2a:	f003 baf9 	b.w	d8220 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d4c2e <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   d4c2e:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4c30:	f7ff ff82 	bl	d4b38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   d4c34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4c38:	f003 bad8 	b.w	d81ec <_ZN8SPIClass14endTransactionEv>

000d4c3c <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   d4c3c:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   d4c3e:	f7ff ff7b 	bl	d4b38 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   d4c42:	bd08      	pop	{r3, pc}

000d4c44 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   d4c44:	2300      	movs	r3, #0
   d4c46:	4802      	ldr	r0, [pc, #8]	; (d4c50 <_GLOBAL__sub_I_hardware_spi+0xc>)
   d4c48:	461a      	mov	r2, r3
   d4c4a:	4619      	mov	r1, r3
   d4c4c:	f7ff bf60 	b.w	d4b10 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   d4c50:	2003e324 	.word	0x2003e324

000d4c54 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   d4c54:	2a01      	cmp	r2, #1
   d4c56:	d105      	bne.n	d4c64 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   d4c58:	7a00      	ldrb	r0, [r0, #8]
   d4c5a:	780b      	ldrb	r3, [r1, #0]
   d4c5c:	1a1b      	subs	r3, r3, r0
   d4c5e:	4258      	negs	r0, r3
   d4c60:	4158      	adcs	r0, r3
   d4c62:	4770      	bx	lr
   d4c64:	2000      	movs	r0, #0
}
   d4c66:	4770      	bx	lr

000d4c68 <_ZN6RHMesh5doArpEh>:
{
   d4c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d4c6c:	4d26      	ldr	r5, [pc, #152]	; (d4d08 <_ZN6RHMesh5doArpEh+0xa0>)
   d4c6e:	2301      	movs	r3, #1
{
   d4c70:	b087      	sub	sp, #28
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d4c72:	702b      	strb	r3, [r5, #0]
    p->destlen = 1; 
   d4c74:	706b      	strb	r3, [r5, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d4c76:	2300      	movs	r3, #0
{
   d4c78:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   d4c7a:	70a9      	strb	r1, [r5, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d4c7c:	9300      	str	r3, [sp, #0]
   d4c7e:	2203      	movs	r2, #3
   d4c80:	23ff      	movs	r3, #255	; 0xff
   d4c82:	4629      	mov	r1, r5
{
   d4c84:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d4c86:	f000 fbe7 	bl	d5458 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   d4c8a:	b120      	cbz	r0, d4c96 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   d4c8c:	2400      	movs	r4, #0
}
   d4c8e:	4620      	mov	r0, r4
   d4c90:	b007      	add	sp, #28
   d4c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   d4c96:	23fa      	movs	r3, #250	; 0xfa
   d4c98:	f88d 3017 	strb.w	r3, [sp, #23]
   d4c9c:	f001 f86a 	bl	d5d74 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   d4ca0:	f106 0904 	add.w	r9, r6, #4
   d4ca4:	4680      	mov	r8, r0
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d4ca6:	46aa      	mov	sl, r5
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   d4ca8:	f508 647a 	add.w	r4, r8, #4000	; 0xfa0
   d4cac:	f001 f862 	bl	d5d74 <HAL_Timer_Get_Milli_Seconds>
   d4cb0:	1a20      	subs	r0, r4, r0
   d4cb2:	2800      	cmp	r0, #0
   d4cb4:	ddea      	ble.n	d4c8c <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   d4cb6:	b281      	uxth	r1, r0
   d4cb8:	2200      	movs	r2, #0
   d4cba:	4648      	mov	r0, r9
   d4cbc:	f7ff fdbf 	bl	d483e <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d4cc0:	2800      	cmp	r0, #0
   d4cc2:	d0f3      	beq.n	d4cac <_ZN6RHMesh5doArpEh+0x44>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d4cc4:	2300      	movs	r3, #0
   d4cc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d4cca:	e9cd 3300 	strd	r3, r3, [sp]
   d4cce:	f10d 0217 	add.w	r2, sp, #23
   d4cd2:	4651      	mov	r1, sl
   d4cd4:	4630      	mov	r0, r6
   d4cd6:	f000 fbc9 	bl	d546c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d4cda:	4604      	mov	r4, r0
   d4cdc:	2800      	cmp	r0, #0
   d4cde:	d0e3      	beq.n	d4ca8 <_ZN6RHMesh5doArpEh+0x40>
		if (   messageLen > 1
   d4ce0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d4ce4:	2b01      	cmp	r3, #1
   d4ce6:	d9df      	bls.n	d4ca8 <_ZN6RHMesh5doArpEh+0x40>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d4ce8:	f895 b000 	ldrb.w	fp, [r5]
   d4cec:	f1bb 0f02 	cmp.w	fp, #2
   d4cf0:	d1da      	bne.n	d4ca8 <_ZN6RHMesh5doArpEh+0x40>
		    addRouteTo(address, headerFrom());
   d4cf2:	4648      	mov	r0, r9
   d4cf4:	f7ff fde6 	bl	d48c4 <_ZN10RHDatagram10headerFromEv>
   d4cf8:	465b      	mov	r3, fp
   d4cfa:	4602      	mov	r2, r0
   d4cfc:	4639      	mov	r1, r7
   d4cfe:	4630      	mov	r0, r6
   d4d00:	f000 fb21 	bl	d5346 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   d4d04:	e7c3      	b.n	d4c8e <_ZN6RHMesh5doArpEh+0x26>
   d4d06:	bf00      	nop
   d4d08:	2003e33c 	.word	0x2003e33c

000d4d0c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   d4d0c:	2a01      	cmp	r2, #1
{
   d4d0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4d12:	4607      	mov	r7, r0
   d4d14:	460e      	mov	r6, r1
   d4d16:	4614      	mov	r4, r2
    if (   messageLen > 1 
   d4d18:	d93b      	bls.n	d4d92 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d4d1a:	794d      	ldrb	r5, [r1, #5]
   d4d1c:	2d02      	cmp	r5, #2
   d4d1e:	d130      	bne.n	d4d82 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   d4d20:	f100 0804 	add.w	r8, r0, #4
   d4d24:	79c9      	ldrb	r1, [r1, #7]
   d4d26:	9101      	str	r1, [sp, #4]
   d4d28:	4640      	mov	r0, r8
   d4d2a:	f7ff fdcb 	bl	d48c4 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d4d2e:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   d4d30:	462b      	mov	r3, r5
   d4d32:	4602      	mov	r2, r0
   d4d34:	9901      	ldr	r1, [sp, #4]
   d4d36:	4638      	mov	r0, r7
   d4d38:	f000 fb05 	bl	d5346 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d4d3c:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   d4d3e:	f106 0308 	add.w	r3, r6, #8
   d4d42:	2400      	movs	r4, #0
   d4d44:	4622      	mov	r2, r4
   d4d46:	4295      	cmp	r5, r2
   d4d48:	f104 0401 	add.w	r4, r4, #1
   d4d4c:	b2e4      	uxtb	r4, r4
   d4d4e:	d904      	bls.n	d4d5a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   d4d50:	f813 2b01 	ldrb.w	r2, [r3], #1
   d4d54:	7a39      	ldrb	r1, [r7, #8]
   d4d56:	4291      	cmp	r1, r2
   d4d58:	d1f4      	bne.n	d4d44 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   d4d5a:	f104 0108 	add.w	r1, r4, #8
   d4d5e:	440e      	add	r6, r1
	while (i < numRoutes)
   d4d60:	42a5      	cmp	r5, r4
   d4d62:	d916      	bls.n	d4d92 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   d4d64:	f816 1b01 	ldrb.w	r1, [r6], #1
   d4d68:	9101      	str	r1, [sp, #4]
   d4d6a:	4640      	mov	r0, r8
   d4d6c:	f7ff fdaa 	bl	d48c4 <_ZN10RHDatagram10headerFromEv>
   d4d70:	3401      	adds	r4, #1
   d4d72:	4602      	mov	r2, r0
   d4d74:	9901      	ldr	r1, [sp, #4]
   d4d76:	2302      	movs	r3, #2
   d4d78:	4638      	mov	r0, r7
   d4d7a:	b2e4      	uxtb	r4, r4
   d4d7c:	f000 fae3 	bl	d5346 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   d4d80:	e7ee      	b.n	d4d60 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   d4d82:	2d03      	cmp	r5, #3
   d4d84:	d105      	bne.n	d4d92 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   d4d86:	7989      	ldrb	r1, [r1, #6]
}
   d4d88:	b002      	add	sp, #8
   d4d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   d4d8e:	f000 bac3 	b.w	d5318 <_ZN8RHRouter13deleteRouteToEh>
}
   d4d92:	b002      	add	sp, #8
   d4d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4d98 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   d4d98:	b510      	push	{r4, lr}
   d4d9a:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   d4d9c:	f000 fb14 	bl	d53c8 <_ZN8RHRouterC1ER15RHGenericDriverh>
   d4da0:	4b01      	ldr	r3, [pc, #4]	; (d4da8 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   d4da2:	6023      	str	r3, [r4, #0]
}
   d4da4:	4620      	mov	r0, r4
   d4da6:	bd10      	pop	{r4, pc}
   d4da8:	000d9aa8 	.word	0x000d9aa8

000d4dac <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   d4dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d4db0:	2af9      	cmp	r2, #249	; 0xf9
{
   d4db2:	f89d 9020 	ldrb.w	r9, [sp, #32]
   d4db6:	4606      	mov	r6, r0
   d4db8:	460f      	mov	r7, r1
   d4dba:	4614      	mov	r4, r2
   d4dbc:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d4dbe:	d825      	bhi.n	d4e0c <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   d4dc0:	2bff      	cmp	r3, #255	; 0xff
   d4dc2:	d114      	bne.n	d4dee <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d4dc4:	f8df 8048 	ldr.w	r8, [pc, #72]	; d4e10 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   d4dc8:	4640      	mov	r0, r8
   d4dca:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   d4dcc:	4622      	mov	r2, r4
   d4dce:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d4dd0:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   d4dd4:	f004 fad2 	bl	d937c <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d4dd8:	1c62      	adds	r2, r4, #1
   d4dda:	f8cd 9020 	str.w	r9, [sp, #32]
   d4dde:	462b      	mov	r3, r5
   d4de0:	4641      	mov	r1, r8
   d4de2:	4630      	mov	r0, r6
   d4de4:	b2d2      	uxtb	r2, r2
}
   d4de6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d4dea:	f000 bb35 	b.w	d5458 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   d4dee:	4619      	mov	r1, r3
   d4df0:	f000 fa4e 	bl	d5290 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   d4df4:	2800      	cmp	r0, #0
   d4df6:	d1e5      	bne.n	d4dc4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   d4df8:	6833      	ldr	r3, [r6, #0]
   d4dfa:	4629      	mov	r1, r5
   d4dfc:	689b      	ldr	r3, [r3, #8]
   d4dfe:	4630      	mov	r0, r6
   d4e00:	4798      	blx	r3
   d4e02:	2800      	cmp	r0, #0
   d4e04:	d1de      	bne.n	d4dc4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d4e06:	2002      	movs	r0, #2
}
   d4e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   d4e0c:	2001      	movs	r0, #1
   d4e0e:	e7fb      	b.n	d4e08 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   d4e10:	2003e33c 	.word	0x2003e33c

000d4e14 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   d4e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e18:	b089      	sub	sp, #36	; 0x24
   d4e1a:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d4e1c:	23fa      	movs	r3, #250	; 0xfa
   d4e1e:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d4e22:	f10d 031f 	add.w	r3, sp, #31
   d4e26:	9303      	str	r3, [sp, #12]
   d4e28:	f10d 031e 	add.w	r3, sp, #30
   d4e2c:	f8df a180 	ldr.w	sl, [pc, #384]	; d4fb0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>
   d4e30:	9302      	str	r3, [sp, #8]
   d4e32:	f10d 031d 	add.w	r3, sp, #29
   d4e36:	9301      	str	r3, [sp, #4]
   d4e38:	ab07      	add	r3, sp, #28
   d4e3a:	9300      	str	r3, [sp, #0]
{     
   d4e3c:	4689      	mov	r9, r1
   d4e3e:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d4e40:	f10d 031b 	add.w	r3, sp, #27
   d4e44:	f10d 021a 	add.w	r2, sp, #26
   d4e48:	4651      	mov	r1, sl
{     
   d4e4a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   d4e4e:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d4e50:	f000 fb0c 	bl	d546c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d4e54:	4656      	mov	r6, sl
   d4e56:	4604      	mov	r4, r0
   d4e58:	b920      	cbnz	r0, d4e64 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x50>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   d4e5a:	2400      	movs	r4, #0
}
   d4e5c:	4620      	mov	r0, r4
   d4e5e:	b009      	add	sp, #36	; 0x24
   d4e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   d4e64:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d4e68:	b373      	cbz	r3, d4ec8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   d4e6a:	f89a 2000 	ldrb.w	r2, [sl]
   d4e6e:	bb5a      	cbnz	r2, d4ec8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    if (source) *source = _source;
   d4e70:	f1b8 0f00 	cmp.w	r8, #0
   d4e74:	d003      	beq.n	d4e7e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x6a>
   d4e76:	f89d 201b 	ldrb.w	r2, [sp, #27]
   d4e7a:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   d4e7e:	f1bb 0f00 	cmp.w	fp, #0
   d4e82:	d003      	beq.n	d4e8c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x78>
   d4e84:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d4e88:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   d4e8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d4e8e:	b11a      	cbz	r2, d4e98 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d4e90:	9913      	ldr	r1, [sp, #76]	; 0x4c
   d4e92:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d4e96:	700a      	strb	r2, [r1, #0]
	    if (flags)  *flags  = _flags;
   d4e98:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d4e9a:	b11a      	cbz	r2, d4ea4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d4e9c:	9914      	ldr	r1, [sp, #80]	; 0x50
   d4e9e:	f89d 201e 	ldrb.w	r2, [sp, #30]
   d4ea2:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   d4ea4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   d4ea6:	b11a      	cbz	r2, d4eb0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d4ea8:	9915      	ldr	r1, [sp, #84]	; 0x54
   d4eaa:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d4eae:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   d4eb0:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   d4eb2:	493d      	ldr	r1, [pc, #244]	; (d4fa8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   d4eb4:	3b01      	subs	r3, #1
   d4eb6:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d4eb8:	429a      	cmp	r2, r3
		*len = msgLen;
   d4eba:	bf88      	it	hi
   d4ebc:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   d4ebe:	783a      	ldrb	r2, [r7, #0]
   d4ec0:	4648      	mov	r0, r9
   d4ec2:	f004 fa5b 	bl	d937c <memcpy>
	    return true;
   d4ec6:	e7c9      	b.n	d4e5c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   d4ec8:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d4ecc:	2aff      	cmp	r2, #255	; 0xff
   d4ece:	d1c4      	bne.n	d4e5a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && tmpMessageLen > 1 
   d4ed0:	2b01      	cmp	r3, #1
   d4ed2:	d9c2      	bls.n	d4e5a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   d4ed4:	7832      	ldrb	r2, [r6, #0]
   d4ed6:	2a01      	cmp	r2, #1
   d4ed8:	d1bf      	bne.n	d4e5a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    if (_source == _thisAddress)
   d4eda:	7a2a      	ldrb	r2, [r5, #8]
   d4edc:	f89d 401b 	ldrb.w	r4, [sp, #27]
   d4ee0:	42a2      	cmp	r2, r4
   d4ee2:	d0ba      	beq.n	d4e5a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   d4ee4:	1edf      	subs	r7, r3, #3
   d4ee6:	4931      	ldr	r1, [pc, #196]	; (d4fac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   d4ee8:	b2ff      	uxtb	r7, r7
   d4eea:	2300      	movs	r3, #0
   d4eec:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   d4ef0:	4547      	cmp	r7, r8
   d4ef2:	d906      	bls.n	d4f02 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xee>
		if (d->route[i] == _thisAddress)
   d4ef4:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4ef8:	4282      	cmp	r2, r0
   d4efa:	f103 0301 	add.w	r3, r3, #1
   d4efe:	d1f5      	bne.n	d4eec <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd8>
   d4f00:	e7ab      	b.n	d4e5a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   d4f02:	f105 0904 	add.w	r9, r5, #4
   d4f06:	4648      	mov	r0, r9
   d4f08:	f7ff fcdc 	bl	d48c4 <_ZN10RHDatagram10headerFromEv>
   d4f0c:	2302      	movs	r3, #2
   d4f0e:	4602      	mov	r2, r0
   d4f10:	4621      	mov	r1, r4
   d4f12:	4628      	mov	r0, r5
   d4f14:	f000 fa17 	bl	d5346 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   d4f18:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d4f1c:	b193      	cbz	r3, d4f44 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x130>
   d4f1e:	4c24      	ldr	r4, [pc, #144]	; (d4fb0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
	        for (i = 0; i < numRoutes; i++)
   d4f20:	1ba3      	subs	r3, r4, r6
   d4f22:	b2db      	uxtb	r3, r3
   d4f24:	429f      	cmp	r7, r3
   d4f26:	d90c      	bls.n	d4f42 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12e>
		    addRouteTo(d->route[i], headerFrom());
   d4f28:	78e1      	ldrb	r1, [r4, #3]
   d4f2a:	9105      	str	r1, [sp, #20]
   d4f2c:	4648      	mov	r0, r9
   d4f2e:	f7ff fcc9 	bl	d48c4 <_ZN10RHDatagram10headerFromEv>
   d4f32:	9905      	ldr	r1, [sp, #20]
   d4f34:	4602      	mov	r2, r0
   d4f36:	2302      	movs	r3, #2
   d4f38:	4628      	mov	r0, r5
   d4f3a:	f000 fa04 	bl	d5346 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   d4f3e:	3401      	adds	r4, #1
   d4f40:	e7ee      	b.n	d4f20 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x10c>
   d4f42:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   d4f44:	682b      	ldr	r3, [r5, #0]
   d4f46:	7872      	ldrb	r2, [r6, #1]
   d4f48:	68db      	ldr	r3, [r3, #12]
   d4f4a:	491a      	ldr	r1, [pc, #104]	; (d4fb4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x1a0>)
   d4f4c:	4628      	mov	r0, r5
   d4f4e:	4798      	blx	r3
   d4f50:	4604      	mov	r4, r0
   d4f52:	b160      	cbz	r0, d4f6e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x15a>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d4f54:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d4f56:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d4f58:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d4f5a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d4f5e:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d4f62:	4913      	ldr	r1, [pc, #76]	; (d4fb0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   d4f64:	9400      	str	r4, [sp, #0]
   d4f66:	4628      	mov	r0, r5
   d4f68:	f000 fa76 	bl	d5458 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d4f6c:	e776      	b.n	d4e5c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	    else if ((i < _max_hops) && _isa_router)
   d4f6e:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   d4f72:	4543      	cmp	r3, r8
   d4f74:	f67f af71 	bls.w	d4e5a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
   d4f78:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d4f7c:	2b00      	cmp	r3, #0
   d4f7e:	f43f af6c 	beq.w	d4e5a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		tmpMessageLen++;
   d4f82:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   d4f86:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d4f88:	4909      	ldr	r1, [pc, #36]	; (d4fb0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
		d->route[numRoutes] = _thisAddress;
   d4f8a:	443e      	add	r6, r7
		tmpMessageLen++;
   d4f8c:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   d4f8e:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d4f90:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d4f94:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   d4f96:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d4f98:	9300      	str	r3, [sp, #0]
   d4f9a:	4628      	mov	r0, r5
   d4f9c:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   d4f9e:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d4fa2:	f000 fa23 	bl	d53ec <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   d4fa6:	e759      	b.n	d4e5c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
   d4fa8:	2003e33d 	.word	0x2003e33d
   d4fac:	2003e33f 	.word	0x2003e33f
   d4fb0:	2003e33c 	.word	0x2003e33c
   d4fb4:	2003e33e 	.word	0x2003e33e

000d4fb8 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAckTimeout(uint8_t* buf, uint8_t* len, uint16_t timeout, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d4fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4fbc:	b085      	sub	sp, #20
   d4fbe:	4680      	mov	r8, r0
   d4fc0:	461c      	mov	r4, r3
   d4fc2:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
   d4fc6:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d4fc8:	4689      	mov	r9, r1
   d4fca:	4692      	mov	sl, r2
   d4fcc:	f000 fed2 	bl	d5d74 <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    int32_t timeLeft;
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
    {
	if (waitAvailableTimeout(timeLeft))
   d4fd0:	f108 0b04 	add.w	fp, r8, #4
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
   d4fd4:	4404      	add	r4, r0
   d4fd6:	f000 fecd 	bl	d5d74 <HAL_Timer_Get_Milli_Seconds>
   d4fda:	1a20      	subs	r0, r4, r0
   d4fdc:	2800      	cmp	r0, #0
   d4fde:	dd16      	ble.n	d500e <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x56>
	if (waitAvailableTimeout(timeLeft))
   d4fe0:	b281      	uxth	r1, r0
   d4fe2:	2200      	movs	r2, #0
   d4fe4:	4658      	mov	r0, fp
   d4fe6:	f7ff fc2a 	bl	d483e <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d4fea:	2800      	cmp	r0, #0
   d4fec:	d0f3      	beq.n	d4fd6 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
	{
	    if (recvfromAck(buf, len, from, to, id, flags, hops))
   d4fee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4ff0:	9300      	str	r3, [sp, #0]
   d4ff2:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d4ff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d4ff8:	9501      	str	r5, [sp, #4]
   d4ffa:	4652      	mov	r2, sl
   d4ffc:	4649      	mov	r1, r9
   d4ffe:	4640      	mov	r0, r8
   d5000:	f7ff ff08 	bl	d4e14 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d5004:	2800      	cmp	r0, #0
   d5006:	d0e6      	beq.n	d4fd6 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
		return true;
	    YIELD;
	}
    }
    return false;
}
   d5008:	b005      	add	sp, #20
   d500a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
   d500e:	2000      	movs	r0, #0
   d5010:	e7fa      	b.n	d5008 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x50>
	...

000d5014 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   d5014:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5016:	b085      	sub	sp, #20
   d5018:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d501a:	3004      	adds	r0, #4
{
   d501c:	460e      	mov	r6, r1
   d501e:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d5020:	f7ff fc50 	bl	d48c4 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   d5024:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d5026:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   d5028:	4631      	mov	r1, r6
   d502a:	4628      	mov	r0, r5
   d502c:	f000 f947 	bl	d52be <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d5030:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   d5032:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d5034:	d001      	beq.n	d503a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   d5036:	2805      	cmp	r0, #5
   d5038:	d11b      	bne.n	d5072 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   d503a:	7831      	ldrb	r1, [r6, #0]
   d503c:	4628      	mov	r0, r5
   d503e:	f000 f96b 	bl	d5318 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   d5042:	7872      	ldrb	r2, [r6, #1]
   d5044:	7a2b      	ldrb	r3, [r5, #8]
   d5046:	429a      	cmp	r2, r3
   d5048:	d013      	beq.n	d5072 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   d504a:	4c0b      	ldr	r4, [pc, #44]	; (d5078 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   d504c:	2303      	movs	r3, #3
   d504e:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   d5050:	7833      	ldrb	r3, [r6, #0]
   d5052:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   d5054:	7871      	ldrb	r1, [r6, #1]
   d5056:	2302      	movs	r3, #2
   d5058:	463a      	mov	r2, r7
   d505a:	4628      	mov	r0, r5
   d505c:	f000 f973 	bl	d5346 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   d5060:	2300      	movs	r3, #0
   d5062:	9300      	str	r3, [sp, #0]
   d5064:	4621      	mov	r1, r4
   d5066:	7873      	ldrb	r3, [r6, #1]
   d5068:	2202      	movs	r2, #2
   d506a:	4628      	mov	r0, r5
   d506c:	f000 f9f4 	bl	d5458 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d5070:	4604      	mov	r4, r0
}
   d5072:	4620      	mov	r0, r4
   d5074:	b005      	add	sp, #20
   d5076:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5078:	2003e33c 	.word	0x2003e33c

000d507c <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   d507c:	b510      	push	{r4, lr}
   d507e:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   d5080:	f7ff fbd2 	bl	d4828 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   d5084:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   d5086:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   d5088:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   d508a:	2303      	movs	r3, #3
    _retransmissions = 0;
   d508c:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   d508e:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   d5090:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   d5092:	f44f 7280 	mov.w	r2, #256	; 0x100
   d5096:	f104 0011 	add.w	r0, r4, #17
   d509a:	f004 f997 	bl	d93cc <memset>
}
   d509e:	4620      	mov	r0, r4
   d50a0:	bd10      	pop	{r4, pc}

000d50a2 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   d50a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d50a4:	4604      	mov	r4, r0
   d50a6:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   d50a8:	f7ff fc00 	bl	d48ac <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   d50ac:	4620      	mov	r0, r4
   d50ae:	2200      	movs	r2, #0
   d50b0:	2180      	movs	r1, #128	; 0x80
   d50b2:	f7ff fbff 	bl	d48b4 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   d50b6:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   d50b8:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   d50ba:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   d50be:	f10d 010f 	add.w	r1, sp, #15
   d50c2:	2201      	movs	r2, #1
   d50c4:	4620      	mov	r0, r4
   d50c6:	f7ff fbc2 	bl	d484e <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   d50ca:	4620      	mov	r0, r4
   d50cc:	f7ff fbb3 	bl	d4836 <_ZN10RHDatagram14waitPacketSentEv>
}
   d50d0:	b004      	add	sp, #16
   d50d2:	bd10      	pop	{r4, pc}

000d50d4 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   d50d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d50d8:	7b05      	ldrb	r5, [r0, #12]
   d50da:	3501      	adds	r5, #1
   d50dc:	b2ed      	uxtb	r5, r5
{
   d50de:	b087      	sub	sp, #28
   d50e0:	4604      	mov	r4, r0
   d50e2:	4689      	mov	r9, r1
   d50e4:	4692      	mov	sl, r2
   d50e6:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d50e8:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   d50ea:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   d50ec:	7c22      	ldrb	r2, [r4, #16]
   d50ee:	463b      	mov	r3, r7
   d50f0:	429a      	cmp	r2, r3
   d50f2:	f107 0701 	add.w	r7, r7, #1
   d50f6:	b2ff      	uxtb	r7, r7
   d50f8:	d36b      	bcc.n	d51d2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   d50fa:	4629      	mov	r1, r5
   d50fc:	4620      	mov	r0, r4
   d50fe:	f7ff fbd5 	bl	d48ac <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   d5102:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   d5104:	bf0d      	iteet	eq
   d5106:	22c0      	moveq	r2, #192	; 0xc0
   d5108:	2280      	movne	r2, #128	; 0x80
   d510a:	2140      	movne	r1, #64	; 0x40
   d510c:	2100      	moveq	r1, #0
   d510e:	4620      	mov	r0, r4
   d5110:	f7ff fbd0 	bl	d48b4 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   d5114:	4643      	mov	r3, r8
   d5116:	4652      	mov	r2, sl
   d5118:	4649      	mov	r1, r9
   d511a:	4620      	mov	r0, r4
   d511c:	f7ff fb97 	bl	d484e <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   d5120:	4620      	mov	r0, r4
   d5122:	f7ff fb88 	bl	d4836 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   d5126:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d512a:	d054      	beq.n	d51d6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   d512c:	2f01      	cmp	r7, #1
	    _retransmissions++;
   d512e:	bf82      	ittt	hi
   d5130:	68a3      	ldrhi	r3, [r4, #8]
   d5132:	3301      	addhi	r3, #1
   d5134:	60a3      	strhi	r3, [r4, #8]
   d5136:	f000 fe1d 	bl	d5d74 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   d513a:	f44f 7180 	mov.w	r1, #256	; 0x100
   d513e:	4683      	mov	fp, r0
   d5140:	2000      	movs	r0, #0
   d5142:	89e6      	ldrh	r6, [r4, #14]
   d5144:	f003 f811 	bl	d816a <_Z6randomii>
   d5148:	4370      	muls	r0, r6
   d514a:	bf48      	it	mi
   d514c:	30ff      	addmi	r0, #255	; 0xff
   d514e:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   d5152:	fa1b f686 	uxtah	r6, fp, r6
   d5156:	f000 fe0d 	bl	d5d74 <HAL_Timer_Get_Milli_Seconds>
   d515a:	1a30      	subs	r0, r6, r0
   d515c:	2800      	cmp	r0, #0
   d515e:	ddc5      	ble.n	d50ec <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   d5160:	b281      	uxth	r1, r0
   d5162:	2200      	movs	r2, #0
   d5164:	4620      	mov	r0, r4
   d5166:	f7ff fb6a 	bl	d483e <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d516a:	2800      	cmp	r0, #0
   d516c:	d0f3      	beq.n	d5156 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   d516e:	f10d 0317 	add.w	r3, sp, #23
   d5172:	9302      	str	r3, [sp, #8]
   d5174:	f10d 0316 	add.w	r3, sp, #22
   d5178:	9301      	str	r3, [sp, #4]
   d517a:	2200      	movs	r2, #0
   d517c:	f10d 0315 	add.w	r3, sp, #21
   d5180:	9300      	str	r3, [sp, #0]
   d5182:	4611      	mov	r1, r2
   d5184:	ab05      	add	r3, sp, #20
   d5186:	4620      	mov	r0, r4
   d5188:	f7ff fba8 	bl	d48dc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d518c:	2800      	cmp	r0, #0
   d518e:	d0e2      	beq.n	d5156 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   d5190:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d5194:	f99d 3017 	ldrsb.w	r3, [sp, #23]
   d5198:	4542      	cmp	r2, r8
   d519a:	d10e      	bne.n	d51ba <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   d519c:	f894 c004 	ldrb.w	ip, [r4, #4]
   d51a0:	f89d 1015 	ldrb.w	r1, [sp, #21]
   d51a4:	458c      	cmp	ip, r1
   d51a6:	d108      	bne.n	d51ba <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   d51a8:	2b00      	cmp	r3, #0
   d51aa:	da08      	bge.n	d51be <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   d51ac:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d51b0:	42ab      	cmp	r3, r5
   d51b2:	d1d0      	bne.n	d5156 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   d51b4:	b007      	add	sp, #28
   d51b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   d51ba:	2b00      	cmp	r3, #0
   d51bc:	dbcb      	blt.n	d5156 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   d51be:	18a1      	adds	r1, r4, r2
   d51c0:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d51c4:	7c49      	ldrb	r1, [r1, #17]
   d51c6:	4299      	cmp	r1, r3
   d51c8:	d1c5      	bne.n	d5156 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   d51ca:	4620      	mov	r0, r4
   d51cc:	f7ff ff69 	bl	d50a2 <_ZN18RHReliableDatagram11acknowledgeEhh>
   d51d0:	e7c1      	b.n	d5156 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   d51d2:	2000      	movs	r0, #0
   d51d4:	e7ee      	b.n	d51b4 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   d51d6:	2001      	movs	r0, #1
   d51d8:	e7ec      	b.n	d51b4 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000d51da <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   d51da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d51de:	b089      	sub	sp, #36	; 0x24
   d51e0:	e9cd 2104 	strd	r2, r1, [sp, #16]
   d51e4:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   d51e8:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d51ea:	4604      	mov	r4, r0
   d51ec:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d51ee:	f7ff fb1e 	bl	d482e <_ZN10RHDatagram9availableEv>
   d51f2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d51f6:	b920      	cbnz	r0, d5202 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   d51f8:	2500      	movs	r5, #0
}
   d51fa:	4628      	mov	r0, r5
   d51fc:	b009      	add	sp, #36	; 0x24
   d51fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d5202:	f10d 031f 	add.w	r3, sp, #31
   d5206:	9302      	str	r3, [sp, #8]
   d5208:	f10d 031e 	add.w	r3, sp, #30
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	f10d 031d 	add.w	r3, sp, #29
   d5212:	9300      	str	r3, [sp, #0]
   d5214:	4620      	mov	r0, r4
   d5216:	ab07      	add	r3, sp, #28
   d5218:	f7ff fb60 	bl	d48dc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d521c:	4605      	mov	r5, r0
   d521e:	2800      	cmp	r0, #0
   d5220:	d0ea      	beq.n	d51f8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   d5222:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   d5226:	2b00      	cmp	r3, #0
   d5228:	dbe6      	blt.n	d51f8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   d522a:	7922      	ldrb	r2, [r4, #4]
   d522c:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d5230:	429a      	cmp	r2, r3
   d5232:	d106      	bne.n	d5242 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   d5234:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d5238:	f89d 101e 	ldrb.w	r1, [sp, #30]
   d523c:	4620      	mov	r0, r4
   d523e:	f7ff ff30 	bl	d50a2 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   d5242:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d5246:	f89d 301e 	ldrb.w	r3, [sp, #30]
   d524a:	4414      	add	r4, r2
   d524c:	7c61      	ldrb	r1, [r4, #17]
   d524e:	4299      	cmp	r1, r3
   d5250:	d0d2      	beq.n	d51f8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   d5252:	b106      	cbz	r6, d5256 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x7c>
   d5254:	7032      	strb	r2, [r6, #0]
		if (to)    *to =    _to;
   d5256:	f1b9 0f00 	cmp.w	r9, #0
   d525a:	d003      	beq.n	d5264 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x8a>
   d525c:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d5260:	f889 2000 	strb.w	r2, [r9]
		if (id)    *id =    _id;
   d5264:	f1b8 0f00 	cmp.w	r8, #0
   d5268:	d001      	beq.n	d526e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   d526a:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   d526e:	b117      	cbz	r7, d5276 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9c>
   d5270:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d5274:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   d5276:	7463      	strb	r3, [r4, #17]
		return true;
   d5278:	e7bf      	b.n	d51fa <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000d527a <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   d527a:	4770      	bx	lr

000d527c <_ZN8RHRouter4initEv>:
{
   d527c:	b510      	push	{r4, lr}
   d527e:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   d5280:	3004      	adds	r0, #4
   d5282:	f7ff fb05 	bl	d4890 <_ZN10RHDatagram4initEv>
    if (ret)
   d5286:	b110      	cbz	r0, d528e <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   d5288:	231e      	movs	r3, #30
   d528a:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   d528e:	bd10      	pop	{r4, pc}

000d5290 <_ZN8RHRouter10getRouteToEh>:
{
   d5290:	b510      	push	{r4, lr}
   d5292:	4602      	mov	r2, r0
   d5294:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   d5296:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   d529a:	428c      	cmp	r4, r1
   d529c:	d108      	bne.n	d52b0 <_ZN8RHRouter10getRouteToEh+0x20>
   d529e:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   d52a2:	b12c      	cbz	r4, d52b0 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   d52a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d52a8:	f503 738c 	add.w	r3, r3, #280	; 0x118
   d52ac:	4418      	add	r0, r3
}
   d52ae:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d52b0:	3301      	adds	r3, #1
   d52b2:	2b0a      	cmp	r3, #10
   d52b4:	f102 0203 	add.w	r2, r2, #3
   d52b8:	d1ed      	bne.n	d5296 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   d52ba:	2000      	movs	r0, #0
   d52bc:	e7f7      	b.n	d52ae <_ZN8RHRouter10getRouteToEh+0x1e>

000d52be <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   d52be:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d52c0:	780b      	ldrb	r3, [r1, #0]
   d52c2:	2bff      	cmp	r3, #255	; 0xff
{
   d52c4:	4605      	mov	r5, r0
   d52c6:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d52c8:	d006      	beq.n	d52d8 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   d52ca:	4619      	mov	r1, r3
   d52cc:	9201      	str	r2, [sp, #4]
   d52ce:	f7ff ffdf 	bl	d5290 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   d52d2:	b158      	cbz	r0, d52ec <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   d52d4:	7843      	ldrb	r3, [r0, #1]
   d52d6:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   d52d8:	4621      	mov	r1, r4
   d52da:	1d28      	adds	r0, r5, #4
   d52dc:	f7ff fefa 	bl	d50d4 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   d52e0:	2800      	cmp	r0, #0
   d52e2:	bf14      	ite	ne
   d52e4:	2000      	movne	r0, #0
   d52e6:	2005      	moveq	r0, #5
}
   d52e8:	b003      	add	sp, #12
   d52ea:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d52ec:	2002      	movs	r0, #2
   d52ee:	e7fb      	b.n	d52e8 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000d52f0 <_ZN8RHRouter11deleteRouteEh>:
{
   d52f0:	b510      	push	{r4, lr}
   d52f2:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   d52f6:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   d52f8:	f1c1 0209 	rsb	r2, r1, #9
    memcpy(&_routes[index], &_routes[index+1], 
   d52fc:	f503 708c 	add.w	r0, r3, #280	; 0x118
   d5300:	f203 111b 	addw	r1, r3, #283	; 0x11b
   d5304:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d5308:	4421      	add	r1, r4
   d530a:	4420      	add	r0, r4
   d530c:	f004 f836 	bl	d937c <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   d5310:	2300      	movs	r3, #0
   d5312:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
}
   d5316:	bd10      	pop	{r4, pc}

000d5318 <_ZN8RHRouter13deleteRouteToEh>:
{
   d5318:	b538      	push	{r3, r4, r5, lr}
   d531a:	460a      	mov	r2, r1
   d531c:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d531e:	f500 748c 	add.w	r4, r0, #280	; 0x118
   d5322:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   d5326:	b2d9      	uxtb	r1, r3
   d5328:	5d65      	ldrb	r5, [r4, r5]
   d532a:	4295      	cmp	r5, r2
   d532c:	d103      	bne.n	d5336 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   d532e:	f7ff ffdf 	bl	d52f0 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   d5332:	2001      	movs	r0, #1
}
   d5334:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d5336:	3301      	adds	r3, #1
   d5338:	2b0a      	cmp	r3, #10
   d533a:	d1f2      	bne.n	d5322 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   d533c:	2000      	movs	r0, #0
   d533e:	e7f9      	b.n	d5334 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000d5340 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   d5340:	2100      	movs	r1, #0
   d5342:	f7ff bfd5 	b.w	d52f0 <_ZN8RHRouter11deleteRouteEh>

000d5346 <_ZN8RHRouter10addRouteToEhhh>:
{
   d5346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5348:	4616      	mov	r6, r2
   d534a:	461f      	mov	r7, r3
   d534c:	4604      	mov	r4, r0
   d534e:	460d      	mov	r5, r1
   d5350:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d5352:	f500 728c 	add.w	r2, r0, #280	; 0x118
   d5356:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d535a:	5c11      	ldrb	r1, [r2, r0]
   d535c:	42a9      	cmp	r1, r5
   d535e:	d105      	bne.n	d536c <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   d5360:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   d5362:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d5366:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   d536a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d536c:	3301      	adds	r3, #1
   d536e:	2b0a      	cmp	r3, #10
   d5370:	d1f1      	bne.n	d5356 <_ZN8RHRouter10addRouteToEhhh+0x10>
   d5372:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   d5374:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   d5378:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d537c:	5c11      	ldrb	r1, [r2, r0]
   d537e:	b919      	cbnz	r1, d5388 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   d5380:	4420      	add	r0, r4
   d5382:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   d5386:	e7ec      	b.n	d5362 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d5388:	3301      	adds	r3, #1
   d538a:	2b0a      	cmp	r3, #10
   d538c:	d1f4      	bne.n	d5378 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   d538e:	4620      	mov	r0, r4
   d5390:	f7ff ffd6 	bl	d5340 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d5394:	4620      	mov	r0, r4
   d5396:	f104 031e 	add.w	r3, r4, #30
	if (_routes[i].state == Invalid)
   d539a:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   d539e:	b92a      	cbnz	r2, d53ac <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   d53a0:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   d53a4:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d53a8:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d53ac:	3003      	adds	r0, #3
   d53ae:	4298      	cmp	r0, r3
   d53b0:	d1f3      	bne.n	d539a <_ZN8RHRouter10addRouteToEhhh+0x54>
   d53b2:	e7da      	b.n	d536a <_ZN8RHRouter10addRouteToEhhh+0x24>

000d53b4 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d53b4:	f100 031e 	add.w	r3, r0, #30
	_routes[i].state = Invalid;
   d53b8:	2200      	movs	r2, #0
   d53ba:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d53be:	3003      	adds	r0, #3
   d53c0:	4298      	cmp	r0, r3
   d53c2:	d1fa      	bne.n	d53ba <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   d53c4:	4770      	bx	lr
	...

000d53c8 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   d53c8:	b510      	push	{r4, lr}
   d53ca:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   d53cc:	3004      	adds	r0, #4
   d53ce:	f7ff fe55 	bl	d507c <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   d53d2:	4b05      	ldr	r3, [pc, #20]	; (d53e8 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   d53d4:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d53d6:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   d53da:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d53dc:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   d53e0:	f7ff ffe8 	bl	d53b4 <_ZN8RHRouter17clearRoutingTableEv>
}
   d53e4:	4620      	mov	r0, r4
   d53e6:	bd10      	pop	{r4, pc}
   d53e8:	000d9ac0 	.word	0x000d9ac0

000d53ec <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   d53ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d53f0:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d53f2:	6840      	ldr	r0, [r0, #4]
{
   d53f4:	9101      	str	r1, [sp, #4]
   d53f6:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d53f8:	6803      	ldr	r3, [r0, #0]
{
   d53fa:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d53fe:	699b      	ldr	r3, [r3, #24]
{
   d5400:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d5404:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d5406:	4798      	blx	r3
   d5408:	f106 0805 	add.w	r8, r6, #5
   d540c:	4580      	cmp	r8, r0
   d540e:	d81c      	bhi.n	d544a <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   d5410:	4d10      	ldr	r5, [pc, #64]	; (d5454 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   d5412:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   d5414:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   d5418:	2300      	movs	r3, #0
   d541a:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   d541c:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   d5420:	70eb      	strb	r3, [r5, #3]
   d5422:	1c5a      	adds	r2, r3, #1
   d5424:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   d5428:	1d68      	adds	r0, r5, #5
   d542a:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   d542c:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   d542e:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   d5432:	f003 ffa3 	bl	d937c <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d5436:	6823      	ldr	r3, [r4, #0]
   d5438:	685b      	ldr	r3, [r3, #4]
   d543a:	fa5f f288 	uxtb.w	r2, r8
   d543e:	4629      	mov	r1, r5
   d5440:	4620      	mov	r0, r4
}
   d5442:	b002      	add	sp, #8
   d5444:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d5448:	4718      	bx	r3
}
   d544a:	2001      	movs	r0, #1
   d544c:	b002      	add	sp, #8
   d544e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5452:	bf00      	nop
   d5454:	2003e436 	.word	0x2003e436

000d5458 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   d5458:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   d545a:	f89d 4010 	ldrb.w	r4, [sp, #16]
   d545e:	9401      	str	r4, [sp, #4]
   d5460:	7a04      	ldrb	r4, [r0, #8]
   d5462:	9400      	str	r4, [sp, #0]
   d5464:	f7ff ffc2 	bl	d53ec <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   d5468:	b002      	add	sp, #8
   d546a:	bd10      	pop	{r4, pc}

000d546c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d546c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5470:	b087      	sub	sp, #28
   d5472:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d5474:	23ff      	movs	r3, #255	; 0xff
   d5476:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d547a:	f10d 0317 	add.w	r3, sp, #23
   d547e:	9302      	str	r3, [sp, #8]
   d5480:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d5554 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   d5484:	f10d 0316 	add.w	r3, sp, #22
   d5488:	9301      	str	r3, [sp, #4]
   d548a:	f10d 0315 	add.w	r3, sp, #21
   d548e:	9300      	str	r3, [sp, #0]
{  
   d5490:	4604      	mov	r4, r0
   d5492:	4688      	mov	r8, r1
   d5494:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d5496:	ab05      	add	r3, sp, #20
   d5498:	f10d 0213 	add.w	r2, sp, #19
   d549c:	4649      	mov	r1, r9
   d549e:	3004      	adds	r0, #4
{  
   d54a0:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d54a4:	f7ff fe99 	bl	d51da <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   d54a8:	4605      	mov	r5, r0
   d54aa:	b908      	cbnz	r0, d54b0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   d54ac:	2500      	movs	r5, #0
   d54ae:	e038      	b.n	d5522 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   d54b0:	6823      	ldr	r3, [r4, #0]
   d54b2:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d54b6:	681b      	ldr	r3, [r3, #0]
   d54b8:	4649      	mov	r1, r9
   d54ba:	4620      	mov	r0, r4
   d54bc:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   d54be:	f899 3000 	ldrb.w	r3, [r9]
   d54c2:	7a22      	ldrb	r2, [r4, #8]
   d54c4:	429a      	cmp	r2, r3
   d54c6:	d001      	beq.n	d54cc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   d54c8:	2bff      	cmp	r3, #255	; 0xff
   d54ca:	d12e      	bne.n	d552a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   d54cc:	b117      	cbz	r7, d54d4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   d54ce:	4b21      	ldr	r3, [pc, #132]	; (d5554 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d54d0:	785b      	ldrb	r3, [r3, #1]
   d54d2:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   d54d4:	f1bb 0f00 	cmp.w	fp, #0
   d54d8:	d003      	beq.n	d54e2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   d54da:	4b1e      	ldr	r3, [pc, #120]	; (d5554 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d54dc:	781b      	ldrb	r3, [r3, #0]
   d54de:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   d54e2:	f1ba 0f00 	cmp.w	sl, #0
   d54e6:	d003      	beq.n	d54f0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d54e8:	4b1a      	ldr	r3, [pc, #104]	; (d5554 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d54ea:	78db      	ldrb	r3, [r3, #3]
   d54ec:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   d54f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d54f2:	b11b      	cbz	r3, d54fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d54f4:	4b17      	ldr	r3, [pc, #92]	; (d5554 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d54f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d54f8:	791b      	ldrb	r3, [r3, #4]
   d54fa:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   d54fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d54fe:	b11b      	cbz	r3, d5508 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d5500:	4b14      	ldr	r3, [pc, #80]	; (d5554 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d5502:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d5504:	789b      	ldrb	r3, [r3, #2]
   d5506:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d5508:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   d550c:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d550e:	4912      	ldr	r1, [pc, #72]	; (d5558 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d5510:	3b05      	subs	r3, #5
   d5512:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d5514:	429a      	cmp	r2, r3
		*len = msgLen;
   d5516:	bf88      	it	hi
   d5518:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d551a:	7832      	ldrb	r2, [r6, #0]
   d551c:	4640      	mov	r0, r8
   d551e:	f003 ff2d 	bl	d937c <memcpy>
}
   d5522:	4628      	mov	r0, r5
   d5524:	b007      	add	sp, #28
   d5526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   d552a:	f899 3002 	ldrb.w	r3, [r9, #2]
   d552e:	1c5a      	adds	r2, r3, #1
   d5530:	f889 2002 	strb.w	r2, [r9, #2]
   d5534:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   d5538:	429a      	cmp	r2, r3
   d553a:	d9b7      	bls.n	d54ac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   d553c:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   d5540:	2b00      	cmp	r3, #0
   d5542:	d0b3      	beq.n	d54ac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   d5544:	6823      	ldr	r3, [r4, #0]
   d5546:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d554a:	685b      	ldr	r3, [r3, #4]
   d554c:	4649      	mov	r1, r9
   d554e:	4620      	mov	r0, r4
   d5550:	4798      	blx	r3
   d5552:	e7ab      	b.n	d54ac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   d5554:	2003e436 	.word	0x2003e436
   d5558:	2003e43b 	.word	0x2003e43b

000d555c <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   d555c:	b510      	push	{r4, lr}
   d555e:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   d5560:	6a00      	ldr	r0, [r0, #32]
   d5562:	6803      	ldr	r3, [r0, #0]
   d5564:	68db      	ldr	r3, [r3, #12]
   d5566:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   d5568:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   d556c:	28ff      	cmp	r0, #255	; 0xff
   d556e:	d002      	beq.n	d5576 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   d5570:	2101      	movs	r1, #1
   d5572:	f003 fa43 	bl	d89fc <pinMode>

    deselectSlave();
   d5576:	6823      	ldr	r3, [r4, #0]
   d5578:	4620      	mov	r0, r4
   d557a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d557c:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   d557e:	2064      	movs	r0, #100	; 0x64
   d5580:	f000 fece 	bl	d6320 <delay>
#endif
    
    return true;
}
   d5584:	2001      	movs	r0, #1
   d5586:	bd10      	pop	{r4, pc}

000d5588 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   d5588:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d558c:	2100      	movs	r1, #0
   d558e:	f003 ba46 	b.w	d8a1e <digitalWrite>

000d5592 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   d5592:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d5596:	2101      	movs	r1, #1
   d5598:	f003 ba41 	b.w	d8a1e <digitalWrite>

000d559c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   d559c:	b570      	push	{r4, r5, r6, lr}
   d559e:	4604      	mov	r4, r0
   d55a0:	460d      	mov	r5, r1
   d55a2:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   d55a4:	f7ff fa4e 	bl	d4a44 <_ZN15RHGenericDriverC1Ev>
   d55a8:	4b03      	ldr	r3, [pc, #12]	; (d55b8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   d55aa:	6023      	str	r3, [r4, #0]
   d55ac:	6226      	str	r6, [r4, #32]
   d55ae:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   d55b2:	4620      	mov	r0, r4
   d55b4:	bd70      	pop	{r4, r5, r6, pc}
   d55b6:	bf00      	nop
   d55b8:	000d9ad0 	.word	0x000d9ad0

000d55bc <_ZN11RHSPIDriver7spiReadEh>:
{
   d55bc:	b538      	push	{r3, r4, r5, lr}
   d55be:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d55c0:	6a00      	ldr	r0, [r0, #32]
   d55c2:	6803      	ldr	r3, [r0, #0]
   d55c4:	6a1b      	ldr	r3, [r3, #32]
{
   d55c6:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d55c8:	4798      	blx	r3
    selectSlave();
   d55ca:	6823      	ldr	r3, [r4, #0]
   d55cc:	4620      	mov	r0, r4
   d55ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d55d0:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   d55d2:	6a20      	ldr	r0, [r4, #32]
   d55d4:	6803      	ldr	r3, [r0, #0]
   d55d6:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d55da:	681b      	ldr	r3, [r3, #0]
   d55dc:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d55de:	6a20      	ldr	r0, [r4, #32]
   d55e0:	6803      	ldr	r3, [r0, #0]
   d55e2:	2100      	movs	r1, #0
   d55e4:	681b      	ldr	r3, [r3, #0]
   d55e6:	4798      	blx	r3
    deselectSlave();
   d55e8:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d55ea:	4605      	mov	r5, r0
    deselectSlave();
   d55ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d55ee:	4620      	mov	r0, r4
   d55f0:	4798      	blx	r3
    _spi.endTransaction();
   d55f2:	6a20      	ldr	r0, [r4, #32]
   d55f4:	6803      	ldr	r3, [r0, #0]
   d55f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d55f8:	4798      	blx	r3
}
   d55fa:	4628      	mov	r0, r5
   d55fc:	bd38      	pop	{r3, r4, r5, pc}

000d55fe <_ZN11RHSPIDriver8spiWriteEhh>:
{
   d55fe:	b570      	push	{r4, r5, r6, lr}
   d5600:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d5602:	6a00      	ldr	r0, [r0, #32]
   d5604:	6803      	ldr	r3, [r0, #0]
   d5606:	6a1b      	ldr	r3, [r3, #32]
{
   d5608:	4616      	mov	r6, r2
   d560a:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d560c:	4798      	blx	r3
    selectSlave();
   d560e:	6823      	ldr	r3, [r4, #0]
   d5610:	4620      	mov	r0, r4
   d5612:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d5614:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   d5616:	6a20      	ldr	r0, [r4, #32]
   d5618:	6803      	ldr	r3, [r0, #0]
   d561a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d561e:	681b      	ldr	r3, [r3, #0]
   d5620:	4798      	blx	r3
   d5622:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   d5624:	6a20      	ldr	r0, [r4, #32]
   d5626:	6803      	ldr	r3, [r0, #0]
   d5628:	4631      	mov	r1, r6
   d562a:	681b      	ldr	r3, [r3, #0]
   d562c:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d562e:	2001      	movs	r0, #1
   d5630:	f000 fb98 	bl	d5d64 <HAL_Delay_Microseconds>
    deselectSlave();
   d5634:	6823      	ldr	r3, [r4, #0]
   d5636:	4620      	mov	r0, r4
   d5638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d563a:	4798      	blx	r3
    _spi.endTransaction();
   d563c:	6a20      	ldr	r0, [r4, #32]
   d563e:	6803      	ldr	r3, [r0, #0]
   d5640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5642:	4798      	blx	r3
}
   d5644:	4628      	mov	r0, r5
   d5646:	bd70      	pop	{r4, r5, r6, pc}

000d5648 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   d5648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d564a:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d564c:	6a00      	ldr	r0, [r0, #32]
{
   d564e:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d5650:	6803      	ldr	r3, [r0, #0]
   d5652:	6a1b      	ldr	r3, [r3, #32]
{
   d5654:	460f      	mov	r7, r1
   d5656:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d5658:	4798      	blx	r3
    selectSlave();
   d565a:	6823      	ldr	r3, [r4, #0]
   d565c:	4620      	mov	r0, r4
   d565e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d5660:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   d5662:	6a20      	ldr	r0, [r4, #32]
   d5664:	6803      	ldr	r3, [r0, #0]
   d5666:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   d566a:	681b      	ldr	r3, [r3, #0]
   d566c:	4798      	blx	r3
   d566e:	442e      	add	r6, r5
   d5670:	4607      	mov	r7, r0
    while (len--)
   d5672:	42b5      	cmp	r5, r6
   d5674:	d007      	beq.n	d5686 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   d5676:	6a20      	ldr	r0, [r4, #32]
   d5678:	6803      	ldr	r3, [r0, #0]
   d567a:	2100      	movs	r1, #0
   d567c:	681b      	ldr	r3, [r3, #0]
   d567e:	4798      	blx	r3
   d5680:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   d5684:	e7f5      	b.n	d5672 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   d5686:	6823      	ldr	r3, [r4, #0]
   d5688:	4620      	mov	r0, r4
   d568a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d568c:	4798      	blx	r3
    _spi.endTransaction();
   d568e:	6a20      	ldr	r0, [r4, #32]
   d5690:	6803      	ldr	r3, [r0, #0]
   d5692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5694:	4798      	blx	r3
}
   d5696:	4638      	mov	r0, r7
   d5698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d569a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   d569a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d569c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d569e:	6a00      	ldr	r0, [r0, #32]
{
   d56a0:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d56a2:	6803      	ldr	r3, [r0, #0]
   d56a4:	6a1b      	ldr	r3, [r3, #32]
{
   d56a6:	460f      	mov	r7, r1
   d56a8:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d56aa:	4798      	blx	r3
    selectSlave();
   d56ac:	6823      	ldr	r3, [r4, #0]
   d56ae:	4620      	mov	r0, r4
   d56b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d56b2:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   d56b4:	6a20      	ldr	r0, [r4, #32]
   d56b6:	6803      	ldr	r3, [r0, #0]
   d56b8:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d56bc:	681b      	ldr	r3, [r3, #0]
   d56be:	4798      	blx	r3
   d56c0:	442e      	add	r6, r5
   d56c2:	4607      	mov	r7, r0
    while (len--)
   d56c4:	42b5      	cmp	r5, r6
   d56c6:	d006      	beq.n	d56d6 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   d56c8:	6a20      	ldr	r0, [r4, #32]
   d56ca:	f815 1b01 	ldrb.w	r1, [r5], #1
   d56ce:	6803      	ldr	r3, [r0, #0]
   d56d0:	681b      	ldr	r3, [r3, #0]
   d56d2:	4798      	blx	r3
    while (len--)
   d56d4:	e7f6      	b.n	d56c4 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   d56d6:	6823      	ldr	r3, [r4, #0]
   d56d8:	4620      	mov	r0, r4
   d56da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d56dc:	4798      	blx	r3
    _spi.endTransaction();
   d56de:	6a20      	ldr	r0, [r4, #32]
   d56e0:	6803      	ldr	r3, [r0, #0]
   d56e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d56e4:	4798      	blx	r3
}
   d56e6:	4638      	mov	r0, r7
   d56e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56ea <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   d56ea:	6a00      	ldr	r0, [r0, #32]
   d56ec:	6803      	ldr	r3, [r0, #0]
   d56ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56f0:	4718      	bx	r3

000d56f2 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   d56f2:	2001      	movs	r0, #1
   d56f4:	4770      	bx	lr

000d56f6 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   d56f6:	20fb      	movs	r0, #251	; 0xfb
   d56f8:	4770      	bx	lr

000d56fa <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   d56fa:	4770      	bx	lr

000d56fc <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   d56fc:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   d56fe:	7903      	ldrb	r3, [r0, #4]
   d5700:	2b05      	cmp	r3, #5
{
   d5702:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   d5704:	d010      	beq.n	d5728 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   d5706:	6803      	ldr	r3, [r0, #0]
   d5708:	2105      	movs	r1, #5
   d570a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d570e:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   d5710:	2207      	movs	r2, #7
   d5712:	2101      	movs	r1, #1
   d5714:	4620      	mov	r0, r4
   d5716:	f7ff ff72 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   d571a:	2280      	movs	r2, #128	; 0x80
   d571c:	2140      	movs	r1, #64	; 0x40
   d571e:	4620      	mov	r0, r4
   d5720:	f7ff ff6d 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   d5724:	2305      	movs	r3, #5
   d5726:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   d5728:	7923      	ldrb	r3, [r4, #4]
   d572a:	2b05      	cmp	r3, #5
   d572c:	d0fc      	beq.n	d5728 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   d572e:	7e20      	ldrb	r0, [r4, #24]
}
   d5730:	bd10      	pop	{r4, pc}

000d5732 <_ZN7RH_RF95D0Ev>:
   d5732:	b510      	push	{r4, lr}
   d5734:	f44f 7198 	mov.w	r1, #304	; 0x130
   d5738:	4604      	mov	r4, r0
   d573a:	f003 f9c7 	bl	d8acc <_ZdlPvj>
   d573e:	4620      	mov	r0, r4
   d5740:	bd10      	pop	{r4, pc}

000d5742 <_ZN7RH_RF955sleepEv>:
{
   d5742:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   d5744:	7903      	ldrb	r3, [r0, #4]
   d5746:	2b01      	cmp	r3, #1
{
   d5748:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   d574a:	d00b      	beq.n	d5764 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   d574c:	6803      	ldr	r3, [r0, #0]
   d574e:	2101      	movs	r1, #1
   d5750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d5754:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   d5756:	2200      	movs	r2, #0
   d5758:	2101      	movs	r1, #1
   d575a:	4620      	mov	r0, r4
   d575c:	f7ff ff4f 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   d5760:	2301      	movs	r3, #1
   d5762:	7123      	strb	r3, [r4, #4]
}
   d5764:	2001      	movs	r0, #1
   d5766:	bd10      	pop	{r4, pc}

000d5768 <_ZN7RH_RF954recvEPhS0_>:
{
   d5768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   d576a:	6803      	ldr	r3, [r0, #0]
   d576c:	68db      	ldr	r3, [r3, #12]
{
   d576e:	4604      	mov	r4, r0
   d5770:	460f      	mov	r7, r1
   d5772:	4615      	mov	r5, r2
    if (!available())
   d5774:	4798      	blx	r3
   d5776:	4606      	mov	r6, r0
   d5778:	b1b0      	cbz	r0, d57a8 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   d577a:	b187      	cbz	r7, d579e <_ZN7RH_RF954recvEPhS0_+0x36>
   d577c:	b17d      	cbz	r5, d579e <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   d577e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d5782:	782a      	ldrb	r2, [r5, #0]
   d5784:	3b03      	subs	r3, #3
   d5786:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   d5788:	bfde      	ittt	le
   d578a:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   d578e:	3b04      	suble	r3, #4
   d5790:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   d5792:	782a      	ldrb	r2, [r5, #0]
   d5794:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d5798:	4638      	mov	r0, r7
   d579a:	f003 fdef 	bl	d937c <memcpy>
    _rxBufValid = false;
   d579e:	2300      	movs	r3, #0
   d57a0:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d57a4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   d57a8:	4630      	mov	r0, r6
   d57aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d57ac <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   d57ac:	b538      	push	{r3, r4, r5, lr}
   d57ae:	4604      	mov	r4, r0
   d57b0:	4615      	mov	r5, r2
    _rxBufValid(0)
   d57b2:	461a      	mov	r2, r3
   d57b4:	f7ff fef2 	bl	d559c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   d57b8:	4b09      	ldr	r3, [pc, #36]	; (d57e0 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   d57ba:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   d57bc:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   d57be:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   d57c0:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   d57c4:	2201      	movs	r2, #1
    _rxBufValid(0)
   d57c6:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   d57ca:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   d57ce:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   d57d2:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   d57d6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   d57da:	4620      	mov	r0, r4
   d57dc:	bd38      	pop	{r3, r4, r5, pc}
   d57de:	bf00      	nop
   d57e0:	000d9b68 	.word	0x000d9b68

000d57e4 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   d57e4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   d57e8:	2b03      	cmp	r3, #3
   d57ea:	d91b      	bls.n	d5824 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   d57ec:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d57f0:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   d57f2:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   d57f6:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   d57f8:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   d57fc:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   d57fe:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d5802:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   d5804:	7983      	ldrb	r3, [r0, #6]
   d5806:	b933      	cbnz	r3, d5816 <_ZN7RH_RF9513validateRxBufEv+0x32>
   d5808:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   d580a:	7942      	ldrb	r2, [r0, #5]
   d580c:	429a      	cmp	r2, r3
   d580e:	d002      	beq.n	d5816 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   d5810:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   d5812:	2bff      	cmp	r3, #255	; 0xff
   d5814:	d106      	bne.n	d5824 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   d5816:	8a83      	ldrh	r3, [r0, #20]
   d5818:	3301      	adds	r3, #1
   d581a:	b29b      	uxth	r3, r3
   d581c:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   d581e:	2301      	movs	r3, #1
   d5820:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   d5824:	4770      	bx	lr
	...

000d5828 <_ZN7RH_RF9512setFrequencyEf>:
{
   d5828:	b538      	push	{r3, r4, r5, lr}
   d582a:	4604      	mov	r4, r0
   d582c:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d5830:	ee10 0a10 	vmov	r0, s0
{
   d5834:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d5838:	f003 fab6 	bl	d8da8 <__aeabi_f2d>
   d583c:	a317      	add	r3, pc, #92	; (adr r3, d589c <_ZN7RH_RF9512setFrequencyEf+0x74>)
   d583e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5842:	f003 fb09 	bl	d8e58 <__aeabi_dmul>
   d5846:	a317      	add	r3, pc, #92	; (adr r3, d58a4 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   d5848:	e9d3 2300 	ldrd	r2, r3, [r3]
   d584c:	f003 fc2e 	bl	d90ac <__aeabi_ddiv>
   d5850:	f003 fd14 	bl	d927c <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d5854:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d5856:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d5858:	f3c0 4207 	ubfx	r2, r0, #16, #8
   d585c:	4620      	mov	r0, r4
   d585e:	f7ff fece 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   d5862:	f3c5 2207 	ubfx	r2, r5, #8, #8
   d5866:	2107      	movs	r1, #7
   d5868:	4620      	mov	r0, r4
   d586a:	f7ff fec8 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   d586e:	b2ea      	uxtb	r2, r5
   d5870:	2108      	movs	r1, #8
   d5872:	4620      	mov	r0, r4
   d5874:	f7ff fec3 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   d5878:	eddf 7a07 	vldr	s15, [pc, #28]	; d5898 <_ZN7RH_RF9512setFrequencyEf+0x70>
   d587c:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   d5880:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   d5884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5888:	bfac      	ite	ge
   d588a:	2301      	movge	r3, #1
   d588c:	2300      	movlt	r3, #0
}
   d588e:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   d5890:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   d5894:	bd38      	pop	{r3, r4, r5, pc}
   d5896:	bf00      	nop
   d5898:	4442c000 	.word	0x4442c000
   d589c:	00000000 	.word	0x00000000
   d58a0:	412e8480 	.word	0x412e8480
   d58a4:	00000000 	.word	0x00000000
   d58a8:	404e8480 	.word	0x404e8480

000d58ac <_ZN7RH_RF9511setModeIdleEv>:
{
   d58ac:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   d58ae:	7903      	ldrb	r3, [r0, #4]
   d58b0:	2b02      	cmp	r3, #2
{
   d58b2:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   d58b4:	d00b      	beq.n	d58ce <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   d58b6:	6803      	ldr	r3, [r0, #0]
   d58b8:	2102      	movs	r1, #2
   d58ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d58be:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   d58c0:	2201      	movs	r2, #1
   d58c2:	4611      	mov	r1, r2
   d58c4:	4620      	mov	r0, r4
   d58c6:	f7ff fe9a 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   d58ca:	2302      	movs	r3, #2
   d58cc:	7123      	strb	r3, [r4, #4]
}
   d58ce:	bd10      	pop	{r4, pc}

000d58d0 <_ZN7RH_RF9515handleInterruptEv>:
{
   d58d0:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d58d2:	2112      	movs	r1, #18
{
   d58d4:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d58d6:	f7ff fe71 	bl	d55bc <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d58da:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d58dc:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d58de:	4620      	mov	r0, r4
   d58e0:	f7ff fe6c 	bl	d55bc <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d58e4:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d58e6:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d58e8:	2112      	movs	r1, #18
   d58ea:	4620      	mov	r0, r4
   d58ec:	f7ff fe87 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   d58f0:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   d58f2:	2b04      	cmp	r3, #4
   d58f4:	d107      	bne.n	d5906 <_ZN7RH_RF9515handleInterruptEv+0x36>
   d58f6:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   d58fa:	d117      	bne.n	d592c <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   d58fc:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   d5900:	b10b      	cbz	r3, d5906 <_ZN7RH_RF9515handleInterruptEv+0x36>
   d5902:	0670      	lsls	r0, r6, #25
   d5904:	d512      	bpl.n	d592c <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   d5906:	7923      	ldrb	r3, [r4, #4]
   d5908:	2b04      	cmp	r3, #4
   d590a:	d101      	bne.n	d5910 <_ZN7RH_RF9515handleInterruptEv+0x40>
   d590c:	0669      	lsls	r1, r5, #25
   d590e:	d422      	bmi.n	d5956 <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   d5910:	7923      	ldrb	r3, [r4, #4]
   d5912:	2b03      	cmp	r3, #3
   d5914:	d101      	bne.n	d591a <_ZN7RH_RF9515handleInterruptEv+0x4a>
   d5916:	072a      	lsls	r2, r5, #28
   d5918:	d469      	bmi.n	d59ee <_ZN7RH_RF9515handleInterruptEv+0x11e>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   d591a:	7923      	ldrb	r3, [r4, #4]
   d591c:	2b05      	cmp	r3, #5
   d591e:	d10e      	bne.n	d593e <_ZN7RH_RF9515handleInterruptEv+0x6e>
   d5920:	076b      	lsls	r3, r5, #29
   d5922:	d50c      	bpl.n	d593e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   d5924:	f005 0501 	and.w	r5, r5, #1
   d5928:	7625      	strb	r5, [r4, #24]
   d592a:	e059      	b.n	d59e0 <_ZN7RH_RF9515handleInterruptEv+0x110>
	_rxBad++;
   d592c:	8a63      	ldrh	r3, [r4, #18]
   d592e:	3301      	adds	r3, #1
   d5930:	b29b      	uxth	r3, r3
   d5932:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   d5934:	2300      	movs	r3, #0
   d5936:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d593a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d593e:	22ff      	movs	r2, #255	; 0xff
   d5940:	2112      	movs	r1, #18
   d5942:	4620      	mov	r0, r4
   d5944:	f7ff fe5b 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d5948:	4620      	mov	r0, r4
   d594a:	22ff      	movs	r2, #255	; 0xff
}
   d594c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d5950:	2112      	movs	r1, #18
   d5952:	f7ff be54 	b.w	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d5956:	2113      	movs	r1, #19
   d5958:	4620      	mov	r0, r4
   d595a:	f7ff fe2f 	bl	d55bc <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d595e:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d5960:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d5962:	4620      	mov	r0, r4
   d5964:	f7ff fe2a 	bl	d55bc <_ZN11RHSPIDriver7spiReadEh>
   d5968:	210d      	movs	r1, #13
   d596a:	4602      	mov	r2, r0
   d596c:	4620      	mov	r0, r4
   d596e:	f7ff fe46 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   d5972:	f104 0229 	add.w	r2, r4, #41	; 0x29
   d5976:	462b      	mov	r3, r5
   d5978:	2100      	movs	r1, #0
   d597a:	4620      	mov	r0, r4
   d597c:	f7ff fe64 	bl	d5648 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d5980:	2119      	movs	r1, #25
	_bufLen = len;
   d5982:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d5986:	4620      	mov	r0, r4
   d5988:	f7ff fe18 	bl	d55bc <_ZN11RHSPIDriver7spiReadEh>
   d598c:	b240      	sxtb	r0, r0
   d598e:	2800      	cmp	r0, #0
   d5990:	bfb8      	it	lt
   d5992:	3003      	addlt	r0, #3
   d5994:	1080      	asrs	r0, r0, #2
   d5996:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d599a:	211a      	movs	r1, #26
   d599c:	4620      	mov	r0, r4
   d599e:	f7ff fe0d 	bl	d55bc <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   d59a2:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d59a6:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   d59a8:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d59aa:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d59ac:	bfa9      	itett	ge
   d59ae:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   d59b0:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d59b2:	b21b      	sxthge	r3, r3
   d59b4:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   d59b6:	bfb2      	itee	lt
   d59b8:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d59ba:	220f      	movge	r2, #15
   d59bc:	fb93 f3f2 	sdivge	r3, r3, r2
   d59c0:	b21b      	sxth	r3, r3
   d59c2:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   d59c4:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   d59c8:	b173      	cbz	r3, d59e8 <_ZN7RH_RF9515handleInterruptEv+0x118>
	    _lastRssi -= 157;
   d59ca:	8a23      	ldrh	r3, [r4, #16]
   d59cc:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   d59ce:	b21b      	sxth	r3, r3
   d59d0:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   d59d2:	4620      	mov	r0, r4
   d59d4:	f7ff ff06 	bl	d57e4 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   d59d8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   d59dc:	2b00      	cmp	r3, #0
   d59de:	d0ae      	beq.n	d593e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   d59e0:	4620      	mov	r0, r4
   d59e2:	f7ff ff63 	bl	d58ac <_ZN7RH_RF9511setModeIdleEv>
   d59e6:	e7aa      	b.n	d593e <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   d59e8:	8a23      	ldrh	r3, [r4, #16]
   d59ea:	3ba4      	subs	r3, #164	; 0xa4
   d59ec:	e7ef      	b.n	d59ce <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   d59ee:	8ae3      	ldrh	r3, [r4, #22]
   d59f0:	3301      	adds	r3, #1
   d59f2:	b29b      	uxth	r3, r3
   d59f4:	82e3      	strh	r3, [r4, #22]
	setModeIdle();
   d59f6:	e7f3      	b.n	d59e0 <_ZN7RH_RF9515handleInterruptEv+0x110>

000d59f8 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   d59f8:	4b02      	ldr	r3, [pc, #8]	; (d5a04 <_ZN7RH_RF954isr0Ev+0xc>)
   d59fa:	6818      	ldr	r0, [r3, #0]
   d59fc:	b108      	cbz	r0, d5a02 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   d59fe:	f7ff bf67 	b.w	d58d0 <_ZN7RH_RF9515handleInterruptEv>
}
   d5a02:	4770      	bx	lr
   d5a04:	2003e538 	.word	0x2003e538

000d5a08 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   d5a08:	4b02      	ldr	r3, [pc, #8]	; (d5a14 <_ZN7RH_RF954isr1Ev+0xc>)
   d5a0a:	6858      	ldr	r0, [r3, #4]
   d5a0c:	b108      	cbz	r0, d5a12 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   d5a0e:	f7ff bf5f 	b.w	d58d0 <_ZN7RH_RF9515handleInterruptEv>
}
   d5a12:	4770      	bx	lr
   d5a14:	2003e538 	.word	0x2003e538

000d5a18 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   d5a18:	4b02      	ldr	r3, [pc, #8]	; (d5a24 <_ZN7RH_RF954isr2Ev+0xc>)
   d5a1a:	6898      	ldr	r0, [r3, #8]
   d5a1c:	b108      	cbz	r0, d5a22 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   d5a1e:	f7ff bf57 	b.w	d58d0 <_ZN7RH_RF9515handleInterruptEv>
}
   d5a22:	4770      	bx	lr
   d5a24:	2003e538 	.word	0x2003e538

000d5a28 <_ZN7RH_RF959setModeRxEv>:
{
   d5a28:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   d5a2a:	7903      	ldrb	r3, [r0, #4]
   d5a2c:	2b04      	cmp	r3, #4
{
   d5a2e:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   d5a30:	d010      	beq.n	d5a54 <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   d5a32:	6803      	ldr	r3, [r0, #0]
   d5a34:	2104      	movs	r1, #4
   d5a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d5a3a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   d5a3c:	2205      	movs	r2, #5
   d5a3e:	2101      	movs	r1, #1
   d5a40:	4620      	mov	r0, r4
   d5a42:	f7ff fddc 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   d5a46:	2200      	movs	r2, #0
   d5a48:	2140      	movs	r1, #64	; 0x40
   d5a4a:	4620      	mov	r0, r4
   d5a4c:	f7ff fdd7 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   d5a50:	2304      	movs	r3, #4
   d5a52:	7123      	strb	r3, [r4, #4]
}
   d5a54:	bd10      	pop	{r4, pc}

000d5a56 <_ZN7RH_RF959availableEv>:
{
   d5a56:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   d5a58:	7903      	ldrb	r3, [r0, #4]
   d5a5a:	2b03      	cmp	r3, #3
{
   d5a5c:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   d5a5e:	d005      	beq.n	d5a6c <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   d5a60:	f7ff ffe2 	bl	d5a28 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   d5a64:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   d5a68:	b2c0      	uxtb	r0, r0
}
   d5a6a:	bd10      	pop	{r4, pc}
	return false;
   d5a6c:	2000      	movs	r0, #0
   d5a6e:	e7fc      	b.n	d5a6a <_ZN7RH_RF959availableEv+0x14>

000d5a70 <_ZN7RH_RF959setModeTxEv>:
{
   d5a70:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   d5a72:	7903      	ldrb	r3, [r0, #4]
   d5a74:	2b03      	cmp	r3, #3
{
   d5a76:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   d5a78:	d010      	beq.n	d5a9c <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   d5a7a:	6803      	ldr	r3, [r0, #0]
   d5a7c:	2103      	movs	r1, #3
   d5a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d5a82:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   d5a84:	2203      	movs	r2, #3
   d5a86:	2101      	movs	r1, #1
   d5a88:	4620      	mov	r0, r4
   d5a8a:	f7ff fdb8 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   d5a8e:	2240      	movs	r2, #64	; 0x40
   d5a90:	4611      	mov	r1, r2
   d5a92:	4620      	mov	r0, r4
   d5a94:	f7ff fdb3 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   d5a98:	2303      	movs	r3, #3
   d5a9a:	7123      	strb	r3, [r4, #4]
}
   d5a9c:	bd10      	pop	{r4, pc}

000d5a9e <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d5a9e:	2afb      	cmp	r2, #251	; 0xfb
{
   d5aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5aa2:	4604      	mov	r4, r0
   d5aa4:	460f      	mov	r7, r1
   d5aa6:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d5aa8:	d902      	bls.n	d5ab0 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   d5aaa:	2600      	movs	r6, #0
}
   d5aac:	4630      	mov	r0, r6
   d5aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   d5ab0:	6803      	ldr	r3, [r0, #0]
   d5ab2:	6a1b      	ldr	r3, [r3, #32]
   d5ab4:	4798      	blx	r3
    setModeIdle();
   d5ab6:	4620      	mov	r0, r4
   d5ab8:	f7ff fef8 	bl	d58ac <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   d5abc:	6823      	ldr	r3, [r4, #0]
   d5abe:	4620      	mov	r0, r4
   d5ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ac2:	4798      	blx	r3
   d5ac4:	4606      	mov	r6, r0
   d5ac6:	2800      	cmp	r0, #0
   d5ac8:	d0ef      	beq.n	d5aaa <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   d5aca:	2200      	movs	r2, #0
   d5acc:	210d      	movs	r1, #13
   d5ace:	4620      	mov	r0, r4
   d5ad0:	f7ff fd95 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   d5ad4:	7ae2      	ldrb	r2, [r4, #11]
   d5ad6:	2100      	movs	r1, #0
   d5ad8:	4620      	mov	r0, r4
   d5ada:	f7ff fd90 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   d5ade:	7b22      	ldrb	r2, [r4, #12]
   d5ae0:	2100      	movs	r1, #0
   d5ae2:	4620      	mov	r0, r4
   d5ae4:	f7ff fd8b 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   d5ae8:	7b62      	ldrb	r2, [r4, #13]
   d5aea:	2100      	movs	r1, #0
   d5aec:	4620      	mov	r0, r4
   d5aee:	f7ff fd86 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   d5af2:	7ba2      	ldrb	r2, [r4, #14]
   d5af4:	2100      	movs	r1, #0
   d5af6:	4620      	mov	r0, r4
   d5af8:	f7ff fd81 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   d5afc:	462b      	mov	r3, r5
   d5afe:	463a      	mov	r2, r7
   d5b00:	2100      	movs	r1, #0
   d5b02:	4620      	mov	r0, r4
   d5b04:	f7ff fdc9 	bl	d569a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   d5b08:	1d2a      	adds	r2, r5, #4
   d5b0a:	b2d2      	uxtb	r2, r2
   d5b0c:	2122      	movs	r1, #34	; 0x22
   d5b0e:	4620      	mov	r0, r4
   d5b10:	f7ff fd75 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   d5b14:	4620      	mov	r0, r4
   d5b16:	f7ff ffab 	bl	d5a70 <_ZN7RH_RF959setModeTxEv>
    return true;
   d5b1a:	e7c7      	b.n	d5aac <_ZN7RH_RF954sendEPKhh+0xe>

000d5b1c <_ZN7RH_RF9510setTxPowerEab>:
{
   d5b1c:	b538      	push	{r3, r4, r5, lr}
   d5b1e:	4605      	mov	r5, r0
   d5b20:	460c      	mov	r4, r1
    _useRFO = useRFO;
   d5b22:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   d5b26:	b172      	cbz	r2, d5b46 <_ZN7RH_RF9510setTxPowerEab+0x2a>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   d5b28:	f381 0204 	usat	r2, #4, r1
   d5b2c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d5b30:	b2d2      	uxtb	r2, r2
   d5b32:	2109      	movs	r1, #9
   d5b34:	f7ff fd63 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d5b38:	2204      	movs	r2, #4
   d5b3a:	214d      	movs	r1, #77	; 0x4d
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d5b3c:	4628      	mov	r0, r5
}
   d5b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d5b42:	f7ff bd5c 	b.w	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
	if (power > 20)
   d5b46:	2914      	cmp	r1, #20
   d5b48:	dc10      	bgt.n	d5b6c <_ZN7RH_RF9510setTxPowerEab+0x50>
	if (power < 2)
   d5b4a:	2901      	cmp	r1, #1
   d5b4c:	dd10      	ble.n	d5b70 <_ZN7RH_RF9510setTxPowerEab+0x54>
	if (power > 17)
   d5b4e:	2911      	cmp	r1, #17
   d5b50:	dd0f      	ble.n	d5b72 <_ZN7RH_RF9510setTxPowerEab+0x56>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   d5b52:	2207      	movs	r2, #7
   d5b54:	214d      	movs	r1, #77	; 0x4d
   d5b56:	4628      	mov	r0, r5
   d5b58:	f7ff fd51 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   d5b5c:	3c03      	subs	r4, #3
   d5b5e:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d5b60:	1ea2      	subs	r2, r4, #2
   d5b62:	f062 027f 	orn	r2, r2, #127	; 0x7f
   d5b66:	b2d2      	uxtb	r2, r2
   d5b68:	2109      	movs	r1, #9
   d5b6a:	e7e7      	b.n	d5b3c <_ZN7RH_RF9510setTxPowerEab+0x20>
	    power = 20;
   d5b6c:	2414      	movs	r4, #20
   d5b6e:	e7f0      	b.n	d5b52 <_ZN7RH_RF9510setTxPowerEab+0x36>
	    power = 2;
   d5b70:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d5b72:	2204      	movs	r2, #4
   d5b74:	214d      	movs	r1, #77	; 0x4d
   d5b76:	4628      	mov	r0, r5
   d5b78:	f7ff fd41 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
   d5b7c:	e7f0      	b.n	d5b60 <_ZN7RH_RF9510setTxPowerEab+0x44>

000d5b7e <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   d5b7e:	b538      	push	{r3, r4, r5, lr}
   d5b80:	460c      	mov	r4, r1
   d5b82:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   d5b84:	780a      	ldrb	r2, [r1, #0]
   d5b86:	211d      	movs	r1, #29
   d5b88:	f7ff fd39 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   d5b8c:	7862      	ldrb	r2, [r4, #1]
   d5b8e:	211e      	movs	r1, #30
   d5b90:	4628      	mov	r0, r5
   d5b92:	f7ff fd34 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d5b96:	78a2      	ldrb	r2, [r4, #2]
   d5b98:	4628      	mov	r0, r5
   d5b9a:	2126      	movs	r1, #38	; 0x26
}
   d5b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d5ba0:	f7ff bd2d 	b.w	d55fe <_ZN11RHSPIDriver8spiWriteEhh>

000d5ba4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d5ba4:	2905      	cmp	r1, #5
{
   d5ba6:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d5ba8:	d80f      	bhi.n	d5bca <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d5baa:	4b09      	ldr	r3, [pc, #36]	; (d5bd0 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   d5bac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d5bb0:	185c      	adds	r4, r3, r1
   d5bb2:	5a5a      	ldrh	r2, [r3, r1]
   d5bb4:	78a3      	ldrb	r3, [r4, #2]
   d5bb6:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   d5bba:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d5bbc:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   d5bc0:	f7ff ffdd 	bl	d5b7e <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   d5bc4:	2001      	movs	r0, #1
}
   d5bc6:	b002      	add	sp, #8
   d5bc8:	bd10      	pop	{r4, pc}
        return false;
   d5bca:	2000      	movs	r0, #0
   d5bcc:	e7fb      	b.n	d5bc6 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   d5bce:	bf00      	nop
   d5bd0:	000d9b50 	.word	0x000d9b50

000d5bd4 <_ZN7RH_RF9517setPreambleLengthEt>:
{
   d5bd4:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d5bd6:	0a0a      	lsrs	r2, r1, #8
{
   d5bd8:	4605      	mov	r5, r0
   d5bda:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d5bdc:	2120      	movs	r1, #32
   d5bde:	f7ff fd0e 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d5be2:	b2e2      	uxtb	r2, r4
   d5be4:	4628      	mov	r0, r5
   d5be6:	2121      	movs	r1, #33	; 0x21
}
   d5be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d5bec:	f7ff bd07 	b.w	d55fe <_ZN11RHSPIDriver8spiWriteEhh>

000d5bf0 <_ZN7RH_RF954initEv>:
{
   d5bf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5bf2:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   d5bf4:	f7ff fcb2 	bl	d555c <_ZN11RHSPIDriver4initEv>
   d5bf8:	4606      	mov	r6, r0
   d5bfa:	b918      	cbnz	r0, d5c04 <_ZN7RH_RF954initEv+0x14>
	return false;
   d5bfc:	2600      	movs	r6, #0
}
   d5bfe:	4630      	mov	r0, r6
   d5c00:	b002      	add	sp, #8
   d5c02:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   d5c04:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   d5c08:	2dff      	cmp	r5, #255	; 0xff
   d5c0a:	d052      	beq.n	d5cb2 <_ZN7RH_RF954initEv+0xc2>
	spiUsingInterrupt(interruptNumber);
   d5c0c:	4629      	mov	r1, r5
   d5c0e:	4620      	mov	r0, r4
   d5c10:	f7ff fd6b 	bl	d56ea <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   d5c14:	2280      	movs	r2, #128	; 0x80
   d5c16:	2101      	movs	r1, #1
   d5c18:	4620      	mov	r0, r4
   d5c1a:	f7ff fcf0 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   d5c1e:	200a      	movs	r0, #10
   d5c20:	f000 fb7e 	bl	d6320 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   d5c24:	2101      	movs	r1, #1
   d5c26:	4620      	mov	r0, r4
   d5c28:	f7ff fcc8 	bl	d55bc <_ZN11RHSPIDriver7spiReadEh>
   d5c2c:	2880      	cmp	r0, #128	; 0x80
   d5c2e:	d1e5      	bne.n	d5bfc <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   d5c30:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   d5c34:	28ff      	cmp	r0, #255	; 0xff
   d5c36:	d01c      	beq.n	d5c72 <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   d5c38:	2100      	movs	r1, #0
   d5c3a:	f002 fedf 	bl	d89fc <pinMode>
	if (_myInterruptIndex == 0xff)
   d5c3e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d5c42:	2bff      	cmp	r3, #255	; 0xff
   d5c44:	d107      	bne.n	d5c56 <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   d5c46:	4a25      	ldr	r2, [pc, #148]	; (d5cdc <_ZN7RH_RF954initEv+0xec>)
   d5c48:	7813      	ldrb	r3, [r2, #0]
   d5c4a:	2b03      	cmp	r3, #3
   d5c4c:	d8d6      	bhi.n	d5bfc <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   d5c4e:	1c59      	adds	r1, r3, #1
   d5c50:	7011      	strb	r1, [r2, #0]
   d5c52:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   d5c56:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   d5c5a:	4b21      	ldr	r3, [pc, #132]	; (d5ce0 <_ZN7RH_RF954initEv+0xf0>)
   d5c5c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   d5c60:	bb52      	cbnz	r2, d5cb8 <_ZN7RH_RF954initEv+0xc8>
	    attachInterrupt(interruptNumber, isr0, RISING);
   d5c62:	4920      	ldr	r1, [pc, #128]	; (d5ce4 <_ZN7RH_RF954initEv+0xf4>)
   d5c64:	9200      	str	r2, [sp, #0]
   d5c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5c6a:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   d5c6c:	b2a8      	uxth	r0, r5
   d5c6e:	f000 feff 	bl	d6a70 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   d5c72:	2200      	movs	r2, #0
   d5c74:	210e      	movs	r1, #14
   d5c76:	4620      	mov	r0, r4
   d5c78:	f7ff fcc1 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   d5c7c:	2200      	movs	r2, #0
   d5c7e:	210f      	movs	r1, #15
   d5c80:	4620      	mov	r0, r4
   d5c82:	f7ff fcbc 	bl	d55fe <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   d5c86:	4620      	mov	r0, r4
   d5c88:	f7ff fe10 	bl	d58ac <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   d5c8c:	2100      	movs	r1, #0
   d5c8e:	4620      	mov	r0, r4
   d5c90:	f7ff ff88 	bl	d5ba4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   d5c94:	2108      	movs	r1, #8
   d5c96:	4620      	mov	r0, r4
   d5c98:	f7ff ff9c 	bl	d5bd4 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   d5c9c:	ed9f 0a12 	vldr	s0, [pc, #72]	; d5ce8 <_ZN7RH_RF954initEv+0xf8>
   d5ca0:	4620      	mov	r0, r4
   d5ca2:	f7ff fdc1 	bl	d5828 <_ZN7RH_RF9512setFrequencyEf>
    setTxPower(13);
   d5ca6:	2200      	movs	r2, #0
   d5ca8:	210d      	movs	r1, #13
   d5caa:	4620      	mov	r0, r4
   d5cac:	f7ff ff36 	bl	d5b1c <_ZN7RH_RF9510setTxPowerEab>
    return true;
   d5cb0:	e7a5      	b.n	d5bfe <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   d5cb2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d5cb6:	e7ad      	b.n	d5c14 <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   d5cb8:	2a01      	cmp	r2, #1
   d5cba:	f04f 0300 	mov.w	r3, #0
   d5cbe:	d104      	bne.n	d5cca <_ZN7RH_RF954initEv+0xda>
	    attachInterrupt(interruptNumber, isr1, RISING);
   d5cc0:	9300      	str	r3, [sp, #0]
   d5cc2:	490a      	ldr	r1, [pc, #40]	; (d5cec <_ZN7RH_RF954initEv+0xfc>)
   d5cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5cc8:	e7d0      	b.n	d5c6c <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   d5cca:	2a02      	cmp	r2, #2
   d5ccc:	d196      	bne.n	d5bfc <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   d5cce:	9300      	str	r3, [sp, #0]
   d5cd0:	4907      	ldr	r1, [pc, #28]	; (d5cf0 <_ZN7RH_RF954initEv+0x100>)
   d5cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5cd6:	2201      	movs	r2, #1
   d5cd8:	e7c8      	b.n	d5c6c <_ZN7RH_RF954initEv+0x7c>
   d5cda:	bf00      	nop
   d5cdc:	2003e535 	.word	0x2003e535
   d5ce0:	2003e538 	.word	0x2003e538
   d5ce4:	000d59f9 	.word	0x000d59f9
   d5ce8:	43d90000 	.word	0x43d90000
   d5cec:	000d5a09 	.word	0x000d5a09
   d5cf0:	000d5a19 	.word	0x000d5a19

000d5cf4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5cf4:	b508      	push	{r3, lr}
   d5cf6:	4b02      	ldr	r3, [pc, #8]	; (d5d00 <os_mutex_recursive_create+0xc>)
   d5cf8:	681b      	ldr	r3, [r3, #0]
   d5cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5cfc:	9301      	str	r3, [sp, #4]
   d5cfe:	bd08      	pop	{r3, pc}
   d5d00:	00030248 	.word	0x00030248

000d5d04 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5d04:	b508      	push	{r3, lr}
   d5d06:	4b02      	ldr	r3, [pc, #8]	; (d5d10 <os_mutex_recursive_destroy+0xc>)
   d5d08:	681b      	ldr	r3, [r3, #0]
   d5d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5d0c:	9301      	str	r3, [sp, #4]
   d5d0e:	bd08      	pop	{r3, pc}
   d5d10:	00030248 	.word	0x00030248

000d5d14 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5d14:	b508      	push	{r3, lr}
   d5d16:	4b02      	ldr	r3, [pc, #8]	; (d5d20 <os_mutex_recursive_lock+0xc>)
   d5d18:	681b      	ldr	r3, [r3, #0]
   d5d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5d1c:	9301      	str	r3, [sp, #4]
   d5d1e:	bd08      	pop	{r3, pc}
   d5d20:	00030248 	.word	0x00030248

000d5d24 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5d24:	b508      	push	{r3, lr}
   d5d26:	4b02      	ldr	r3, [pc, #8]	; (d5d30 <os_mutex_recursive_unlock+0xc>)
   d5d28:	681b      	ldr	r3, [r3, #0]
   d5d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5d2c:	9301      	str	r3, [sp, #4]
   d5d2e:	bd08      	pop	{r3, pc}
   d5d30:	00030248 	.word	0x00030248

000d5d34 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d5d34:	b508      	push	{r3, lr}
   d5d36:	4b02      	ldr	r3, [pc, #8]	; (d5d40 <HAL_Feature_Set+0xc>)
   d5d38:	681b      	ldr	r3, [r3, #0]
   d5d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5d3c:	9301      	str	r3, [sp, #4]
   d5d3e:	bd08      	pop	{r3, pc}
   d5d40:	00030234 	.word	0x00030234

000d5d44 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d5d44:	b508      	push	{r3, lr}
   d5d46:	4b02      	ldr	r3, [pc, #8]	; (d5d50 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d5d48:	681b      	ldr	r3, [r3, #0]
   d5d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5d4c:	9301      	str	r3, [sp, #4]
   d5d4e:	bd08      	pop	{r3, pc}
   d5d50:	00030234 	.word	0x00030234

000d5d54 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5d54:	b508      	push	{r3, lr}
   d5d56:	4b02      	ldr	r3, [pc, #8]	; (d5d60 <HAL_RNG_GetRandomNumber+0xc>)
   d5d58:	681b      	ldr	r3, [r3, #0]
   d5d5a:	685b      	ldr	r3, [r3, #4]
   d5d5c:	9301      	str	r3, [sp, #4]
   d5d5e:	bd08      	pop	{r3, pc}
   d5d60:	00030218 	.word	0x00030218

000d5d64 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5d64:	b508      	push	{r3, lr}
   d5d66:	4b02      	ldr	r3, [pc, #8]	; (d5d70 <HAL_Delay_Microseconds+0xc>)
   d5d68:	681b      	ldr	r3, [r3, #0]
   d5d6a:	68db      	ldr	r3, [r3, #12]
   d5d6c:	9301      	str	r3, [sp, #4]
   d5d6e:	bd08      	pop	{r3, pc}
   d5d70:	00030218 	.word	0x00030218

000d5d74 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5d74:	b508      	push	{r3, lr}
   d5d76:	4b02      	ldr	r3, [pc, #8]	; (d5d80 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5d78:	681b      	ldr	r3, [r3, #0]
   d5d7a:	695b      	ldr	r3, [r3, #20]
   d5d7c:	9301      	str	r3, [sp, #4]
   d5d7e:	bd08      	pop	{r3, pc}
   d5d80:	00030218 	.word	0x00030218

000d5d84 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d5d84:	b508      	push	{r3, lr}
   d5d86:	4b02      	ldr	r3, [pc, #8]	; (d5d90 <hal_rtc_time_is_valid+0xc>)
   d5d88:	681b      	ldr	r3, [r3, #0]
   d5d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5d8c:	9301      	str	r3, [sp, #4]
   d5d8e:	bd08      	pop	{r3, pc}
   d5d90:	00030218 	.word	0x00030218

000d5d94 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d5d94:	b508      	push	{r3, lr}
   d5d96:	4b02      	ldr	r3, [pc, #8]	; (d5da0 <hal_timer_millis+0xc>)
   d5d98:	681b      	ldr	r3, [r3, #0]
   d5d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5d9c:	9301      	str	r3, [sp, #4]
   d5d9e:	bd08      	pop	{r3, pc}
   d5da0:	00030218 	.word	0x00030218

000d5da4 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5da4:	b508      	push	{r3, lr}
   d5da6:	4b02      	ldr	r3, [pc, #8]	; (d5db0 <hal_rtc_get_time+0xc>)
   d5da8:	681b      	ldr	r3, [r3, #0]
   d5daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5dac:	9301      	str	r3, [sp, #4]
   d5dae:	bd08      	pop	{r3, pc}
   d5db0:	00030218 	.word	0x00030218

000d5db4 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d5db4:	b508      	push	{r3, lr}
   d5db6:	4b02      	ldr	r3, [pc, #8]	; (d5dc0 <hal_rtc_set_time+0xc>)
   d5db8:	681b      	ldr	r3, [r3, #0]
   d5dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d5dbc:	9301      	str	r3, [sp, #4]
   d5dbe:	bd08      	pop	{r3, pc}
   d5dc0:	00030218 	.word	0x00030218

000d5dc4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5dc4:	b508      	push	{r3, lr}
   d5dc6:	4b02      	ldr	r3, [pc, #8]	; (d5dd0 <HAL_Pin_Mode+0xc>)
   d5dc8:	681b      	ldr	r3, [r3, #0]
   d5dca:	689b      	ldr	r3, [r3, #8]
   d5dcc:	9301      	str	r3, [sp, #4]
   d5dce:	bd08      	pop	{r3, pc}
   d5dd0:	0003022c 	.word	0x0003022c

000d5dd4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5dd4:	b508      	push	{r3, lr}
   d5dd6:	4b02      	ldr	r3, [pc, #8]	; (d5de0 <HAL_Get_Pin_Mode+0xc>)
   d5dd8:	681b      	ldr	r3, [r3, #0]
   d5dda:	68db      	ldr	r3, [r3, #12]
   d5ddc:	9301      	str	r3, [sp, #4]
   d5dde:	bd08      	pop	{r3, pc}
   d5de0:	0003022c 	.word	0x0003022c

000d5de4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5de4:	b508      	push	{r3, lr}
   d5de6:	4b02      	ldr	r3, [pc, #8]	; (d5df0 <HAL_GPIO_Write+0xc>)
   d5de8:	681b      	ldr	r3, [r3, #0]
   d5dea:	691b      	ldr	r3, [r3, #16]
   d5dec:	9301      	str	r3, [sp, #4]
   d5dee:	bd08      	pop	{r3, pc}
   d5df0:	0003022c 	.word	0x0003022c

000d5df4 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d5df4:	b508      	push	{r3, lr}
   d5df6:	4b02      	ldr	r3, [pc, #8]	; (d5e00 <HAL_Interrupts_Attach+0xc>)
   d5df8:	681b      	ldr	r3, [r3, #0]
   d5dfa:	699b      	ldr	r3, [r3, #24]
   d5dfc:	9301      	str	r3, [sp, #4]
   d5dfe:	bd08      	pop	{r3, pc}
   d5e00:	0003022c 	.word	0x0003022c

000d5e04 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d5e04:	b508      	push	{r3, lr}
   d5e06:	4b02      	ldr	r3, [pc, #8]	; (d5e10 <HAL_Interrupts_Detach+0xc>)
   d5e08:	681b      	ldr	r3, [r3, #0]
   d5e0a:	69db      	ldr	r3, [r3, #28]
   d5e0c:	9301      	str	r3, [sp, #4]
   d5e0e:	bd08      	pop	{r3, pc}
   d5e10:	0003022c 	.word	0x0003022c

000d5e14 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5e14:	b508      	push	{r3, lr}
   d5e16:	4b02      	ldr	r3, [pc, #8]	; (d5e20 <hal_i2c_write+0xc>)
   d5e18:	681b      	ldr	r3, [r3, #0]
   d5e1a:	6a1b      	ldr	r3, [r3, #32]
   d5e1c:	9301      	str	r3, [sp, #4]
   d5e1e:	bd08      	pop	{r3, pc}
   d5e20:	00030228 	.word	0x00030228

000d5e24 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5e24:	b508      	push	{r3, lr}
   d5e26:	4b02      	ldr	r3, [pc, #8]	; (d5e30 <hal_i2c_available+0xc>)
   d5e28:	681b      	ldr	r3, [r3, #0]
   d5e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5e2c:	9301      	str	r3, [sp, #4]
   d5e2e:	bd08      	pop	{r3, pc}
   d5e30:	00030228 	.word	0x00030228

000d5e34 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5e34:	b508      	push	{r3, lr}
   d5e36:	4b02      	ldr	r3, [pc, #8]	; (d5e40 <hal_i2c_read+0xc>)
   d5e38:	681b      	ldr	r3, [r3, #0]
   d5e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e3c:	9301      	str	r3, [sp, #4]
   d5e3e:	bd08      	pop	{r3, pc}
   d5e40:	00030228 	.word	0x00030228

000d5e44 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5e44:	b508      	push	{r3, lr}
   d5e46:	4b02      	ldr	r3, [pc, #8]	; (d5e50 <hal_i2c_peek+0xc>)
   d5e48:	681b      	ldr	r3, [r3, #0]
   d5e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e4c:	9301      	str	r3, [sp, #4]
   d5e4e:	bd08      	pop	{r3, pc}
   d5e50:	00030228 	.word	0x00030228

000d5e54 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5e54:	b508      	push	{r3, lr}
   d5e56:	4b02      	ldr	r3, [pc, #8]	; (d5e60 <hal_i2c_flush+0xc>)
   d5e58:	681b      	ldr	r3, [r3, #0]
   d5e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e5c:	9301      	str	r3, [sp, #4]
   d5e5e:	bd08      	pop	{r3, pc}
   d5e60:	00030228 	.word	0x00030228

000d5e64 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5e64:	b508      	push	{r3, lr}
   d5e66:	4b02      	ldr	r3, [pc, #8]	; (d5e70 <hal_i2c_is_enabled+0xc>)
   d5e68:	681b      	ldr	r3, [r3, #0]
   d5e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5e6c:	9301      	str	r3, [sp, #4]
   d5e6e:	bd08      	pop	{r3, pc}
   d5e70:	00030228 	.word	0x00030228

000d5e74 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5e74:	b508      	push	{r3, lr}
   d5e76:	4b02      	ldr	r3, [pc, #8]	; (d5e80 <hal_i2c_init+0xc>)
   d5e78:	681b      	ldr	r3, [r3, #0]
   d5e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5e7c:	9301      	str	r3, [sp, #4]
   d5e7e:	bd08      	pop	{r3, pc}
   d5e80:	00030228 	.word	0x00030228

000d5e84 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5e84:	b508      	push	{r3, lr}
   d5e86:	4b02      	ldr	r3, [pc, #8]	; (d5e90 <inet_inet_ntop+0xc>)
   d5e88:	681b      	ldr	r3, [r3, #0]
   d5e8a:	695b      	ldr	r3, [r3, #20]
   d5e8c:	9301      	str	r3, [sp, #4]
   d5e8e:	bd08      	pop	{r3, pc}
   d5e90:	00030264 	.word	0x00030264

000d5e94 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5e94:	b508      	push	{r3, lr}
   d5e96:	4b02      	ldr	r3, [pc, #8]	; (d5ea0 <netdb_freeaddrinfo+0xc>)
   d5e98:	681b      	ldr	r3, [r3, #0]
   d5e9a:	689b      	ldr	r3, [r3, #8]
   d5e9c:	9301      	str	r3, [sp, #4]
   d5e9e:	bd08      	pop	{r3, pc}
   d5ea0:	00030268 	.word	0x00030268

000d5ea4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5ea4:	b508      	push	{r3, lr}
   d5ea6:	4b02      	ldr	r3, [pc, #8]	; (d5eb0 <netdb_getaddrinfo+0xc>)
   d5ea8:	681b      	ldr	r3, [r3, #0]
   d5eaa:	68db      	ldr	r3, [r3, #12]
   d5eac:	9301      	str	r3, [sp, #4]
   d5eae:	bd08      	pop	{r3, pc}
   d5eb0:	00030268 	.word	0x00030268

000d5eb4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5eb4:	b508      	push	{r3, lr}
   d5eb6:	4b02      	ldr	r3, [pc, #8]	; (d5ec0 <hal_spi_begin+0xc>)
   d5eb8:	681b      	ldr	r3, [r3, #0]
   d5eba:	681b      	ldr	r3, [r3, #0]
   d5ebc:	9301      	str	r3, [sp, #4]
   d5ebe:	bd08      	pop	{r3, pc}
   d5ec0:	00030230 	.word	0x00030230

000d5ec4 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   d5ec4:	b508      	push	{r3, lr}
   d5ec6:	4b02      	ldr	r3, [pc, #8]	; (d5ed0 <hal_spi_end+0xc>)
   d5ec8:	681b      	ldr	r3, [r3, #0]
   d5eca:	685b      	ldr	r3, [r3, #4]
   d5ecc:	9301      	str	r3, [sp, #4]
   d5ece:	bd08      	pop	{r3, pc}
   d5ed0:	00030230 	.word	0x00030230

000d5ed4 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5ed4:	b508      	push	{r3, lr}
   d5ed6:	4b02      	ldr	r3, [pc, #8]	; (d5ee0 <hal_spi_transfer+0xc>)
   d5ed8:	681b      	ldr	r3, [r3, #0]
   d5eda:	695b      	ldr	r3, [r3, #20]
   d5edc:	9301      	str	r3, [sp, #4]
   d5ede:	bd08      	pop	{r3, pc}
   d5ee0:	00030230 	.word	0x00030230

000d5ee4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5ee4:	b508      	push	{r3, lr}
   d5ee6:	4b02      	ldr	r3, [pc, #8]	; (d5ef0 <hal_spi_init+0xc>)
   d5ee8:	681b      	ldr	r3, [r3, #0]
   d5eea:	69db      	ldr	r3, [r3, #28]
   d5eec:	9301      	str	r3, [sp, #4]
   d5eee:	bd08      	pop	{r3, pc}
   d5ef0:	00030230 	.word	0x00030230

000d5ef4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5ef4:	b508      	push	{r3, lr}
   d5ef6:	4b02      	ldr	r3, [pc, #8]	; (d5f00 <hal_spi_is_enabled+0xc>)
   d5ef8:	681b      	ldr	r3, [r3, #0]
   d5efa:	6a1b      	ldr	r3, [r3, #32]
   d5efc:	9301      	str	r3, [sp, #4]
   d5efe:	bd08      	pop	{r3, pc}
   d5f00:	00030230 	.word	0x00030230

000d5f04 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5f04:	b508      	push	{r3, lr}
   d5f06:	4b02      	ldr	r3, [pc, #8]	; (d5f10 <hal_spi_info+0xc>)
   d5f08:	681b      	ldr	r3, [r3, #0]
   d5f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5f0c:	9301      	str	r3, [sp, #4]
   d5f0e:	bd08      	pop	{r3, pc}
   d5f10:	00030230 	.word	0x00030230

000d5f14 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5f14:	b508      	push	{r3, lr}
   d5f16:	4b02      	ldr	r3, [pc, #8]	; (d5f20 <hal_spi_set_settings+0xc>)
   d5f18:	681b      	ldr	r3, [r3, #0]
   d5f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5f1c:	9301      	str	r3, [sp, #4]
   d5f1e:	bd08      	pop	{r3, pc}
   d5f20:	00030230 	.word	0x00030230

000d5f24 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5f24:	b508      	push	{r3, lr}
   d5f26:	4b02      	ldr	r3, [pc, #8]	; (d5f30 <hal_spi_acquire+0xc>)
   d5f28:	681b      	ldr	r3, [r3, #0]
   d5f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5f2c:	9301      	str	r3, [sp, #4]
   d5f2e:	bd08      	pop	{r3, pc}
   d5f30:	00030230 	.word	0x00030230

000d5f34 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5f34:	b508      	push	{r3, lr}
   d5f36:	4b02      	ldr	r3, [pc, #8]	; (d5f40 <hal_spi_release+0xc>)
   d5f38:	681b      	ldr	r3, [r3, #0]
   d5f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5f3c:	9301      	str	r3, [sp, #4]
   d5f3e:	bd08      	pop	{r3, pc}
   d5f40:	00030230 	.word	0x00030230

000d5f44 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5f44:	b508      	push	{r3, lr}
   d5f46:	4b02      	ldr	r3, [pc, #8]	; (d5f50 <hal_usart_init+0xc>)
   d5f48:	681b      	ldr	r3, [r3, #0]
   d5f4a:	681b      	ldr	r3, [r3, #0]
   d5f4c:	9301      	str	r3, [sp, #4]
   d5f4e:	bd08      	pop	{r3, pc}
   d5f50:	0003023c 	.word	0x0003023c

000d5f54 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d5f54:	b508      	push	{r3, lr}
   d5f56:	4b02      	ldr	r3, [pc, #8]	; (d5f60 <hal_usart_end+0xc>)
   d5f58:	681b      	ldr	r3, [r3, #0]
   d5f5a:	689b      	ldr	r3, [r3, #8]
   d5f5c:	9301      	str	r3, [sp, #4]
   d5f5e:	bd08      	pop	{r3, pc}
   d5f60:	0003023c 	.word	0x0003023c

000d5f64 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5f64:	b508      	push	{r3, lr}
   d5f66:	4b02      	ldr	r3, [pc, #8]	; (d5f70 <hal_usart_write+0xc>)
   d5f68:	681b      	ldr	r3, [r3, #0]
   d5f6a:	68db      	ldr	r3, [r3, #12]
   d5f6c:	9301      	str	r3, [sp, #4]
   d5f6e:	bd08      	pop	{r3, pc}
   d5f70:	0003023c 	.word	0x0003023c

000d5f74 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5f74:	b508      	push	{r3, lr}
   d5f76:	4b02      	ldr	r3, [pc, #8]	; (d5f80 <hal_usart_available+0xc>)
   d5f78:	681b      	ldr	r3, [r3, #0]
   d5f7a:	691b      	ldr	r3, [r3, #16]
   d5f7c:	9301      	str	r3, [sp, #4]
   d5f7e:	bd08      	pop	{r3, pc}
   d5f80:	0003023c 	.word	0x0003023c

000d5f84 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5f84:	b508      	push	{r3, lr}
   d5f86:	4b02      	ldr	r3, [pc, #8]	; (d5f90 <hal_usart_read+0xc>)
   d5f88:	681b      	ldr	r3, [r3, #0]
   d5f8a:	695b      	ldr	r3, [r3, #20]
   d5f8c:	9301      	str	r3, [sp, #4]
   d5f8e:	bd08      	pop	{r3, pc}
   d5f90:	0003023c 	.word	0x0003023c

000d5f94 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5f94:	b508      	push	{r3, lr}
   d5f96:	4b02      	ldr	r3, [pc, #8]	; (d5fa0 <hal_usart_peek+0xc>)
   d5f98:	681b      	ldr	r3, [r3, #0]
   d5f9a:	699b      	ldr	r3, [r3, #24]
   d5f9c:	9301      	str	r3, [sp, #4]
   d5f9e:	bd08      	pop	{r3, pc}
   d5fa0:	0003023c 	.word	0x0003023c

000d5fa4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5fa4:	b508      	push	{r3, lr}
   d5fa6:	4b02      	ldr	r3, [pc, #8]	; (d5fb0 <hal_usart_flush+0xc>)
   d5fa8:	681b      	ldr	r3, [r3, #0]
   d5faa:	69db      	ldr	r3, [r3, #28]
   d5fac:	9301      	str	r3, [sp, #4]
   d5fae:	bd08      	pop	{r3, pc}
   d5fb0:	0003023c 	.word	0x0003023c

000d5fb4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5fb4:	b508      	push	{r3, lr}
   d5fb6:	4b02      	ldr	r3, [pc, #8]	; (d5fc0 <hal_usart_is_enabled+0xc>)
   d5fb8:	681b      	ldr	r3, [r3, #0]
   d5fba:	6a1b      	ldr	r3, [r3, #32]
   d5fbc:	9301      	str	r3, [sp, #4]
   d5fbe:	bd08      	pop	{r3, pc}
   d5fc0:	0003023c 	.word	0x0003023c

000d5fc4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5fc4:	b508      	push	{r3, lr}
   d5fc6:	4b02      	ldr	r3, [pc, #8]	; (d5fd0 <hal_usart_available_data_for_write+0xc>)
   d5fc8:	681b      	ldr	r3, [r3, #0]
   d5fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5fcc:	9301      	str	r3, [sp, #4]
   d5fce:	bd08      	pop	{r3, pc}
   d5fd0:	0003023c 	.word	0x0003023c

000d5fd4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d5fd4:	b508      	push	{r3, lr}
   d5fd6:	4b02      	ldr	r3, [pc, #8]	; (d5fe0 <hal_usart_begin_config+0xc>)
   d5fd8:	681b      	ldr	r3, [r3, #0]
   d5fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5fdc:	9301      	str	r3, [sp, #4]
   d5fde:	bd08      	pop	{r3, pc}
   d5fe0:	0003023c 	.word	0x0003023c

000d5fe4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5fe4:	b508      	push	{r3, lr}
   d5fe6:	4b02      	ldr	r3, [pc, #8]	; (d5ff0 <HAL_USB_USART_Init+0xc>)
   d5fe8:	681b      	ldr	r3, [r3, #0]
   d5fea:	681b      	ldr	r3, [r3, #0]
   d5fec:	9301      	str	r3, [sp, #4]
   d5fee:	bd08      	pop	{r3, pc}
   d5ff0:	0003024c 	.word	0x0003024c

000d5ff4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5ff4:	b508      	push	{r3, lr}
   d5ff6:	4b02      	ldr	r3, [pc, #8]	; (d6000 <HAL_USB_USART_Begin+0xc>)
   d5ff8:	681b      	ldr	r3, [r3, #0]
   d5ffa:	685b      	ldr	r3, [r3, #4]
   d5ffc:	9301      	str	r3, [sp, #4]
   d5ffe:	bd08      	pop	{r3, pc}
   d6000:	0003024c 	.word	0x0003024c

000d6004 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d6004:	b508      	push	{r3, lr}
   d6006:	4b02      	ldr	r3, [pc, #8]	; (d6010 <HAL_USB_USART_End+0xc>)
   d6008:	681b      	ldr	r3, [r3, #0]
   d600a:	689b      	ldr	r3, [r3, #8]
   d600c:	9301      	str	r3, [sp, #4]
   d600e:	bd08      	pop	{r3, pc}
   d6010:	0003024c 	.word	0x0003024c

000d6014 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6014:	b508      	push	{r3, lr}
   d6016:	4b02      	ldr	r3, [pc, #8]	; (d6020 <HAL_USB_USART_Available_Data+0xc>)
   d6018:	681b      	ldr	r3, [r3, #0]
   d601a:	691b      	ldr	r3, [r3, #16]
   d601c:	9301      	str	r3, [sp, #4]
   d601e:	bd08      	pop	{r3, pc}
   d6020:	0003024c 	.word	0x0003024c

000d6024 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6024:	b508      	push	{r3, lr}
   d6026:	4b02      	ldr	r3, [pc, #8]	; (d6030 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6028:	681b      	ldr	r3, [r3, #0]
   d602a:	695b      	ldr	r3, [r3, #20]
   d602c:	9301      	str	r3, [sp, #4]
   d602e:	bd08      	pop	{r3, pc}
   d6030:	0003024c 	.word	0x0003024c

000d6034 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6034:	b508      	push	{r3, lr}
   d6036:	4b02      	ldr	r3, [pc, #8]	; (d6040 <HAL_USB_USART_Receive_Data+0xc>)
   d6038:	681b      	ldr	r3, [r3, #0]
   d603a:	699b      	ldr	r3, [r3, #24]
   d603c:	9301      	str	r3, [sp, #4]
   d603e:	bd08      	pop	{r3, pc}
   d6040:	0003024c 	.word	0x0003024c

000d6044 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6044:	b508      	push	{r3, lr}
   d6046:	4b02      	ldr	r3, [pc, #8]	; (d6050 <HAL_USB_USART_Send_Data+0xc>)
   d6048:	681b      	ldr	r3, [r3, #0]
   d604a:	69db      	ldr	r3, [r3, #28]
   d604c:	9301      	str	r3, [sp, #4]
   d604e:	bd08      	pop	{r3, pc}
   d6050:	0003024c 	.word	0x0003024c

000d6054 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6054:	b508      	push	{r3, lr}
   d6056:	4b02      	ldr	r3, [pc, #8]	; (d6060 <HAL_USB_USART_Flush_Data+0xc>)
   d6058:	681b      	ldr	r3, [r3, #0]
   d605a:	6a1b      	ldr	r3, [r3, #32]
   d605c:	9301      	str	r3, [sp, #4]
   d605e:	bd08      	pop	{r3, pc}
   d6060:	0003024c 	.word	0x0003024c

000d6064 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d6064:	b508      	push	{r3, lr}
   d6066:	4b02      	ldr	r3, [pc, #8]	; (d6070 <HAL_USB_USART_Is_Connected+0xc>)
   d6068:	681b      	ldr	r3, [r3, #0]
   d606a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d606c:	9301      	str	r3, [sp, #4]
   d606e:	bd08      	pop	{r3, pc}
   d6070:	0003024c 	.word	0x0003024c

000d6074 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6074:	b508      	push	{r3, lr}
   d6076:	4b02      	ldr	r3, [pc, #8]	; (d6080 <panic_+0xc>)
   d6078:	681b      	ldr	r3, [r3, #0]
   d607a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d607c:	9301      	str	r3, [sp, #4]
   d607e:	bd08      	pop	{r3, pc}
   d6080:	00030260 	.word	0x00030260

000d6084 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6084:	b508      	push	{r3, lr}
   d6086:	4b02      	ldr	r3, [pc, #8]	; (d6090 <log_message_v+0xc>)
   d6088:	681b      	ldr	r3, [r3, #0]
   d608a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d608c:	9301      	str	r3, [sp, #4]
   d608e:	bd08      	pop	{r3, pc}
   d6090:	00030260 	.word	0x00030260

000d6094 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d6094:	b508      	push	{r3, lr}
   d6096:	4b02      	ldr	r3, [pc, #8]	; (d60a0 <log_level_name+0xc>)
   d6098:	681b      	ldr	r3, [r3, #0]
   d609a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d609c:	9301      	str	r3, [sp, #4]
   d609e:	bd08      	pop	{r3, pc}
   d60a0:	00030260 	.word	0x00030260

000d60a4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d60a4:	b508      	push	{r3, lr}
   d60a6:	4b02      	ldr	r3, [pc, #8]	; (d60b0 <log_set_callbacks+0xc>)
   d60a8:	681b      	ldr	r3, [r3, #0]
   d60aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d60ac:	9301      	str	r3, [sp, #4]
   d60ae:	bd08      	pop	{r3, pc}
   d60b0:	00030260 	.word	0x00030260

000d60b4 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d60b4:	b508      	push	{r3, lr}
   d60b6:	4b03      	ldr	r3, [pc, #12]	; (d60c4 <diag_get_source+0x10>)
   d60b8:	681b      	ldr	r3, [r3, #0]
   d60ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d60be:	9301      	str	r3, [sp, #4]
   d60c0:	bd08      	pop	{r3, pc}
   d60c2:	0000      	.short	0x0000
   d60c4:	00030260 	.word	0x00030260

000d60c8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d60c8:	b508      	push	{r3, lr}
   d60ca:	4b02      	ldr	r3, [pc, #8]	; (d60d4 <system_mode+0xc>)
   d60cc:	681b      	ldr	r3, [r3, #0]
   d60ce:	681b      	ldr	r3, [r3, #0]
   d60d0:	9301      	str	r3, [sp, #4]
   d60d2:	bd08      	pop	{r3, pc}
   d60d4:	00030220 	.word	0x00030220

000d60d8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d60d8:	b508      	push	{r3, lr}
   d60da:	4b02      	ldr	r3, [pc, #8]	; (d60e4 <set_system_mode+0xc>)
   d60dc:	681b      	ldr	r3, [r3, #0]
   d60de:	685b      	ldr	r3, [r3, #4]
   d60e0:	9301      	str	r3, [sp, #4]
   d60e2:	bd08      	pop	{r3, pc}
   d60e4:	00030220 	.word	0x00030220

000d60e8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d60e8:	b508      	push	{r3, lr}
   d60ea:	4b02      	ldr	r3, [pc, #8]	; (d60f4 <system_delay_ms+0xc>)
   d60ec:	681b      	ldr	r3, [r3, #0]
   d60ee:	695b      	ldr	r3, [r3, #20]
   d60f0:	9301      	str	r3, [sp, #4]
   d60f2:	bd08      	pop	{r3, pc}
   d60f4:	00030220 	.word	0x00030220

000d60f8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d60f8:	b508      	push	{r3, lr}
   d60fa:	4b02      	ldr	r3, [pc, #8]	; (d6104 <system_thread_set_state+0xc>)
   d60fc:	681b      	ldr	r3, [r3, #0]
   d60fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6100:	9301      	str	r3, [sp, #4]
   d6102:	bd08      	pop	{r3, pc}
   d6104:	00030220 	.word	0x00030220

000d6108 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6108:	b508      	push	{r3, lr}
   d610a:	4b02      	ldr	r3, [pc, #8]	; (d6114 <application_thread_current+0xc>)
   d610c:	681b      	ldr	r3, [r3, #0]
   d610e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6110:	9301      	str	r3, [sp, #4]
   d6112:	bd08      	pop	{r3, pc}
   d6114:	00030220 	.word	0x00030220

000d6118 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6118:	b508      	push	{r3, lr}
   d611a:	4b02      	ldr	r3, [pc, #8]	; (d6124 <application_thread_invoke+0xc>)
   d611c:	681b      	ldr	r3, [r3, #0]
   d611e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6120:	9301      	str	r3, [sp, #4]
   d6122:	bd08      	pop	{r3, pc}
   d6124:	00030220 	.word	0x00030220

000d6128 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6128:	b508      	push	{r3, lr}
   d612a:	4b02      	ldr	r3, [pc, #8]	; (d6134 <system_thread_get_state+0xc>)
   d612c:	681b      	ldr	r3, [r3, #0]
   d612e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6130:	9301      	str	r3, [sp, #4]
   d6132:	bd08      	pop	{r3, pc}
   d6134:	00030220 	.word	0x00030220

000d6138 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d6138:	b508      	push	{r3, lr}
   d613a:	4b02      	ldr	r3, [pc, #8]	; (d6144 <system_notify_time_changed+0xc>)
   d613c:	681b      	ldr	r3, [r3, #0]
   d613e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6140:	9301      	str	r3, [sp, #4]
   d6142:	bd08      	pop	{r3, pc}
   d6144:	00030220 	.word	0x00030220

000d6148 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6148:	b508      	push	{r3, lr}
   d614a:	4b03      	ldr	r3, [pc, #12]	; (d6158 <system_ctrl_set_app_request_handler+0x10>)
   d614c:	681b      	ldr	r3, [r3, #0]
   d614e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6152:	9301      	str	r3, [sp, #4]
   d6154:	bd08      	pop	{r3, pc}
   d6156:	0000      	.short	0x0000
   d6158:	00030220 	.word	0x00030220

000d615c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d615c:	b508      	push	{r3, lr}
   d615e:	4b03      	ldr	r3, [pc, #12]	; (d616c <system_ctrl_set_result+0x10>)
   d6160:	681b      	ldr	r3, [r3, #0]
   d6162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6166:	9301      	str	r3, [sp, #4]
   d6168:	bd08      	pop	{r3, pc}
   d616a:	0000      	.short	0x0000
   d616c:	00030220 	.word	0x00030220

000d6170 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6170:	b508      	push	{r3, lr}
   d6172:	4b02      	ldr	r3, [pc, #8]	; (d617c <spark_process+0xc>)
   d6174:	681b      	ldr	r3, [r3, #0]
   d6176:	689b      	ldr	r3, [r3, #8]
   d6178:	9301      	str	r3, [sp, #4]
   d617a:	bd08      	pop	{r3, pc}
   d617c:	00030244 	.word	0x00030244

000d6180 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6180:	b508      	push	{r3, lr}
   d6182:	4b02      	ldr	r3, [pc, #8]	; (d618c <spark_cloud_flag_connected+0xc>)
   d6184:	681b      	ldr	r3, [r3, #0]
   d6186:	695b      	ldr	r3, [r3, #20]
   d6188:	9301      	str	r3, [sp, #4]
   d618a:	bd08      	pop	{r3, pc}
   d618c:	00030244 	.word	0x00030244

000d6190 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6190:	b508      	push	{r3, lr}
   d6192:	4b02      	ldr	r3, [pc, #8]	; (d619c <spark_send_event+0xc>)
   d6194:	681b      	ldr	r3, [r3, #0]
   d6196:	6a1b      	ldr	r3, [r3, #32]
   d6198:	9301      	str	r3, [sp, #4]
   d619a:	bd08      	pop	{r3, pc}
   d619c:	00030244 	.word	0x00030244

000d61a0 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d61a0:	b508      	push	{r3, lr}
   d61a2:	4b02      	ldr	r3, [pc, #8]	; (d61ac <spark_sync_time_pending+0xc>)
   d61a4:	681b      	ldr	r3, [r3, #0]
   d61a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61a8:	9301      	str	r3, [sp, #4]
   d61aa:	bd08      	pop	{r3, pc}
   d61ac:	00030244 	.word	0x00030244

000d61b0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d61b0:	b508      	push	{r3, lr}
   d61b2:	4b02      	ldr	r3, [pc, #8]	; (d61bc <spark_set_random_seed_from_cloud_handler+0xc>)
   d61b4:	681b      	ldr	r3, [r3, #0]
   d61b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d61b8:	9301      	str	r3, [sp, #4]
   d61ba:	bd08      	pop	{r3, pc}
   d61bc:	00030244 	.word	0x00030244

000d61c0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d61c0:	b508      	push	{r3, lr}
   d61c2:	4b02      	ldr	r3, [pc, #8]	; (d61cc <network_connect+0xc>)
   d61c4:	681b      	ldr	r3, [r3, #0]
   d61c6:	685b      	ldr	r3, [r3, #4]
   d61c8:	9301      	str	r3, [sp, #4]
   d61ca:	bd08      	pop	{r3, pc}
   d61cc:	00030240 	.word	0x00030240

000d61d0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d61d0:	b508      	push	{r3, lr}
   d61d2:	4b02      	ldr	r3, [pc, #8]	; (d61dc <network_connecting+0xc>)
   d61d4:	681b      	ldr	r3, [r3, #0]
   d61d6:	689b      	ldr	r3, [r3, #8]
   d61d8:	9301      	str	r3, [sp, #4]
   d61da:	bd08      	pop	{r3, pc}
   d61dc:	00030240 	.word	0x00030240

000d61e0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d61e0:	b508      	push	{r3, lr}
   d61e2:	4b02      	ldr	r3, [pc, #8]	; (d61ec <network_disconnect+0xc>)
   d61e4:	681b      	ldr	r3, [r3, #0]
   d61e6:	68db      	ldr	r3, [r3, #12]
   d61e8:	9301      	str	r3, [sp, #4]
   d61ea:	bd08      	pop	{r3, pc}
   d61ec:	00030240 	.word	0x00030240

000d61f0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d61f0:	b508      	push	{r3, lr}
   d61f2:	4b02      	ldr	r3, [pc, #8]	; (d61fc <network_ready+0xc>)
   d61f4:	681b      	ldr	r3, [r3, #0]
   d61f6:	691b      	ldr	r3, [r3, #16]
   d61f8:	9301      	str	r3, [sp, #4]
   d61fa:	bd08      	pop	{r3, pc}
   d61fc:	00030240 	.word	0x00030240

000d6200 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6200:	b508      	push	{r3, lr}
   d6202:	4b02      	ldr	r3, [pc, #8]	; (d620c <network_on+0xc>)
   d6204:	681b      	ldr	r3, [r3, #0]
   d6206:	695b      	ldr	r3, [r3, #20]
   d6208:	9301      	str	r3, [sp, #4]
   d620a:	bd08      	pop	{r3, pc}
   d620c:	00030240 	.word	0x00030240

000d6210 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6210:	b508      	push	{r3, lr}
   d6212:	4b02      	ldr	r3, [pc, #8]	; (d621c <network_off+0xc>)
   d6214:	681b      	ldr	r3, [r3, #0]
   d6216:	699b      	ldr	r3, [r3, #24]
   d6218:	9301      	str	r3, [sp, #4]
   d621a:	bd08      	pop	{r3, pc}
   d621c:	00030240 	.word	0x00030240

000d6220 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6220:	b508      	push	{r3, lr}
   d6222:	4b02      	ldr	r3, [pc, #8]	; (d622c <network_listen+0xc>)
   d6224:	681b      	ldr	r3, [r3, #0]
   d6226:	69db      	ldr	r3, [r3, #28]
   d6228:	9301      	str	r3, [sp, #4]
   d622a:	bd08      	pop	{r3, pc}
   d622c:	00030240 	.word	0x00030240

000d6230 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6230:	b508      	push	{r3, lr}
   d6232:	4b02      	ldr	r3, [pc, #8]	; (d623c <network_listening+0xc>)
   d6234:	681b      	ldr	r3, [r3, #0]
   d6236:	6a1b      	ldr	r3, [r3, #32]
   d6238:	9301      	str	r3, [sp, #4]
   d623a:	bd08      	pop	{r3, pc}
   d623c:	00030240 	.word	0x00030240

000d6240 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6240:	b508      	push	{r3, lr}
   d6242:	4b02      	ldr	r3, [pc, #8]	; (d624c <network_set_listen_timeout+0xc>)
   d6244:	681b      	ldr	r3, [r3, #0]
   d6246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6248:	9301      	str	r3, [sp, #4]
   d624a:	bd08      	pop	{r3, pc}
   d624c:	00030240 	.word	0x00030240

000d6250 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6250:	b508      	push	{r3, lr}
   d6252:	4b02      	ldr	r3, [pc, #8]	; (d625c <network_get_listen_timeout+0xc>)
   d6254:	681b      	ldr	r3, [r3, #0]
   d6256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6258:	9301      	str	r3, [sp, #4]
   d625a:	bd08      	pop	{r3, pc}
   d625c:	00030240 	.word	0x00030240

000d6260 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d6260:	b508      	push	{r3, lr}
   d6262:	4b02      	ldr	r3, [pc, #8]	; (d626c <network_is_on+0xc>)
   d6264:	681b      	ldr	r3, [r3, #0]
   d6266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6268:	9301      	str	r3, [sp, #4]
   d626a:	bd08      	pop	{r3, pc}
   d626c:	00030240 	.word	0x00030240

000d6270 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d6270:	b508      	push	{r3, lr}
   d6272:	4b02      	ldr	r3, [pc, #8]	; (d627c <network_is_off+0xc>)
   d6274:	681b      	ldr	r3, [r3, #0]
   d6276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6278:	9301      	str	r3, [sp, #4]
   d627a:	bd08      	pop	{r3, pc}
   d627c:	00030240 	.word	0x00030240

000d6280 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6280:	b508      	push	{r3, lr}
   d6282:	4b02      	ldr	r3, [pc, #8]	; (d628c <malloc+0xc>)
   d6284:	681b      	ldr	r3, [r3, #0]
   d6286:	681b      	ldr	r3, [r3, #0]
   d6288:	9301      	str	r3, [sp, #4]
   d628a:	bd08      	pop	{r3, pc}
   d628c:	0003021c 	.word	0x0003021c

000d6290 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6290:	b508      	push	{r3, lr}
   d6292:	4b02      	ldr	r3, [pc, #8]	; (d629c <free+0xc>)
   d6294:	681b      	ldr	r3, [r3, #0]
   d6296:	685b      	ldr	r3, [r3, #4]
   d6298:	9301      	str	r3, [sp, #4]
   d629a:	bd08      	pop	{r3, pc}
   d629c:	0003021c 	.word	0x0003021c

000d62a0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d62a0:	b508      	push	{r3, lr}
   d62a2:	4b02      	ldr	r3, [pc, #8]	; (d62ac <realloc+0xc>)
   d62a4:	681b      	ldr	r3, [r3, #0]
   d62a6:	689b      	ldr	r3, [r3, #8]
   d62a8:	9301      	str	r3, [sp, #4]
   d62aa:	bd08      	pop	{r3, pc}
   d62ac:	0003021c 	.word	0x0003021c

000d62b0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d62b0:	b508      	push	{r3, lr}
   d62b2:	4b02      	ldr	r3, [pc, #8]	; (d62bc <siprintf+0xc>)
   d62b4:	681b      	ldr	r3, [r3, #0]
   d62b6:	691b      	ldr	r3, [r3, #16]
   d62b8:	9301      	str	r3, [sp, #4]
   d62ba:	bd08      	pop	{r3, pc}
   d62bc:	0003021c 	.word	0x0003021c

000d62c0 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d62c0:	b508      	push	{r3, lr}
   d62c2:	4b02      	ldr	r3, [pc, #8]	; (d62cc <snprintf+0xc>)
   d62c4:	681b      	ldr	r3, [r3, #0]
   d62c6:	69db      	ldr	r3, [r3, #28]
   d62c8:	9301      	str	r3, [sp, #4]
   d62ca:	bd08      	pop	{r3, pc}
   d62cc:	0003021c 	.word	0x0003021c

000d62d0 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d62d0:	b508      	push	{r3, lr}
   d62d2:	4b02      	ldr	r3, [pc, #8]	; (d62dc <vsnprintf+0xc>)
   d62d4:	681b      	ldr	r3, [r3, #0]
   d62d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d62d8:	9301      	str	r3, [sp, #4]
   d62da:	bd08      	pop	{r3, pc}
   d62dc:	0003021c 	.word	0x0003021c

000d62e0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d62e0:	b508      	push	{r3, lr}
   d62e2:	4b02      	ldr	r3, [pc, #8]	; (d62ec <abort+0xc>)
   d62e4:	681b      	ldr	r3, [r3, #0]
   d62e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d62e8:	9301      	str	r3, [sp, #4]
   d62ea:	bd08      	pop	{r3, pc}
   d62ec:	0003021c 	.word	0x0003021c

000d62f0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d62f0:	b508      	push	{r3, lr}
   d62f2:	4b02      	ldr	r3, [pc, #8]	; (d62fc <_malloc_r+0xc>)
   d62f4:	681b      	ldr	r3, [r3, #0]
   d62f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d62f8:	9301      	str	r3, [sp, #4]
   d62fa:	bd08      	pop	{r3, pc}
   d62fc:	0003021c 	.word	0x0003021c

000d6300 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6300:	b508      	push	{r3, lr}
   d6302:	4b02      	ldr	r3, [pc, #8]	; (d630c <newlib_impure_ptr_callback+0xc>)
   d6304:	681b      	ldr	r3, [r3, #0]
   d6306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6308:	9301      	str	r3, [sp, #4]
   d630a:	bd08      	pop	{r3, pc}
   d630c:	0003021c 	.word	0x0003021c

000d6310 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6310:	b508      	push	{r3, lr}
   d6312:	4b02      	ldr	r3, [pc, #8]	; (d631c <localtime_r+0xc>)
   d6314:	681b      	ldr	r3, [r3, #0]
   d6316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6318:	9301      	str	r3, [sp, #4]
   d631a:	bd08      	pop	{r3, pc}
   d631c:	0003021c 	.word	0x0003021c

000d6320 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6320:	2100      	movs	r1, #0
   d6322:	f7ff bee1 	b.w	d60e8 <system_delay_ms>

000d6326 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6326:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6328:	6883      	ldr	r3, [r0, #8]
   d632a:	4604      	mov	r4, r0
   d632c:	b90b      	cbnz	r3, d6332 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d632e:	f002 fbd3 	bl	d8ad8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6332:	68c3      	ldr	r3, [r0, #12]
   d6334:	4798      	blx	r3
      if (_M_manager)
   d6336:	68a3      	ldr	r3, [r4, #8]
   d6338:	b11b      	cbz	r3, d6342 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d633a:	2203      	movs	r2, #3
   d633c:	4621      	mov	r1, r4
   d633e:	4620      	mov	r0, r4
   d6340:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6342:	4620      	mov	r0, r4
   d6344:	2110      	movs	r1, #16
}
   d6346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d634a:	f002 bbbf 	b.w	d8acc <_ZdlPvj>

000d634e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d634e:	680b      	ldr	r3, [r1, #0]
   d6350:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d6352:	b113      	cbz	r3, d635a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6354:	685a      	ldr	r2, [r3, #4]
   d6356:	3201      	adds	r2, #1
   d6358:	605a      	str	r2, [r3, #4]
      }
   d635a:	4770      	bx	lr

000d635c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d635c:	4802      	ldr	r0, [pc, #8]	; (d6368 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d635e:	2300      	movs	r3, #0
   d6360:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6362:	f7ff bcc7 	b.w	d5cf4 <os_mutex_recursive_create>
   d6366:	bf00      	nop
   d6368:	2003e544 	.word	0x2003e544

000d636c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d636c:	2200      	movs	r2, #0
   d636e:	6840      	ldr	r0, [r0, #4]
   d6370:	4611      	mov	r1, r2
   d6372:	f7ff bf3d 	b.w	d61f0 <network_ready>

000d6376 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d6376:	2200      	movs	r2, #0
   d6378:	6840      	ldr	r0, [r0, #4]
   d637a:	4611      	mov	r1, r2
   d637c:	f7ff bf58 	b.w	d6230 <network_listening>

000d6380 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6380:	2200      	movs	r2, #0
   d6382:	6840      	ldr	r0, [r0, #4]
   d6384:	4611      	mov	r1, r2
   d6386:	f7ff bf63 	b.w	d6250 <network_get_listen_timeout>

000d638a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d638a:	6840      	ldr	r0, [r0, #4]
   d638c:	2200      	movs	r2, #0
   d638e:	f7ff bf57 	b.w	d6240 <network_set_listen_timeout>

000d6392 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6392:	6840      	ldr	r0, [r0, #4]
   d6394:	2200      	movs	r2, #0
   d6396:	f081 0101 	eor.w	r1, r1, #1
   d639a:	f7ff bf41 	b.w	d6220 <network_listen>

000d639e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d639e:	2300      	movs	r3, #0
   d63a0:	6840      	ldr	r0, [r0, #4]
   d63a2:	461a      	mov	r2, r3
   d63a4:	4619      	mov	r1, r3
   d63a6:	f7ff bf33 	b.w	d6210 <network_off>

000d63aa <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d63aa:	2300      	movs	r3, #0
   d63ac:	6840      	ldr	r0, [r0, #4]
   d63ae:	461a      	mov	r2, r3
   d63b0:	4619      	mov	r1, r3
   d63b2:	f7ff bf25 	b.w	d6200 <network_on>

000d63b6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d63b6:	2200      	movs	r2, #0
   d63b8:	6840      	ldr	r0, [r0, #4]
   d63ba:	4611      	mov	r1, r2
   d63bc:	f7ff bf08 	b.w	d61d0 <network_connecting>

000d63c0 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d63c0:	6840      	ldr	r0, [r0, #4]
   d63c2:	2200      	movs	r2, #0
   d63c4:	2102      	movs	r1, #2
   d63c6:	f7ff bf0b 	b.w	d61e0 <network_disconnect>

000d63ca <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d63ca:	2300      	movs	r3, #0
   d63cc:	6840      	ldr	r0, [r0, #4]
   d63ce:	461a      	mov	r2, r3
   d63d0:	f7ff bef6 	b.w	d61c0 <network_connect>

000d63d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d63d4:	4b08      	ldr	r3, [pc, #32]	; (d63f8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d63d6:	b510      	push	{r4, lr}
   d63d8:	2428      	movs	r4, #40	; 0x28
   d63da:	4622      	mov	r2, r4
   d63dc:	4618      	mov	r0, r3
   d63de:	2100      	movs	r1, #0
   d63e0:	f002 fff4 	bl	d93cc <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d63e4:	4b05      	ldr	r3, [pc, #20]	; (d63fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d63e6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d63e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d63ec:	6042      	str	r2, [r0, #4]
   d63ee:	2204      	movs	r2, #4
   d63f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d63f2:	4a03      	ldr	r2, [pc, #12]	; (d6400 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d63f4:	601a      	str	r2, [r3, #0]
   d63f6:	bd10      	pop	{r4, pc}
   d63f8:	2003e550 	.word	0x2003e550
   d63fc:	2003e548 	.word	0x2003e548
   d6400:	000d9bf4 	.word	0x000d9bf4

000d6404 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6404:	4770      	bx	lr

000d6406 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d6406:	2000      	movs	r0, #0
   d6408:	4770      	bx	lr

000d640a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d640a:	b510      	push	{r4, lr}
   d640c:	2110      	movs	r1, #16
   d640e:	4604      	mov	r4, r0
   d6410:	f002 fb5c 	bl	d8acc <_ZdlPvj>
   d6414:	4620      	mov	r0, r4
   d6416:	bd10      	pop	{r4, pc}

000d6418 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d6418:	b508      	push	{r3, lr}
      { delete this; }
   d641a:	f7ff fff6 	bl	d640a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d641e:	bd08      	pop	{r3, pc}

000d6420 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d6420:	b510      	push	{r4, lr}
      if (_M_manager)
   d6422:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6424:	4604      	mov	r4, r0
      if (_M_manager)
   d6426:	b113      	cbz	r3, d642e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6428:	2203      	movs	r2, #3
   d642a:	4601      	mov	r1, r0
   d642c:	4798      	blx	r3
    }
   d642e:	4620      	mov	r0, r4
   d6430:	bd10      	pop	{r4, pc}

000d6432 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6432:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6434:	2200      	movs	r2, #0
   d6436:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d643a:	6002      	str	r2, [r0, #0]
   d643c:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d643e:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6440:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6442:	680c      	ldr	r4, [r1, #0]
   d6444:	8085      	strh	r5, [r0, #4]
   d6446:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6448:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d644a:	bd30      	pop	{r4, r5, pc}

000d644c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d644c:	b510      	push	{r4, lr}
   d644e:	4604      	mov	r4, r0
    free((void*)msg_);
   d6450:	6800      	ldr	r0, [r0, #0]
   d6452:	f7ff ff1d 	bl	d6290 <free>
}
   d6456:	4620      	mov	r0, r4
   d6458:	bd10      	pop	{r4, pc}

000d645a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d645a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d645c:	68c4      	ldr	r4, [r0, #12]
   d645e:	b1f4      	cbz	r4, d649e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6460:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6462:	2b02      	cmp	r3, #2
   d6464:	d103      	bne.n	d646e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6466:	f104 000c 	add.w	r0, r4, #12
   d646a:	f7ff ffef 	bl	d644c <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d646e:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6470:	b135      	cbz	r5, d6480 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6472:	4628      	mov	r0, r5
   d6474:	f7ff ffd4 	bl	d6420 <_ZNSt14_Function_baseD1Ev>
   d6478:	2110      	movs	r1, #16
   d647a:	4628      	mov	r0, r5
   d647c:	f002 fb26 	bl	d8acc <_ZdlPvj>
   d6480:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6482:	b135      	cbz	r5, d6492 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6484:	4628      	mov	r0, r5
   d6486:	f7ff ffcb 	bl	d6420 <_ZNSt14_Function_baseD1Ev>
   d648a:	2110      	movs	r1, #16
   d648c:	4628      	mov	r0, r5
   d648e:	f002 fb1d 	bl	d8acc <_ZdlPvj>
   d6492:	4620      	mov	r0, r4
   d6494:	2114      	movs	r1, #20
   d6496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d649a:	f002 bb17 	b.w	d8acc <_ZdlPvj>
   d649e:	bd38      	pop	{r3, r4, r5, pc}

000d64a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d64a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d64a2:	460e      	mov	r6, r1
   d64a4:	4604      	mov	r4, r0
   d64a6:	f856 3b04 	ldr.w	r3, [r6], #4
   d64aa:	9300      	str	r3, [sp, #0]
   d64ac:	460d      	mov	r5, r1
   d64ae:	a801      	add	r0, sp, #4
   d64b0:	4631      	mov	r1, r6
   d64b2:	f7ff ff4c 	bl	d634e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d64b6:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d64b8:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d64ba:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d64bc:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d64be:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d64c0:	2300      	movs	r3, #0
   d64c2:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d64c4:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d64c6:	f7fd ff65 	bl	d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d64ca:	4630      	mov	r0, r6
   d64cc:	f7fd ff62 	bl	d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d64d0:	4628      	mov	r0, r5
   d64d2:	2108      	movs	r1, #8
   d64d4:	f002 fafa 	bl	d8acc <_ZdlPvj>
        return p;
    }
   d64d8:	4620      	mov	r0, r4
   d64da:	b002      	add	sp, #8
   d64dc:	bd70      	pop	{r4, r5, r6, pc}

000d64de <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d64de:	b513      	push	{r0, r1, r4, lr}
   d64e0:	460b      	mov	r3, r1
   d64e2:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64e4:	e9d0 0100 	ldrd	r0, r1, [r0]
   d64e8:	466c      	mov	r4, sp
   d64ea:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d64ee:	e893 0003 	ldmia.w	r3, {r0, r1}
   d64f2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d64f6:	e894 0003 	ldmia.w	r4, {r0, r1}
   d64fa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d64fe:	b002      	add	sp, #8
   d6500:	bd10      	pop	{r4, pc}

000d6502 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d6502:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6504:	b510      	push	{r4, lr}
      if (_M_empty())
   d6506:	b90a      	cbnz	r2, d650c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6508:	f002 fae6 	bl	d8ad8 <_ZSt25__throw_bad_function_callv>
    }
   d650c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6510:	68c3      	ldr	r3, [r0, #12]
   d6512:	4718      	bx	r3

000d6514 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6514:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6516:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6518:	f100 0110 	add.w	r1, r0, #16
   d651c:	f7ff fff1 	bl	d6502 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d6520:	bd08      	pop	{r3, pc}

000d6522 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d6522:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6524:	b510      	push	{r4, lr}
      if (_M_empty())
   d6526:	b90a      	cbnz	r2, d652c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6528:	f002 fad6 	bl	d8ad8 <_ZSt25__throw_bad_function_callv>
    }
   d652c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6530:	68c3      	ldr	r3, [r0, #12]
   d6532:	4718      	bx	r3

000d6534 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6534:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6536:	6800      	ldr	r0, [r0, #0]
   d6538:	f100 0110 	add.w	r1, r0, #16
   d653c:	f7ff fff1 	bl	d6522 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6540:	bd08      	pop	{r3, pc}
	...

000d6544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6544:	b538      	push	{r3, r4, r5, lr}
   d6546:	2300      	movs	r3, #0
   d6548:	4604      	mov	r4, r0
   d654a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d654c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d654e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6550:	f7fd fda1 	bl	d4096 <_Znwj>
   d6554:	b128      	cbz	r0, d6562 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6556:	2301      	movs	r3, #1
   d6558:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d655c:	4b02      	ldr	r3, [pc, #8]	; (d6568 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d655e:	6003      	str	r3, [r0, #0]
   d6560:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6562:	6020      	str	r0, [r4, #0]
	}
   d6564:	4620      	mov	r0, r4
   d6566:	bd38      	pop	{r3, r4, r5, pc}
   d6568:	000d9c30 	.word	0x000d9c30

000d656c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d656c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d656e:	2300      	movs	r3, #0
   d6570:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6572:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6574:	4604      	mov	r4, r0
   d6576:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6578:	b12b      	cbz	r3, d6586 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d657a:	2202      	movs	r2, #2
   d657c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d657e:	68eb      	ldr	r3, [r5, #12]
   d6580:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6582:	68ab      	ldr	r3, [r5, #8]
   d6584:	60a3      	str	r3, [r4, #8]
    }
   d6586:	4620      	mov	r0, r4
   d6588:	bd38      	pop	{r3, r4, r5, pc}
	...

000d658c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d658c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d658e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6590:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6592:	4668      	mov	r0, sp
   d6594:	f7ff ff4d 	bl	d6432 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6598:	f04f 0302 	mov.w	r3, #2
   d659c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d65a0:	2a00      	cmp	r2, #0
   d65a2:	d103      	bne.n	d65ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d65a4:	e8c4 3f41 	strexb	r1, r3, [r4]
   d65a8:	2900      	cmp	r1, #0
   d65aa:	d1f7      	bne.n	d659c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d65ac:	d125      	bne.n	d65fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d65ae:	f104 050c 	add.w	r5, r4, #12
   d65b2:	4669      	mov	r1, sp
   d65b4:	4628      	mov	r0, r5
   d65b6:	f7ff ff3c 	bl	d6432 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d65ba:	f3bf 8f5b 	dmb	ish
   d65be:	2301      	movs	r3, #1
   d65c0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d65c2:	2000      	movs	r0, #0
   d65c4:	f104 0308 	add.w	r3, r4, #8
   d65c8:	f3bf 8f5b 	dmb	ish
   d65cc:	e853 6f00 	ldrex	r6, [r3]
   d65d0:	e843 0200 	strex	r2, r0, [r3]
   d65d4:	2a00      	cmp	r2, #0
   d65d6:	d1f9      	bne.n	d65cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d65d8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d65dc:	b16e      	cbz	r6, d65fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d65de:	f7ff fd93 	bl	d6108 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d65e2:	b178      	cbz	r0, d6604 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d65e4:	4629      	mov	r1, r5
   d65e6:	4630      	mov	r0, r6
   d65e8:	f7ff ff8b 	bl	d6502 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d65ec:	4630      	mov	r0, r6
   d65ee:	f7ff ff17 	bl	d6420 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d65f2:	2110      	movs	r1, #16
   d65f4:	4630      	mov	r0, r6
   d65f6:	f002 fa69 	bl	d8acc <_ZdlPvj>
        p_->setError(std::move(error));
   d65fa:	4668      	mov	r0, sp
   d65fc:	f7ff ff26 	bl	d644c <_ZN8particle5ErrorD1Ev>
    }
   d6600:	b009      	add	sp, #36	; 0x24
   d6602:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6604:	4631      	mov	r1, r6
   d6606:	a802      	add	r0, sp, #8
   d6608:	f7ff ffb0 	bl	d656c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d660c:	68e0      	ldr	r0, [r4, #12]
   d660e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6612:	b108      	cbz	r0, d6618 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6614:	f002 ff64 	bl	d94e0 <strdup>
        type_(type) {
   d6618:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d661a:	2010      	movs	r0, #16
   d661c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6620:	f7fd fd39 	bl	d4096 <_Znwj>
   d6624:	4605      	mov	r5, r0
   d6626:	b1e8      	cbz	r0, d6664 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6628:	2700      	movs	r7, #0
   d662a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d662c:	2018      	movs	r0, #24
   d662e:	f7fd fd32 	bl	d4096 <_Znwj>
   d6632:	4604      	mov	r4, r0
   d6634:	b188      	cbz	r0, d665a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d6636:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6638:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d663a:	a802      	add	r0, sp, #8
   d663c:	f7ff ff4f 	bl	d64de <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6640:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6642:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6644:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6646:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6648:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d664a:	a906      	add	r1, sp, #24
   d664c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d664e:	60e3      	str	r3, [r4, #12]
   d6650:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6654:	9205      	str	r2, [sp, #20]
   d6656:	f7ff feec 	bl	d6432 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d665a:	4b08      	ldr	r3, [pc, #32]	; (d667c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d665c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d665e:	4b08      	ldr	r3, [pc, #32]	; (d6680 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6660:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6662:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6664:	a806      	add	r0, sp, #24
   d6666:	f7ff fef1 	bl	d644c <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d666a:	a802      	add	r0, sp, #8
   d666c:	f7ff fed8 	bl	d6420 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6670:	2200      	movs	r2, #0
   d6672:	4629      	mov	r1, r5
   d6674:	4803      	ldr	r0, [pc, #12]	; (d6684 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6676:	f7ff fd4f 	bl	d6118 <application_thread_invoke>
   d667a:	e7b7      	b.n	d65ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d667c:	000d6515 	.word	0x000d6515
   d6680:	000d67ad 	.word	0x000d67ad
   d6684:	000d6327 	.word	0x000d6327

000d6688 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d668c:	b08a      	sub	sp, #40	; 0x28
   d668e:	4605      	mov	r5, r0
   d6690:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6694:	460c      	mov	r4, r1
   d6696:	4617      	mov	r7, r2
   d6698:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d669a:	f7ff fd71 	bl	d6180 <spark_cloud_flag_connected>
   d669e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d66a0:	4682      	mov	sl, r0
   d66a2:	bb38      	cbnz	r0, d66f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d66a4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d66a8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d66aa:	a905      	add	r1, sp, #20
   d66ac:	4630      	mov	r0, r6
   d66ae:	f8ad 3018 	strh.w	r3, [sp, #24]
   d66b2:	f7ff febe 	bl	d6432 <_ZN8particle5ErrorC1EOS0_>
   d66b6:	2014      	movs	r0, #20
   d66b8:	f7fd fced 	bl	d4096 <_Znwj>
   d66bc:	4604      	mov	r4, r0
   d66be:	b148      	cbz	r0, d66d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d66c0:	2302      	movs	r3, #2
   d66c2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d66c4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d66c6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d66ca:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d66cc:	4631      	mov	r1, r6
   d66ce:	300c      	adds	r0, #12
   d66d0:	f7ff feaf 	bl	d6432 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d66d4:	4628      	mov	r0, r5
	: __shared_count(__p)
   d66d6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d66d8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d66dc:	f7ff ff32 	bl	d6544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d66e0:	4630      	mov	r0, r6
   d66e2:	f7ff feb3 	bl	d644c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d66e6:	a805      	add	r0, sp, #20
   d66e8:	f7ff feb0 	bl	d644c <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d66ec:	4628      	mov	r0, r5
   d66ee:	b00a      	add	sp, #40	; 0x28
   d66f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d66f4:	230c      	movs	r3, #12
   d66f6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d66fa:	2014      	movs	r0, #20
   d66fc:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6700:	9307      	str	r3, [sp, #28]
   d6702:	f7fd fcc8 	bl	d4096 <_Znwj>
   d6706:	4601      	mov	r1, r0
   d6708:	b128      	cbz	r0, d6716 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d670a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d670e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6712:	f880 a001 	strb.w	sl, [r0, #1]
   d6716:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6718:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d671a:	f7ff ff13 	bl	d6544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d671e:	4b22      	ldr	r3, [pc, #136]	; (d67a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6720:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6722:	2008      	movs	r0, #8
   d6724:	f7fd fcb7 	bl	d4096 <_Znwj>
   d6728:	4682      	mov	sl, r0
   d672a:	b128      	cbz	r0, d6738 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d672c:	9b03      	ldr	r3, [sp, #12]
   d672e:	f840 3b04 	str.w	r3, [r0], #4
   d6732:	a904      	add	r1, sp, #16
   d6734:	f7ff fe0b 	bl	d634e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6738:	9600      	str	r6, [sp, #0]
   d673a:	fa5f f389 	uxtb.w	r3, r9
   d673e:	4642      	mov	r2, r8
   d6740:	4639      	mov	r1, r7
   d6742:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6744:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6748:	f7ff fd22 	bl	d6190 <spark_send_event>
   d674c:	b9b8      	cbnz	r0, d677e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d674e:	9b03      	ldr	r3, [sp, #12]
   d6750:	785b      	ldrb	r3, [r3, #1]
   d6752:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6756:	b993      	cbnz	r3, d677e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6758:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d675c:	a905      	add	r1, sp, #20
   d675e:	a803      	add	r0, sp, #12
   d6760:	9205      	str	r2, [sp, #20]
   d6762:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6766:	f7ff ff11 	bl	d658c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d676a:	a805      	add	r0, sp, #20
   d676c:	f7ff fe6e 	bl	d644c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6770:	a805      	add	r0, sp, #20
   d6772:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6774:	f7ff fe94 	bl	d64a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6778:	a806      	add	r0, sp, #24
   d677a:	f7fd fe0b 	bl	d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d677e:	9b03      	ldr	r3, [sp, #12]
   d6780:	9305      	str	r3, [sp, #20]
   d6782:	a904      	add	r1, sp, #16
   d6784:	a806      	add	r0, sp, #24
   d6786:	f7ff fde2 	bl	d634e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d678a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d678c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d678e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6790:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6792:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6794:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6796:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6798:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d679a:	f7fd fdfb 	bl	d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d679e:	a804      	add	r0, sp, #16
   d67a0:	f7fd fdf8 	bl	d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d67a4:	e7a2      	b.n	d66ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d67a6:	bf00      	nop
   d67a8:	000d6871 	.word	0x000d6871

000d67ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d67ac:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d67ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67b0:	4605      	mov	r5, r0
	  switch (__op)
   d67b2:	d007      	beq.n	d67c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d67b4:	2a03      	cmp	r2, #3
   d67b6:	d018      	beq.n	d67ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d67b8:	2a01      	cmp	r2, #1
   d67ba:	d101      	bne.n	d67c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d67bc:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d67be:	6003      	str	r3, [r0, #0]
	}
   d67c0:	2000      	movs	r0, #0
   d67c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d67c4:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d67c6:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d67c8:	f7fd fc65 	bl	d4096 <_Znwj>
   d67cc:	4604      	mov	r4, r0
   d67ce:	b150      	cbz	r0, d67e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d67d0:	4631      	mov	r1, r6
   d67d2:	f7ff fecb 	bl	d656c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d67d6:	6930      	ldr	r0, [r6, #16]
   d67d8:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d67dc:	b108      	cbz	r0, d67e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d67de:	f002 fe7f 	bl	d94e0 <strdup>
        type_(type) {
   d67e2:	6120      	str	r0, [r4, #16]
   d67e4:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d67e6:	602c      	str	r4, [r5, #0]
	}
   d67e8:	e7ea      	b.n	d67c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d67ea:	6804      	ldr	r4, [r0, #0]
   d67ec:	2c00      	cmp	r4, #0
   d67ee:	d0e7      	beq.n	d67c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d67f0:	f104 0010 	add.w	r0, r4, #16
   d67f4:	f7ff fe2a 	bl	d644c <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d67f8:	4620      	mov	r0, r4
   d67fa:	f7ff fe11 	bl	d6420 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d67fe:	2118      	movs	r1, #24
   d6800:	4620      	mov	r0, r4
   d6802:	f002 f963 	bl	d8acc <_ZdlPvj>
   d6806:	e7db      	b.n	d67c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d6808 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6808:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d680a:	2300      	movs	r3, #0
   d680c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d680e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6810:	4604      	mov	r4, r0
   d6812:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6814:	b12b      	cbz	r3, d6822 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6816:	2202      	movs	r2, #2
   d6818:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d681a:	68eb      	ldr	r3, [r5, #12]
   d681c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d681e:	68ab      	ldr	r3, [r5, #8]
   d6820:	60a3      	str	r3, [r4, #8]
    }
   d6822:	4620      	mov	r0, r4
   d6824:	bd38      	pop	{r3, r4, r5, pc}

000d6826 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d6826:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6828:	b570      	push	{r4, r5, r6, lr}
   d682a:	4604      	mov	r4, r0
	  switch (__op)
   d682c:	d007      	beq.n	d683e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d682e:	2a03      	cmp	r2, #3
   d6830:	d012      	beq.n	d6858 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d6832:	2a01      	cmp	r2, #1
   d6834:	d101      	bne.n	d683a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6836:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6838:	6003      	str	r3, [r0, #0]
	}
   d683a:	2000      	movs	r0, #0
   d683c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d683e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6840:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6842:	f7fd fc28 	bl	d4096 <_Znwj>
   d6846:	4605      	mov	r5, r0
   d6848:	b120      	cbz	r0, d6854 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d684a:	4631      	mov	r1, r6
   d684c:	f7ff ffdc 	bl	d6808 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6850:	7c33      	ldrb	r3, [r6, #16]
   d6852:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6854:	6025      	str	r5, [r4, #0]
	}
   d6856:	e7f0      	b.n	d683a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6858:	6804      	ldr	r4, [r0, #0]
   d685a:	2c00      	cmp	r4, #0
   d685c:	d0ed      	beq.n	d683a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d685e:	4620      	mov	r0, r4
   d6860:	f7ff fdde 	bl	d6420 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6864:	2114      	movs	r1, #20
   d6866:	4620      	mov	r0, r4
   d6868:	f002 f930 	bl	d8acc <_ZdlPvj>
   d686c:	e7e5      	b.n	d683a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6870 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6870:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6872:	b089      	sub	sp, #36	; 0x24
   d6874:	4604      	mov	r4, r0
   d6876:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6878:	a801      	add	r0, sp, #4
   d687a:	4611      	mov	r1, r2
   d687c:	f7ff fe10 	bl	d64a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6880:	b1a4      	cbz	r4, d68ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6882:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6884:	b11d      	cbz	r5, d688e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d6886:	4628      	mov	r0, r5
   d6888:	f002 fe2a 	bl	d94e0 <strdup>
   d688c:	4605      	mov	r5, r0
   d688e:	a801      	add	r0, sp, #4
   d6890:	a903      	add	r1, sp, #12
        type_(type) {
   d6892:	9503      	str	r5, [sp, #12]
   d6894:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6898:	f7ff fe78 	bl	d658c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d689c:	a803      	add	r0, sp, #12
   d689e:	f7ff fdd5 	bl	d644c <_ZN8particle5ErrorD1Ev>
   d68a2:	a802      	add	r0, sp, #8
   d68a4:	f7fd fd76 	bl	d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d68a8:	b009      	add	sp, #36	; 0x24
   d68aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d68ac:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d68ae:	2301      	movs	r3, #1
   d68b0:	e8d5 2f4f 	ldrexb	r2, [r5]
   d68b4:	2a00      	cmp	r2, #0
   d68b6:	d103      	bne.n	d68c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d68b8:	e8c5 3f41 	strexb	r1, r3, [r5]
   d68bc:	2900      	cmp	r1, #0
   d68be:	d1f7      	bne.n	d68b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d68c0:	d1ef      	bne.n	d68a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d68c2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d68c4:	f3bf 8f5b 	dmb	ish
   d68c8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d68ca:	1d2b      	adds	r3, r5, #4
   d68cc:	f3bf 8f5b 	dmb	ish
   d68d0:	e853 6f00 	ldrex	r6, [r3]
   d68d4:	e843 4200 	strex	r2, r4, [r3]
   d68d8:	2a00      	cmp	r2, #0
   d68da:	d1f9      	bne.n	d68d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d68dc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d68e0:	2e00      	cmp	r6, #0
   d68e2:	d0de      	beq.n	d68a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d68e4:	4620      	mov	r0, r4
   d68e6:	f7ff fc0f 	bl	d6108 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d68ea:	4607      	mov	r7, r0
   d68ec:	b160      	cbz	r0, d6908 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d68ee:	f105 010c 	add.w	r1, r5, #12
   d68f2:	4630      	mov	r0, r6
   d68f4:	f7ff fe15 	bl	d6522 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d68f8:	4630      	mov	r0, r6
   d68fa:	f7ff fd91 	bl	d6420 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d68fe:	2110      	movs	r1, #16
   d6900:	4630      	mov	r0, r6
   d6902:	f002 f8e3 	bl	d8acc <_ZdlPvj>
   d6906:	e7cc      	b.n	d68a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6908:	4631      	mov	r1, r6
   d690a:	a803      	add	r0, sp, #12
   d690c:	f7ff ff7c 	bl	d6808 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6910:	7b2b      	ldrb	r3, [r5, #12]
   d6912:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6916:	2010      	movs	r0, #16
   d6918:	f7fd fbbd 	bl	d4096 <_Znwj>
   d691c:	4605      	mov	r5, r0
   d691e:	b1d0      	cbz	r0, d6956 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6920:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6922:	2014      	movs	r0, #20
   d6924:	f7fd fbb7 	bl	d4096 <_Znwj>
   d6928:	4604      	mov	r4, r0
   d692a:	b178      	cbz	r0, d694c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d692c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d692e:	4601      	mov	r1, r0
   d6930:	a803      	add	r0, sp, #12
   d6932:	f7ff fdd4 	bl	d64de <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6936:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6938:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d693a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d693c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d693e:	9205      	str	r2, [sp, #20]
   d6940:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6942:	60e3      	str	r3, [r4, #12]
   d6944:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6948:	9206      	str	r2, [sp, #24]
   d694a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d694c:	4b06      	ldr	r3, [pc, #24]	; (d6968 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d694e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6950:	4b06      	ldr	r3, [pc, #24]	; (d696c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6952:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6954:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d6956:	a803      	add	r0, sp, #12
   d6958:	f7ff fd62 	bl	d6420 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d695c:	2200      	movs	r2, #0
   d695e:	4629      	mov	r1, r5
   d6960:	4803      	ldr	r0, [pc, #12]	; (d6970 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d6962:	f7ff fbd9 	bl	d6118 <application_thread_invoke>
   d6966:	e7c7      	b.n	d68f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6968:	000d6535 	.word	0x000d6535
   d696c:	000d6827 	.word	0x000d6827
   d6970:	000d6327 	.word	0x000d6327

000d6974 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6974:	2200      	movs	r2, #0
   d6976:	6840      	ldr	r0, [r0, #4]
   d6978:	4611      	mov	r1, r2
   d697a:	f7ff bc59 	b.w	d6230 <network_listening>

000d697e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d697e:	2200      	movs	r2, #0
   d6980:	6840      	ldr	r0, [r0, #4]
   d6982:	4611      	mov	r1, r2
   d6984:	f7ff bc64 	b.w	d6250 <network_get_listen_timeout>

000d6988 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6988:	6840      	ldr	r0, [r0, #4]
   d698a:	2200      	movs	r2, #0
   d698c:	f7ff bc58 	b.w	d6240 <network_set_listen_timeout>

000d6990 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6990:	6840      	ldr	r0, [r0, #4]
   d6992:	2200      	movs	r2, #0
   d6994:	f081 0101 	eor.w	r1, r1, #1
   d6998:	f7ff bc42 	b.w	d6220 <network_listen>

000d699c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d699c:	2300      	movs	r3, #0
   d699e:	6840      	ldr	r0, [r0, #4]
   d69a0:	461a      	mov	r2, r3
   d69a2:	4619      	mov	r1, r3
   d69a4:	f7ff bc34 	b.w	d6210 <network_off>

000d69a8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d69a8:	2300      	movs	r3, #0
   d69aa:	6840      	ldr	r0, [r0, #4]
   d69ac:	461a      	mov	r2, r3
   d69ae:	4619      	mov	r1, r3
   d69b0:	f7ff bc26 	b.w	d6200 <network_on>

000d69b4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d69b4:	2200      	movs	r2, #0
   d69b6:	6840      	ldr	r0, [r0, #4]
   d69b8:	4611      	mov	r1, r2
   d69ba:	f7ff bc19 	b.w	d61f0 <network_ready>

000d69be <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d69be:	2200      	movs	r2, #0
   d69c0:	6840      	ldr	r0, [r0, #4]
   d69c2:	4611      	mov	r1, r2
   d69c4:	f7ff bc04 	b.w	d61d0 <network_connecting>

000d69c8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d69c8:	6840      	ldr	r0, [r0, #4]
   d69ca:	2200      	movs	r2, #0
   d69cc:	2102      	movs	r1, #2
   d69ce:	f7ff bc07 	b.w	d61e0 <network_disconnect>

000d69d2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d69d2:	2300      	movs	r3, #0
   d69d4:	6840      	ldr	r0, [r0, #4]
   d69d6:	461a      	mov	r2, r3
   d69d8:	f7ff bbf2 	b.w	d61c0 <network_connect>

000d69dc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d69dc:	4b02      	ldr	r3, [pc, #8]	; (d69e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d69de:	2203      	movs	r2, #3
   d69e0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d69e2:	4a02      	ldr	r2, [pc, #8]	; (d69ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d69e4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d69e6:	4770      	bx	lr
   d69e8:	2003e578 	.word	0x2003e578
   d69ec:	000d9c4c 	.word	0x000d9c4c

000d69f0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d69f0:	4770      	bx	lr

000d69f2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d69f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d69f4:	4606      	mov	r6, r0
   d69f6:	4615      	mov	r5, r2
   d69f8:	460c      	mov	r4, r1
   d69fa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d69fc:	42bc      	cmp	r4, r7
   d69fe:	d006      	beq.n	d6a0e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6a00:	6833      	ldr	r3, [r6, #0]
   d6a02:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6a06:	689b      	ldr	r3, [r3, #8]
   d6a08:	4630      	mov	r0, r6
   d6a0a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6a0c:	e7f6      	b.n	d69fc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6a0e:	4628      	mov	r0, r5
   d6a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a12 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6a12:	7c00      	ldrb	r0, [r0, #16]
   d6a14:	2200      	movs	r2, #0
   d6a16:	f7ff b9fd 	b.w	d5e14 <hal_i2c_write>

000d6a1a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6a1a:	7c00      	ldrb	r0, [r0, #16]
   d6a1c:	2100      	movs	r1, #0
   d6a1e:	f7ff ba01 	b.w	d5e24 <hal_i2c_available>

000d6a22 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6a22:	7c00      	ldrb	r0, [r0, #16]
   d6a24:	2100      	movs	r1, #0
   d6a26:	f7ff ba05 	b.w	d5e34 <hal_i2c_read>

000d6a2a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6a2a:	7c00      	ldrb	r0, [r0, #16]
   d6a2c:	2100      	movs	r1, #0
   d6a2e:	f7ff ba09 	b.w	d5e44 <hal_i2c_peek>

000d6a32 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d6a32:	7c00      	ldrb	r0, [r0, #16]
   d6a34:	2100      	movs	r1, #0
   d6a36:	f7ff ba0d 	b.w	d5e54 <hal_i2c_flush>

000d6a3a <_ZN7TwoWireD0Ev>:
   d6a3a:	b510      	push	{r4, lr}
   d6a3c:	2114      	movs	r1, #20
   d6a3e:	4604      	mov	r4, r0
   d6a40:	f002 f844 	bl	d8acc <_ZdlPvj>
   d6a44:	4620      	mov	r0, r4
   d6a46:	bd10      	pop	{r4, pc}

000d6a48 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6a48:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6a4e:	4604      	mov	r4, r0
   d6a50:	4608      	mov	r0, r1
   d6a52:	2100      	movs	r1, #0
   d6a54:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6a58:	4b03      	ldr	r3, [pc, #12]	; (d6a68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6a5a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6a5c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6a5e:	4611      	mov	r1, r2
   d6a60:	f7ff fa08 	bl	d5e74 <hal_i2c_init>
}
   d6a64:	4620      	mov	r0, r4
   d6a66:	bd10      	pop	{r4, pc}
   d6a68:	000d9c88 	.word	0x000d9c88

000d6a6c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d6a6c:	4700      	bx	r0
	...

000d6a70 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d6a70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d6a74:	2400      	movs	r4, #0
{
   d6a76:	461d      	mov	r5, r3
   d6a78:	460f      	mov	r7, r1
   d6a7a:	4690      	mov	r8, r2
   d6a7c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d6a7e:	f7ff f9c1 	bl	d5e04 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d6a82:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6a84:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d6a88:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6a8c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d6a90:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d6a94:	bfa2      	ittt	ge
   d6a96:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d6a9a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d6a9e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6aa0:	4907      	ldr	r1, [pc, #28]	; (d6ac0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d6aa2:	9400      	str	r4, [sp, #0]
   d6aa4:	4643      	mov	r3, r8
   d6aa6:	463a      	mov	r2, r7
   d6aa8:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d6aaa:	bfa8      	it	ge
   d6aac:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6ab0:	f7ff f9a0 	bl	d5df4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d6ab4:	fab0 f080 	clz	r0, r0
   d6ab8:	0940      	lsrs	r0, r0, #5
   d6aba:	b004      	add	sp, #16
   d6abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6ac0:	000d6a6d 	.word	0x000d6a6d

000d6ac4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6ac4:	4770      	bx	lr

000d6ac6 <_ZN9IPAddressD0Ev>:
   d6ac6:	b510      	push	{r4, lr}
   d6ac8:	2118      	movs	r1, #24
   d6aca:	4604      	mov	r4, r0
   d6acc:	f001 fffe 	bl	d8acc <_ZdlPvj>
   d6ad0:	4620      	mov	r0, r4
   d6ad2:	bd10      	pop	{r4, pc}

000d6ad4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6ad6:	7d03      	ldrb	r3, [r0, #20]
   d6ad8:	2b06      	cmp	r3, #6
{
   d6ada:	b08d      	sub	sp, #52	; 0x34
   d6adc:	460e      	mov	r6, r1
   d6ade:	f100 0704 	add.w	r7, r0, #4
   d6ae2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6ae6:	d012      	beq.n	d6b0e <_ZNK9IPAddress7printToER5Print+0x3a>
   d6ae8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6aec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6af0:	220a      	movs	r2, #10
   d6af2:	4630      	mov	r0, r6
   d6af4:	f001 fadf 	bl	d80b6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6af8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6afa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6afc:	d019      	beq.n	d6b32 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6afe:	2c00      	cmp	r4, #0
   d6b00:	d0f4      	beq.n	d6aec <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6b02:	212e      	movs	r1, #46	; 0x2e
   d6b04:	4630      	mov	r0, r6
   d6b06:	f001 fac7 	bl	d8098 <_ZN5Print5printEc>
   d6b0a:	4404      	add	r4, r0
   d6b0c:	e7ee      	b.n	d6aec <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b0e:	232f      	movs	r3, #47	; 0x2f
   d6b10:	466a      	mov	r2, sp
   d6b12:	4639      	mov	r1, r7
   d6b14:	200a      	movs	r0, #10
		buf[0] = 0;
   d6b16:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b1a:	f7ff f9b3 	bl	d5e84 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6b1e:	4668      	mov	r0, sp
   d6b20:	f002 fcfb 	bl	d951a <strlen>
   d6b24:	6833      	ldr	r3, [r6, #0]
   d6b26:	4602      	mov	r2, r0
   d6b28:	68db      	ldr	r3, [r3, #12]
   d6b2a:	4669      	mov	r1, sp
   d6b2c:	4630      	mov	r0, r6
   d6b2e:	4798      	blx	r3
   d6b30:	4604      	mov	r4, r0
    }
    return n;
}
   d6b32:	4620      	mov	r0, r4
   d6b34:	b00d      	add	sp, #52	; 0x34
   d6b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6b38 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6b38:	b510      	push	{r4, lr}
   d6b3a:	4b05      	ldr	r3, [pc, #20]	; (d6b50 <_ZN9IPAddressC1Ev+0x18>)
   d6b3c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6b3e:	2211      	movs	r2, #17
   d6b40:	f840 3b04 	str.w	r3, [r0], #4
   d6b44:	2100      	movs	r1, #0
   d6b46:	f002 fc41 	bl	d93cc <memset>
}
   d6b4a:	4620      	mov	r0, r4
   d6b4c:	bd10      	pop	{r4, pc}
   d6b4e:	bf00      	nop
   d6b50:	000d9cb0 	.word	0x000d9cb0

000d6b54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6b54:	4603      	mov	r3, r0
   d6b56:	4a07      	ldr	r2, [pc, #28]	; (d6b74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6b58:	b510      	push	{r4, lr}
   d6b5a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6b5e:	f101 0210 	add.w	r2, r1, #16
   d6b62:	f851 4b04 	ldr.w	r4, [r1], #4
   d6b66:	f843 4b04 	str.w	r4, [r3], #4
   d6b6a:	4291      	cmp	r1, r2
   d6b6c:	d1f9      	bne.n	d6b62 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6b6e:	780a      	ldrb	r2, [r1, #0]
   d6b70:	701a      	strb	r2, [r3, #0]
}
   d6b72:	bd10      	pop	{r4, pc}
   d6b74:	000d9cb0 	.word	0x000d9cb0

000d6b78 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6b78:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6b7a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6b7e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6b82:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6b86:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6b8a:	2304      	movs	r3, #4
   d6b8c:	6041      	str	r1, [r0, #4]
   d6b8e:	7503      	strb	r3, [r0, #20]
}
   d6b90:	bd10      	pop	{r4, pc}

000d6b92 <_ZN9IPAddressaSEPKh>:
{
   d6b92:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6b94:	78cb      	ldrb	r3, [r1, #3]
   d6b96:	9300      	str	r3, [sp, #0]
   d6b98:	788b      	ldrb	r3, [r1, #2]
   d6b9a:	784a      	ldrb	r2, [r1, #1]
   d6b9c:	7809      	ldrb	r1, [r1, #0]
   d6b9e:	f7ff ffeb 	bl	d6b78 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6ba2:	b002      	add	sp, #8
   d6ba4:	bd10      	pop	{r4, pc}

000d6ba6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d6ba6:	f100 0310 	add.w	r3, r0, #16
   d6baa:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d6bac:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d6bb0:	2901      	cmp	r1, #1
   d6bb2:	4618      	mov	r0, r3
   d6bb4:	d108      	bne.n	d6bc8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d6bb6:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d6bba:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d6bbe:	3a01      	subs	r2, #1
   d6bc0:	f103 0310 	add.w	r3, r3, #16
   d6bc4:	d1f2      	bne.n	d6bac <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d6bc6:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d6bc8:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d6bca:	bf04      	itt	eq
   d6bcc:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d6bd0:	1852      	addeq	r2, r2, r1
   d6bd2:	e7f4      	b.n	d6bbe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d6bd4 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d6bd4:	b40e      	push	{r1, r2, r3}
   d6bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6bd8:	b088      	sub	sp, #32
   d6bda:	af00      	add	r7, sp, #0
   d6bdc:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6be0:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6be2:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6be6:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6be8:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6bea:	462b      	mov	r3, r5
   d6bec:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d6bee:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6bf0:	f7ff fb6e 	bl	d62d0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d6bf4:	280f      	cmp	r0, #15
   d6bf6:	687a      	ldr	r2, [r7, #4]
   d6bf8:	d91a      	bls.n	d6c30 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d6bfa:	f100 0308 	add.w	r3, r0, #8
   d6bfe:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d6c02:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d6c04:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6c08:	1c41      	adds	r1, r0, #1
   d6c0a:	462b      	mov	r3, r5
   d6c0c:	4668      	mov	r0, sp
        va_start(args, fmt);
   d6c0e:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6c10:	f7ff fb5e 	bl	d62d0 <vsnprintf>
        if (n > 0) {
   d6c14:	1e02      	subs	r2, r0, #0
   d6c16:	dd04      	ble.n	d6c22 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d6c18:	6823      	ldr	r3, [r4, #0]
   d6c1a:	4669      	mov	r1, sp
   d6c1c:	689b      	ldr	r3, [r3, #8]
   d6c1e:	4620      	mov	r0, r4
   d6c20:	4798      	blx	r3
   d6c22:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d6c24:	3720      	adds	r7, #32
   d6c26:	46bd      	mov	sp, r7
   d6c28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6c2c:	b003      	add	sp, #12
   d6c2e:	4770      	bx	lr
    } else if (n > 0) {
   d6c30:	2800      	cmp	r0, #0
   d6c32:	d0f7      	beq.n	d6c24 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d6c34:	6823      	ldr	r3, [r4, #0]
   d6c36:	4602      	mov	r2, r0
   d6c38:	689b      	ldr	r3, [r3, #8]
   d6c3a:	f107 0110 	add.w	r1, r7, #16
   d6c3e:	4620      	mov	r0, r4
   d6c40:	4798      	blx	r3
}
   d6c42:	e7ef      	b.n	d6c24 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d6c44 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6c44:	b510      	push	{r4, lr}
          _M_dispose();
   d6c46:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6c48:	4604      	mov	r4, r0
          _M_dispose();
   d6c4a:	689b      	ldr	r3, [r3, #8]
   d6c4c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6c4e:	68a3      	ldr	r3, [r4, #8]
   d6c50:	3b01      	subs	r3, #1
   d6c52:	60a3      	str	r3, [r4, #8]
   d6c54:	b92b      	cbnz	r3, d6c62 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6c56:	6823      	ldr	r3, [r4, #0]
   d6c58:	4620      	mov	r0, r4
   d6c5a:	68db      	ldr	r3, [r3, #12]
    }
   d6c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6c60:	4718      	bx	r3
    }
   d6c62:	bd10      	pop	{r4, pc}

000d6c64 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d6c64:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d6c66:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d6c68:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d6c6c:	689b      	ldr	r3, [r3, #8]
   d6c6e:	2201      	movs	r2, #1
   d6c70:	f10d 0107 	add.w	r1, sp, #7
   d6c74:	4798      	blx	r3
}
   d6c76:	b003      	add	sp, #12
   d6c78:	f85d fb04 	ldr.w	pc, [sp], #4

000d6c7c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d6c7c:	b538      	push	{r3, r4, r5, lr}
   d6c7e:	680b      	ldr	r3, [r1, #0]
   d6c80:	6003      	str	r3, [r0, #0]
   d6c82:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d6c84:	6843      	ldr	r3, [r0, #4]
   d6c86:	429d      	cmp	r5, r3
    class __shared_ptr
   d6c88:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d6c8a:	d00c      	beq.n	d6ca6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d6c8c:	b115      	cbz	r5, d6c94 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d6c8e:	686b      	ldr	r3, [r5, #4]
   d6c90:	3301      	adds	r3, #1
   d6c92:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d6c94:	6860      	ldr	r0, [r4, #4]
   d6c96:	b128      	cbz	r0, d6ca4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d6c98:	6843      	ldr	r3, [r0, #4]
   d6c9a:	3b01      	subs	r3, #1
   d6c9c:	6043      	str	r3, [r0, #4]
   d6c9e:	b90b      	cbnz	r3, d6ca4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d6ca0:	f7ff ffd0 	bl	d6c44 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d6ca4:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d6ca6:	4620      	mov	r0, r4
   d6ca8:	bd38      	pop	{r3, r4, r5, pc}

000d6caa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6caa:	460b      	mov	r3, r1
   d6cac:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d6cae:	2200      	movs	r2, #0
   d6cb0:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d6cb2:	e9c0 2200 	strd	r2, r2, [r0]
   d6cb6:	4604      	mov	r4, r0
        t_ = t;
   d6cb8:	6083      	str	r3, [r0, #8]
    if (t) {
   d6cba:	b90b      	cbnz	r3, d6cc0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d6cbc:	4620      	mov	r0, r4
   d6cbe:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d6cc0:	f7ff ffdc 	bl	d6c7c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d6cc4:	e7fa      	b.n	d6cbc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d6cc6 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d6cc6:	6883      	ldr	r3, [r0, #8]
   d6cc8:	b1eb      	cbz	r3, d6d06 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d6cca:	781a      	ldrb	r2, [r3, #0]
   d6ccc:	2a03      	cmp	r2, #3
   d6cce:	d81a      	bhi.n	d6d06 <_ZNK5spark9JSONValue4typeEv+0x40>
   d6cd0:	e8df f002 	tbb	[pc, r2]
   d6cd4:	1b021704 	.word	0x1b021704
   d6cd8:	2005      	movs	r0, #5
   d6cda:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d6cdc:	6802      	ldr	r2, [r0, #0]
   d6cde:	685b      	ldr	r3, [r3, #4]
   d6ce0:	6852      	ldr	r2, [r2, #4]
   d6ce2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d6ce4:	282d      	cmp	r0, #45	; 0x2d
   d6ce6:	d012      	beq.n	d6d0e <_ZNK5spark9JSONValue4typeEv+0x48>
   d6ce8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6cec:	2b09      	cmp	r3, #9
   d6cee:	d90e      	bls.n	d6d0e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d6cf0:	2874      	cmp	r0, #116	; 0x74
   d6cf2:	d00e      	beq.n	d6d12 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d6cf4:	2866      	cmp	r0, #102	; 0x66
   d6cf6:	d00c      	beq.n	d6d12 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d6cf8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d6cfc:	4258      	negs	r0, r3
   d6cfe:	4158      	adcs	r0, r3
   d6d00:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d6d02:	2006      	movs	r0, #6
   d6d04:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d6d06:	2000      	movs	r0, #0
   d6d08:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d6d0a:	2004      	movs	r0, #4
   d6d0c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d6d0e:	2003      	movs	r0, #3
   d6d10:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d6d12:	2002      	movs	r0, #2
}
   d6d14:	4770      	bx	lr

000d6d16 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d6d16:	b510      	push	{r4, lr}
   d6d18:	4604      	mov	r4, r0
    switch (type()) {
   d6d1a:	f7ff ffd4 	bl	d6cc6 <_ZNK5spark9JSONValue4typeEv>
   d6d1e:	2802      	cmp	r0, #2
   d6d20:	d00e      	beq.n	d6d40 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d6d22:	1ec3      	subs	r3, r0, #3
   d6d24:	b2db      	uxtb	r3, r3
   d6d26:	2b01      	cmp	r3, #1
   d6d28:	d814      	bhi.n	d6d54 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d6d2a:	6822      	ldr	r2, [r4, #0]
   d6d2c:	68a3      	ldr	r3, [r4, #8]
   d6d2e:	6850      	ldr	r0, [r2, #4]
   d6d30:	685b      	ldr	r3, [r3, #4]
}
   d6d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d6d36:	220a      	movs	r2, #10
   d6d38:	2100      	movs	r1, #0
   d6d3a:	4418      	add	r0, r3
   d6d3c:	f002 bc96 	b.w	d966c <strtol>
        const char* const s = d_->json + t_->start;
   d6d40:	6822      	ldr	r2, [r4, #0]
   d6d42:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d6d44:	6852      	ldr	r2, [r2, #4]
   d6d46:	685b      	ldr	r3, [r3, #4]
   d6d48:	5cd0      	ldrb	r0, [r2, r3]
   d6d4a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6d4e:	4258      	negs	r0, r3
   d6d50:	4158      	adcs	r0, r3
}
   d6d52:	bd10      	pop	{r4, pc}
    switch (type()) {
   d6d54:	2000      	movs	r0, #0
   d6d56:	e7fc      	b.n	d6d52 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d6d58 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6d58:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6d5a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d6d5c:	e9c0 3300 	strd	r3, r3, [r0]
   d6d60:	4604      	mov	r4, r0
        n_(0) {
   d6d62:	480e      	ldr	r0, [pc, #56]	; (d6d9c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d6d64:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d6d68:	b1a9      	cbz	r1, d6d96 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d6d6a:	780b      	ldrb	r3, [r1, #0]
   d6d6c:	2b03      	cmp	r3, #3
   d6d6e:	d006      	beq.n	d6d7e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d6d70:	b98b      	cbnz	r3, d6d96 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d6d72:	6813      	ldr	r3, [r2, #0]
   d6d74:	6858      	ldr	r0, [r3, #4]
   d6d76:	684b      	ldr	r3, [r1, #4]
   d6d78:	5cc3      	ldrb	r3, [r0, r3]
   d6d7a:	2b6e      	cmp	r3, #110	; 0x6e
   d6d7c:	d007      	beq.n	d6d8e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d6d7e:	6813      	ldr	r3, [r2, #0]
   d6d80:	684d      	ldr	r5, [r1, #4]
   d6d82:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d6d84:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d6d86:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d6d88:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d6d8a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d6d8c:	60e3      	str	r3, [r4, #12]
   d6d8e:	4611      	mov	r1, r2
   d6d90:	4620      	mov	r0, r4
   d6d92:	f7ff ff73 	bl	d6c7c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6d96:	4620      	mov	r0, r4
   d6d98:	bd38      	pop	{r3, r4, r5, pc}
   d6d9a:	bf00      	nop
   d6d9c:	000d9d1f 	.word	0x000d9d1f

000d6da0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6da0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6da2:	2500      	movs	r5, #0
   d6da4:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d6da6:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d6daa:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d6dae:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d6db2:	4604      	mov	r4, r0
   d6db4:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d6db6:	b14b      	cbz	r3, d6dcc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d6db8:	781a      	ldrb	r2, [r3, #0]
   d6dba:	2a01      	cmp	r2, #1
   d6dbc:	d106      	bne.n	d6dcc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d6dbe:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d6dc2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d6dc4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d6dc6:	6143      	str	r3, [r0, #20]
   d6dc8:	f7ff ff58 	bl	d6c7c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6dcc:	4620      	mov	r0, r4
   d6dce:	bd38      	pop	{r3, r4, r5, pc}

000d6dd0 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d6dd0:	b510      	push	{r4, lr}
    if (!n_) {
   d6dd2:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d6dd4:	4604      	mov	r4, r0
    if (!n_) {
   d6dd6:	b163      	cbz	r3, d6df2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d6dd8:	6880      	ldr	r0, [r0, #8]
   d6dda:	60e0      	str	r0, [r4, #12]
    --n_;
   d6ddc:	3b01      	subs	r3, #1
    ++t_;
   d6dde:	3010      	adds	r0, #16
   d6de0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6de2:	6120      	str	r0, [r4, #16]
    --n_;
   d6de4:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6de6:	b113      	cbz	r3, d6dee <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d6de8:	f7ff fedd 	bl	d6ba6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6dec:	60a0      	str	r0, [r4, #8]
    return true;
   d6dee:	2001      	movs	r0, #1
   d6df0:	e000      	b.n	d6df4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d6df2:	4618      	mov	r0, r3
}
   d6df4:	bd10      	pop	{r4, pc}

000d6df6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6df6:	b510      	push	{r4, lr}
    write('}');
   d6df8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6dfa:	4604      	mov	r4, r0
    write('}');
   d6dfc:	f7ff ff32 	bl	d6c64 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6e00:	2301      	movs	r3, #1
   d6e02:	7123      	strb	r3, [r4, #4]
}
   d6e04:	4620      	mov	r0, r4
   d6e06:	bd10      	pop	{r4, pc}

000d6e08 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d6e08:	b508      	push	{r3, lr}
    switch (state_) {
   d6e0a:	7903      	ldrb	r3, [r0, #4]
   d6e0c:	2b01      	cmp	r3, #1
   d6e0e:	d002      	beq.n	d6e16 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6e10:	2b02      	cmp	r3, #2
   d6e12:	d004      	beq.n	d6e1e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d6e14:	bd08      	pop	{r3, pc}
        write(',');
   d6e16:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d6e18:	f7ff ff24 	bl	d6c64 <_ZN5spark10JSONWriter5writeEc>
}
   d6e1c:	e7fa      	b.n	d6e14 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d6e1e:	213a      	movs	r1, #58	; 0x3a
   d6e20:	e7fa      	b.n	d6e18 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d6e22 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d6e22:	b510      	push	{r4, lr}
   d6e24:	4604      	mov	r4, r0
    writeSeparator();
   d6e26:	f7ff ffef 	bl	d6e08 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6e2a:	4620      	mov	r0, r4
   d6e2c:	217b      	movs	r1, #123	; 0x7b
   d6e2e:	f7ff ff19 	bl	d6c64 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d6e32:	2300      	movs	r3, #0
   d6e34:	7123      	strb	r3, [r4, #4]
}
   d6e36:	4620      	mov	r0, r4
   d6e38:	bd10      	pop	{r4, pc}
	...

000d6e3c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6e3c:	b513      	push	{r0, r1, r4, lr}
   d6e3e:	4604      	mov	r4, r0
   d6e40:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6e42:	f7ff ffe1 	bl	d6e08 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d6e46:	6823      	ldr	r3, [r4, #0]
   d6e48:	9a01      	ldr	r2, [sp, #4]
   d6e4a:	68db      	ldr	r3, [r3, #12]
   d6e4c:	4903      	ldr	r1, [pc, #12]	; (d6e5c <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6e4e:	4620      	mov	r0, r4
   d6e50:	4798      	blx	r3
    state_ = NEXT;
   d6e52:	2301      	movs	r3, #1
}
   d6e54:	4620      	mov	r0, r4
    state_ = NEXT;
   d6e56:	7123      	strb	r3, [r4, #4]
}
   d6e58:	b002      	add	sp, #8
   d6e5a:	bd10      	pop	{r4, pc}
   d6e5c:	000d97fe 	.word	0x000d97fe

000d6e60 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d6e60:	b513      	push	{r0, r1, r4, lr}
   d6e62:	4604      	mov	r4, r0
   d6e64:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6e66:	f7ff ffcf 	bl	d6e08 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d6e6a:	6823      	ldr	r3, [r4, #0]
   d6e6c:	9a01      	ldr	r2, [sp, #4]
   d6e6e:	68db      	ldr	r3, [r3, #12]
   d6e70:	4903      	ldr	r1, [pc, #12]	; (d6e80 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d6e72:	4620      	mov	r0, r4
   d6e74:	4798      	blx	r3
    state_ = NEXT;
   d6e76:	2301      	movs	r3, #1
}
   d6e78:	4620      	mov	r0, r4
    state_ = NEXT;
   d6e7a:	7123      	strb	r3, [r4, #4]
}
   d6e7c:	b002      	add	sp, #8
   d6e7e:	bd10      	pop	{r4, pc}
   d6e80:	000d9cbc 	.word	0x000d9cbc

000d6e84 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6e88:	460d      	mov	r5, r1
   d6e8a:	4617      	mov	r7, r2
    write('"');
   d6e8c:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d6e8e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d6f30 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6e92:	4604      	mov	r4, r0
    const char* const end = str + size;
   d6e94:	442f      	add	r7, r5
    write('"');
   d6e96:	f7ff fee5 	bl	d6c64 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d6e9a:	4629      	mov	r1, r5
    while (s != end) {
   d6e9c:	42bd      	cmp	r5, r7
   d6e9e:	462a      	mov	r2, r5
   d6ea0:	d038      	beq.n	d6f14 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d6ea2:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d6ea6:	2e22      	cmp	r6, #34	; 0x22
   d6ea8:	d003      	beq.n	d6eb2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6eaa:	2e5c      	cmp	r6, #92	; 0x5c
   d6eac:	d001      	beq.n	d6eb2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6eae:	2e1f      	cmp	r6, #31
   d6eb0:	d8f4      	bhi.n	d6e9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d6eb2:	6823      	ldr	r3, [r4, #0]
   d6eb4:	1a52      	subs	r2, r2, r1
   d6eb6:	689b      	ldr	r3, [r3, #8]
   d6eb8:	4620      	mov	r0, r4
   d6eba:	4798      	blx	r3
            write('\\');
   d6ebc:	215c      	movs	r1, #92	; 0x5c
   d6ebe:	4620      	mov	r0, r4
   d6ec0:	f7ff fed0 	bl	d6c64 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d6ec4:	2e0d      	cmp	r6, #13
   d6ec6:	d80a      	bhi.n	d6ede <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d6ec8:	2e07      	cmp	r6, #7
   d6eca:	d91c      	bls.n	d6f06 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6ecc:	f1a6 0308 	sub.w	r3, r6, #8
   d6ed0:	2b05      	cmp	r3, #5
   d6ed2:	d818      	bhi.n	d6f06 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6ed4:	e8df f003 	tbb	[pc, r3]
   d6ed8:	17110f0d 	.word	0x17110f0d
   d6edc:	1513      	.short	0x1513
   d6ede:	2e22      	cmp	r6, #34	; 0x22
   d6ee0:	d001      	beq.n	d6ee6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6ee2:	2e5c      	cmp	r6, #92	; 0x5c
   d6ee4:	d10f      	bne.n	d6f06 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d6ee6:	4631      	mov	r1, r6
                write('b');
   d6ee8:	4620      	mov	r0, r4
   d6eea:	f7ff febb 	bl	d6c64 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d6eee:	4629      	mov	r1, r5
    while (s != end) {
   d6ef0:	e7d4      	b.n	d6e9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d6ef2:	2162      	movs	r1, #98	; 0x62
   d6ef4:	e7f8      	b.n	d6ee8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d6ef6:	2174      	movs	r1, #116	; 0x74
   d6ef8:	e7f6      	b.n	d6ee8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d6efa:	216e      	movs	r1, #110	; 0x6e
   d6efc:	e7f4      	b.n	d6ee8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d6efe:	2166      	movs	r1, #102	; 0x66
   d6f00:	e7f2      	b.n	d6ee8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d6f02:	2172      	movs	r1, #114	; 0x72
   d6f04:	e7f0      	b.n	d6ee8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d6f06:	6823      	ldr	r3, [r4, #0]
   d6f08:	4632      	mov	r2, r6
   d6f0a:	68db      	ldr	r3, [r3, #12]
   d6f0c:	4641      	mov	r1, r8
   d6f0e:	4620      	mov	r0, r4
   d6f10:	4798      	blx	r3
                break;
   d6f12:	e7ec      	b.n	d6eee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d6f14:	428d      	cmp	r5, r1
   d6f16:	d004      	beq.n	d6f22 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d6f18:	6823      	ldr	r3, [r4, #0]
   d6f1a:	1a6a      	subs	r2, r5, r1
   d6f1c:	689b      	ldr	r3, [r3, #8]
   d6f1e:	4620      	mov	r0, r4
   d6f20:	4798      	blx	r3
    }
    write('"');
   d6f22:	2122      	movs	r1, #34	; 0x22
   d6f24:	4620      	mov	r0, r4
   d6f26:	f7ff fe9d 	bl	d6c64 <_ZN5spark10JSONWriter5writeEc>
}
   d6f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6f2e:	bf00      	nop
   d6f30:	000d9cbf 	.word	0x000d9cbf

000d6f34 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d6f34:	b513      	push	{r0, r1, r4, lr}
   d6f36:	4604      	mov	r4, r0
   d6f38:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6f3c:	f7ff ff64 	bl	d6e08 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6f40:	4620      	mov	r0, r4
   d6f42:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6f46:	f7ff ff9d 	bl	d6e84 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d6f4a:	2302      	movs	r3, #2
}
   d6f4c:	4620      	mov	r0, r4
    state_ = VALUE;
   d6f4e:	7123      	strb	r3, [r4, #4]
}
   d6f50:	b002      	add	sp, #8
   d6f52:	bd10      	pop	{r4, pc}

000d6f54 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d6f54:	b513      	push	{r0, r1, r4, lr}
   d6f56:	4604      	mov	r4, r0
   d6f58:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6f5c:	f7ff ff54 	bl	d6e08 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d6f60:	4620      	mov	r0, r4
   d6f62:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6f66:	f7ff ff8d 	bl	d6e84 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d6f6a:	2301      	movs	r3, #1
}
   d6f6c:	4620      	mov	r0, r4
    state_ = NEXT;
   d6f6e:	7123      	strb	r3, [r4, #4]
}
   d6f70:	b002      	add	sp, #8
   d6f72:	bd10      	pop	{r4, pc}

000d6f74 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d6f74:	6880      	ldr	r0, [r0, #8]
   d6f76:	6803      	ldr	r3, [r0, #0]
   d6f78:	68db      	ldr	r3, [r3, #12]
   d6f7a:	4718      	bx	r3

000d6f7c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d6f7c:	4770      	bx	lr

000d6f7e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d6f7e:	4608      	mov	r0, r1
   d6f80:	b111      	cbz	r1, d6f88 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d6f82:	680b      	ldr	r3, [r1, #0]
   d6f84:	685b      	ldr	r3, [r3, #4]
   d6f86:	4718      	bx	r3
}
   d6f88:	4770      	bx	lr

000d6f8a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d6f8a:	4770      	bx	lr

000d6f8c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6f8c:	4770      	bx	lr

000d6f8e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d6f8e:	4770      	bx	lr

000d6f90 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d6f90:	4770      	bx	lr

000d6f92 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d6f92:	b538      	push	{r3, r4, r5, lr}
   d6f94:	4604      	mov	r4, r0
   d6f96:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d6f98:	6800      	ldr	r0, [r0, #0]
   d6f9a:	212e      	movs	r1, #46	; 0x2e
   d6f9c:	f002 fa83 	bl	d94a6 <strchrnul>
    size = s - category;
   d6fa0:	6823      	ldr	r3, [r4, #0]
   d6fa2:	1ac3      	subs	r3, r0, r3
   d6fa4:	602b      	str	r3, [r5, #0]
    if (size) {
   d6fa6:	b123      	cbz	r3, d6fb2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d6fa8:	7803      	ldrb	r3, [r0, #0]
   d6faa:	b103      	cbz	r3, d6fae <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d6fac:	3001      	adds	r0, #1
   d6fae:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6fb0:	6020      	str	r0, [r4, #0]
}
   d6fb2:	4618      	mov	r0, r3
   d6fb4:	bd38      	pop	{r3, r4, r5, pc}

000d6fb6 <_ZN5spark16JSONStreamWriterD0Ev>:
   d6fb6:	b510      	push	{r4, lr}
   d6fb8:	210c      	movs	r1, #12
   d6fba:	4604      	mov	r4, r0
   d6fbc:	f001 fd86 	bl	d8acc <_ZdlPvj>
   d6fc0:	4620      	mov	r0, r4
   d6fc2:	bd10      	pop	{r4, pc}

000d6fc4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d6fc4:	b510      	push	{r4, lr}
   d6fc6:	2104      	movs	r1, #4
   d6fc8:	4604      	mov	r4, r0
   d6fca:	f001 fd7f 	bl	d8acc <_ZdlPvj>
   d6fce:	4620      	mov	r0, r4
   d6fd0:	bd10      	pop	{r4, pc}

000d6fd2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6fd2:	b510      	push	{r4, lr}
   d6fd4:	2104      	movs	r1, #4
   d6fd6:	4604      	mov	r4, r0
   d6fd8:	f001 fd78 	bl	d8acc <_ZdlPvj>
   d6fdc:	4620      	mov	r0, r4
   d6fde:	bd10      	pop	{r4, pc}

000d6fe0 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d6fe0:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d6fe2:	f002 fa6a 	bl	d94ba <strcmp>
}
   d6fe6:	fab0 f080 	clz	r0, r0
   d6fea:	0940      	lsrs	r0, r0, #5
   d6fec:	bd08      	pop	{r3, pc}

000d6fee <__tcf_1>:
   d6fee:	4770      	bx	lr

000d6ff0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d6ff0:	b510      	push	{r4, lr}
   d6ff2:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d6ff4:	f001 fc02 	bl	d87fc <_Z16_fetch_usbserialv>
   d6ff8:	4284      	cmp	r4, r0
   d6ffa:	d010      	beq.n	d701e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d6ffc:	f001 fb74 	bl	d86e8 <_Z22__fetch_global_Serial1v>
   d7000:	4284      	cmp	r4, r0
   d7002:	d105      	bne.n	d7010 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d7004:	f001 fb70 	bl	d86e8 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d7008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d700c:	f001 bb69 	b.w	d86e2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d7010:	b12c      	cbz	r4, d701e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d7012:	6823      	ldr	r3, [r4, #0]
   d7014:	4620      	mov	r0, r4
   d7016:	685b      	ldr	r3, [r3, #4]
}
   d7018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d701c:	4718      	bx	r3
   d701e:	bd10      	pop	{r4, pc}

000d7020 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d7020:	b513      	push	{r0, r1, r4, lr}
   d7022:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d7024:	4608      	mov	r0, r1
   d7026:	9101      	str	r1, [sp, #4]
   d7028:	f002 fa77 	bl	d951a <strlen>
   d702c:	9901      	ldr	r1, [sp, #4]
   d702e:	4602      	mov	r2, r0
   d7030:	4620      	mov	r0, r4
}
   d7032:	b002      	add	sp, #8
   d7034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d7038:	f7ff bf8c 	b.w	d6f54 <_ZN5spark10JSONWriter5valueEPKcj>

000d703c <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d703c:	b513      	push	{r0, r1, r4, lr}
   d703e:	4604      	mov	r4, r0
    write(str, strlen(str));
   d7040:	4608      	mov	r0, r1
   d7042:	9101      	str	r1, [sp, #4]
   d7044:	f002 fa69 	bl	d951a <strlen>
   d7048:	6823      	ldr	r3, [r4, #0]
   d704a:	9901      	ldr	r1, [sp, #4]
   d704c:	68db      	ldr	r3, [r3, #12]
   d704e:	4602      	mov	r2, r0
   d7050:	4620      	mov	r0, r4
}
   d7052:	b002      	add	sp, #8
   d7054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d7058:	4718      	bx	r3

000d705a <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d705a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d705c:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d705e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d7062:	68db      	ldr	r3, [r3, #12]
   d7064:	2201      	movs	r2, #1
   d7066:	f10d 0107 	add.w	r1, sp, #7
   d706a:	4798      	blx	r3
}
   d706c:	b003      	add	sp, #12
   d706e:	f85d fb04 	ldr.w	pc, [sp], #4

000d7072 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d7072:	b40e      	push	{r1, r2, r3}
   d7074:	b503      	push	{r0, r1, lr}
   d7076:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d7078:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d707a:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d707e:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d7080:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d7082:	f001 f836 	bl	d80f2 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d7086:	b002      	add	sp, #8
   d7088:	f85d eb04 	ldr.w	lr, [sp], #4
   d708c:	b003      	add	sp, #12
   d708e:	4770      	bx	lr

000d7090 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d7090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d7094:	e9d0 9500 	ldrd	r9, r5, [r0]
   d7098:	f04f 0814 	mov.w	r8, #20
   d709c:	fb08 f505 	mul.w	r5, r8, r5
   d70a0:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d70a2:	10ab      	asrs	r3, r5, #2
   d70a4:	4d18      	ldr	r5, [pc, #96]	; (d7108 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d70a6:	4617      	mov	r7, r2
   d70a8:	435d      	muls	r5, r3
   d70aa:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d70ac:	2d00      	cmp	r5, #0
   d70ae:	dd23      	ble.n	d70f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d70b0:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d70b2:	fb08 f006 	mul.w	r0, r8, r6
   d70b6:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d70ba:	463a      	mov	r2, r7
   d70bc:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d70c0:	5820      	ldr	r0, [r4, r0]
   d70c2:	9101      	str	r1, [sp, #4]
   d70c4:	455f      	cmp	r7, fp
   d70c6:	bf28      	it	cs
   d70c8:	465a      	movcs	r2, fp
   d70ca:	f002 fa2e 	bl	d952a <strncmp>
                if (cmp == 0) {
   d70ce:	9901      	ldr	r1, [sp, #4]
   d70d0:	2301      	movs	r3, #1
   d70d2:	b978      	cbnz	r0, d70f4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d70d4:	455f      	cmp	r7, fp
   d70d6:	d103      	bne.n	d70e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d70d8:	9a00      	ldr	r2, [sp, #0]
   d70da:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d70dc:	4635      	mov	r5, r6
   d70de:	e7e5      	b.n	d70ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d70e0:	bf8c      	ite	hi
   d70e2:	2001      	movhi	r0, #1
   d70e4:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d70e6:	2800      	cmp	r0, #0
   d70e8:	d0f8      	beq.n	d70dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d70ea:	1bae      	subs	r6, r5, r6
	      ++__first;
   d70ec:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d70f0:	3e01      	subs	r6, #1
   d70f2:	e7f3      	b.n	d70dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d70f4:	0fc0      	lsrs	r0, r0, #31
   d70f6:	e7f6      	b.n	d70e6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d70f8:	eba4 0409 	sub.w	r4, r4, r9
}
   d70fc:	4802      	ldr	r0, [pc, #8]	; (d7108 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d70fe:	10a4      	asrs	r4, r4, #2
   d7100:	4360      	muls	r0, r4
   d7102:	b003      	add	sp, #12
   d7104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7108:	cccccccd 	.word	0xcccccccd

000d710c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d710c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d710e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d7110:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d7112:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d7114:	b30b      	cbz	r3, d715a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d7116:	b301      	cbz	r1, d715a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d7118:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d711a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d711e:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d7120:	a903      	add	r1, sp, #12
   d7122:	a801      	add	r0, sp, #4
   d7124:	f7ff ff35 	bl	d6f92 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d7128:	4601      	mov	r1, r0
   d712a:	b1b0      	cbz	r0, d715a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d712c:	f10d 030b 	add.w	r3, sp, #11
   d7130:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d7132:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d7136:	4620      	mov	r0, r4
   d7138:	f7ff ffaa 	bl	d7090 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d713c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d7140:	b15b      	cbz	r3, d715a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d7142:	6824      	ldr	r4, [r4, #0]
   d7144:	2314      	movs	r3, #20
   d7146:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d714a:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d714e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d7152:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d7154:	bfa8      	it	ge
   d7156:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d7158:	e7e2      	b.n	d7120 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d715a:	4630      	mov	r0, r6
   d715c:	b004      	add	sp, #16
   d715e:	bd70      	pop	{r4, r5, r6, pc}

000d7160 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d7160:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d7162:	4c09      	ldr	r4, [pc, #36]	; (d7188 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d7164:	7823      	ldrb	r3, [r4, #0]
   d7166:	f3bf 8f5b 	dmb	ish
   d716a:	07db      	lsls	r3, r3, #31
   d716c:	d409      	bmi.n	d7182 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d716e:	4620      	mov	r0, r4
   d7170:	f7fc ffa2 	bl	d40b8 <__cxa_guard_acquire>
   d7174:	b128      	cbz	r0, d7182 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d7176:	4620      	mov	r0, r4
   d7178:	f7fc ffa3 	bl	d40c2 <__cxa_guard_release>
   d717c:	4803      	ldr	r0, [pc, #12]	; (d718c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d717e:	f002 f8f7 	bl	d9370 <atexit>
}
   d7182:	4803      	ldr	r0, [pc, #12]	; (d7190 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d7184:	bd10      	pop	{r4, pc}
   d7186:	bf00      	nop
   d7188:	2003e584 	.word	0x2003e584
   d718c:	000d6f8b 	.word	0x000d6f8b
   d7190:	2003dedc 	.word	0x2003dedc

000d7194 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d7194:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d7196:	4c09      	ldr	r4, [pc, #36]	; (d71bc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d7198:	7823      	ldrb	r3, [r4, #0]
   d719a:	f3bf 8f5b 	dmb	ish
   d719e:	07db      	lsls	r3, r3, #31
   d71a0:	d409      	bmi.n	d71b6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d71a2:	4620      	mov	r0, r4
   d71a4:	f7fc ff88 	bl	d40b8 <__cxa_guard_acquire>
   d71a8:	b128      	cbz	r0, d71b6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d71aa:	4620      	mov	r0, r4
   d71ac:	f7fc ff89 	bl	d40c2 <__cxa_guard_release>
   d71b0:	4803      	ldr	r0, [pc, #12]	; (d71c0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d71b2:	f002 f8dd 	bl	d9370 <atexit>
    return &factory;
}
   d71b6:	4803      	ldr	r0, [pc, #12]	; (d71c4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d71b8:	bd10      	pop	{r4, pc}
   d71ba:	bf00      	nop
   d71bc:	2003e588 	.word	0x2003e588
   d71c0:	000d6fef 	.word	0x000d6fef
   d71c4:	2003dee0 	.word	0x2003dee0

000d71c8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d71c8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d71ca:	2500      	movs	r5, #0
   d71cc:	4604      	mov	r4, r0
   d71ce:	e9c0 5500 	strd	r5, r5, [r0]
   d71d2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d71d6:	6085      	str	r5, [r0, #8]
   d71d8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d71da:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d71de:	f7fe fd89 	bl	d5cf4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d71e2:	f7ff ffbd 	bl	d7160 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d71e6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d71e8:	f7ff ffd4 	bl	d7194 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d71ec:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d71ee:	6220      	str	r0, [r4, #32]
}
   d71f0:	4620      	mov	r0, r4
   d71f2:	bd38      	pop	{r3, r4, r5, pc}

000d71f4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d71f4:	b510      	push	{r4, lr}
    static LogManager mgr;
   d71f6:	4c0a      	ldr	r4, [pc, #40]	; (d7220 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d71f8:	7823      	ldrb	r3, [r4, #0]
   d71fa:	f3bf 8f5b 	dmb	ish
   d71fe:	07db      	lsls	r3, r3, #31
   d7200:	d40c      	bmi.n	d721c <_ZN5spark10LogManager8instanceEv+0x28>
   d7202:	4620      	mov	r0, r4
   d7204:	f7fc ff58 	bl	d40b8 <__cxa_guard_acquire>
   d7208:	b140      	cbz	r0, d721c <_ZN5spark10LogManager8instanceEv+0x28>
   d720a:	4806      	ldr	r0, [pc, #24]	; (d7224 <_ZN5spark10LogManager8instanceEv+0x30>)
   d720c:	f7ff ffdc 	bl	d71c8 <_ZN5spark10LogManagerC1Ev>
   d7210:	4620      	mov	r0, r4
   d7212:	f7fc ff56 	bl	d40c2 <__cxa_guard_release>
   d7216:	4804      	ldr	r0, [pc, #16]	; (d7228 <_ZN5spark10LogManager8instanceEv+0x34>)
   d7218:	f002 f8aa 	bl	d9370 <atexit>
    return &mgr;
}
   d721c:	4801      	ldr	r0, [pc, #4]	; (d7224 <_ZN5spark10LogManager8instanceEv+0x30>)
   d721e:	bd10      	pop	{r4, pc}
   d7220:	2003e580 	.word	0x2003e580
   d7224:	2003e590 	.word	0x2003e590
   d7228:	000d76d5 	.word	0x000d76d5

000d722c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d722c:	4a02      	ldr	r2, [pc, #8]	; (d7238 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d722e:	4903      	ldr	r1, [pc, #12]	; (d723c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d7230:	4803      	ldr	r0, [pc, #12]	; (d7240 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d7232:	2300      	movs	r3, #0
   d7234:	f7fe bf36 	b.w	d60a4 <log_set_callbacks>
   d7238:	000d755d 	.word	0x000d755d
   d723c:	000d74e9 	.word	0x000d74e9
   d7240:	000d7469 	.word	0x000d7469

000d7244 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d7244:	2300      	movs	r3, #0
   d7246:	461a      	mov	r2, r3
   d7248:	4619      	mov	r1, r3
   d724a:	4618      	mov	r0, r3
   d724c:	f7fe bf2a 	b.w	d60a4 <log_set_callbacks>

000d7250 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7250:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d7252:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7254:	f851 3b04 	ldr.w	r3, [r1], #4
   d7258:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d725a:	4604      	mov	r4, r0
   d725c:	a801      	add	r0, sp, #4
   d725e:	f7ff f876 	bl	d634e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d7262:	466a      	mov	r2, sp
   d7264:	4629      	mov	r1, r5
   d7266:	4620      	mov	r0, r4
   d7268:	f7ff fd1f 	bl	d6caa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d726c:	a801      	add	r0, sp, #4
   d726e:	f7fd f891 	bl	d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7272:	4620      	mov	r0, r4
   d7274:	b003      	add	sp, #12
   d7276:	bd30      	pop	{r4, r5, pc}

000d7278 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d7278:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d727a:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d727c:	f851 3b04 	ldr.w	r3, [r1], #4
   d7280:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d7282:	4604      	mov	r4, r0
   d7284:	a801      	add	r0, sp, #4
   d7286:	f7ff f862 	bl	d634e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d728a:	466a      	mov	r2, sp
   d728c:	4629      	mov	r1, r5
   d728e:	4620      	mov	r0, r4
   d7290:	f7ff fd86 	bl	d6da0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7294:	a801      	add	r0, sp, #4
   d7296:	f7fd f87d 	bl	d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d729a:	4620      	mov	r0, r4
   d729c:	b003      	add	sp, #12
   d729e:	bd30      	pop	{r4, r5, pc}

000d72a0 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d72a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d72a2:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d72a4:	f851 3b04 	ldr.w	r3, [r1], #4
   d72a8:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d72aa:	4604      	mov	r4, r0
   d72ac:	a801      	add	r0, sp, #4
   d72ae:	f7ff f84e 	bl	d634e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d72b2:	466a      	mov	r2, sp
   d72b4:	4629      	mov	r1, r5
   d72b6:	4620      	mov	r0, r4
   d72b8:	f7ff fd4e 	bl	d6d58 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d72bc:	a801      	add	r0, sp, #4
   d72be:	f7fd f869 	bl	d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d72c2:	4620      	mov	r0, r4
   d72c4:	b003      	add	sp, #12
   d72c6:	bd30      	pop	{r4, r5, pc}

000d72c8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d72c8:	b570      	push	{r4, r5, r6, lr}
   d72ca:	b08a      	sub	sp, #40	; 0x28
   d72cc:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d72ce:	4601      	mov	r1, r0
   d72d0:	a804      	add	r0, sp, #16
   d72d2:	f7ff ffd1 	bl	d7278 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d72d6:	4e14      	ldr	r6, [pc, #80]	; (d7328 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d72d8:	a804      	add	r0, sp, #16
   d72da:	f7ff fd79 	bl	d6dd0 <_ZN5spark18JSONObjectIterator4nextEv>
   d72de:	b1e8      	cbz	r0, d731c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d72e0:	a904      	add	r1, sp, #16
   d72e2:	4668      	mov	r0, sp
   d72e4:	f7ff ffdc 	bl	d72a0 <_ZNK5spark18JSONObjectIterator4nameEv>
   d72e8:	9802      	ldr	r0, [sp, #8]
   d72ea:	4631      	mov	r1, r6
   d72ec:	f7ff fe78 	bl	d6fe0 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d72f0:	4604      	mov	r4, r0
   d72f2:	b110      	cbz	r0, d72fa <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d72f4:	1e2c      	subs	r4, r5, #0
   d72f6:	bf18      	it	ne
   d72f8:	2401      	movne	r4, #1
   d72fa:	a801      	add	r0, sp, #4
   d72fc:	f7fd f84a 	bl	d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7300:	2c00      	cmp	r4, #0
   d7302:	d0e9      	beq.n	d72d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d7304:	a904      	add	r1, sp, #16
   d7306:	4668      	mov	r0, sp
   d7308:	f7ff ffa2 	bl	d7250 <_ZNK5spark18JSONObjectIterator5valueEv>
   d730c:	4668      	mov	r0, sp
   d730e:	f7ff fd02 	bl	d6d16 <_ZNK5spark9JSONValue5toIntEv>
   d7312:	6028      	str	r0, [r5, #0]
   d7314:	a801      	add	r0, sp, #4
   d7316:	f7fd f83d 	bl	d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d731a:	e7dd      	b.n	d72d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d731c:	a805      	add	r0, sp, #20
   d731e:	f7fd f839 	bl	d4394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7322:	b00a      	add	sp, #40	; 0x28
   d7324:	bd70      	pop	{r4, r5, r6, pc}
   d7326:	bf00      	nop
   d7328:	000d9cc5 	.word	0x000d9cc5

000d732c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d732c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d732e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d7330:	4620      	mov	r0, r4
   d7332:	4912      	ldr	r1, [pc, #72]	; (d737c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d7334:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d7336:	f002 f8c0 	bl	d94ba <strcmp>
   d733a:	b948      	cbnz	r0, d7350 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d733c:	f001 fa5e 	bl	d87fc <_Z16_fetch_usbserialv>
   d7340:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d7344:	f001 fa48 	bl	d87d8 <_ZN9USBSerial5beginEl>
        return &Serial;
   d7348:	f001 fa58 	bl	d87fc <_Z16_fetch_usbserialv>
}
   d734c:	b003      	add	sp, #12
   d734e:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d7350:	490b      	ldr	r1, [pc, #44]	; (d7380 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d7352:	4620      	mov	r0, r4
   d7354:	f002 f8b1 	bl	d94ba <strcmp>
   d7358:	b970      	cbnz	r0, d7378 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d735a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d735e:	a901      	add	r1, sp, #4
   d7360:	4628      	mov	r0, r5
        int baud = 9600;
   d7362:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d7364:	f7ff ffb0 	bl	d72c8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d7368:	f001 f9be 	bl	d86e8 <_Z22__fetch_global_Serial1v>
   d736c:	9901      	ldr	r1, [sp, #4]
   d736e:	f001 f9b5 	bl	d86dc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d7372:	f001 f9b9 	bl	d86e8 <_Z22__fetch_global_Serial1v>
   d7376:	e7e9      	b.n	d734c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d7378:	2000      	movs	r0, #0
   d737a:	e7e7      	b.n	d734c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d737c:	000d9cca 	.word	0x000d9cca
   d7380:	000d9cd1 	.word	0x000d9cd1

000d7384 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7384:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7386:	e9d0 5300 	ldrd	r5, r3, [r0]
   d738a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d738c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d738e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d7392:	42ae      	cmp	r6, r5
   d7394:	d005      	beq.n	d73a2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d7396:	f105 0008 	add.w	r0, r5, #8
   d739a:	f7ff fff3 	bl	d7384 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d739e:	3514      	adds	r5, #20
   d73a0:	e7f7      	b.n	d7392 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d73a2:	6820      	ldr	r0, [r4, #0]
   d73a4:	f7fe ff74 	bl	d6290 <free>
}
   d73a8:	4620      	mov	r0, r4
   d73aa:	bd70      	pop	{r4, r5, r6, pc}

000d73ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d73ac:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d73ae:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d73b2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d73b4:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d73b8:	42ae      	cmp	r6, r5
   d73ba:	d004      	beq.n	d73c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d73bc:	4628      	mov	r0, r5
   d73be:	f000 ffa5 	bl	d830c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d73c2:	3510      	adds	r5, #16
   d73c4:	e7f8      	b.n	d73b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d73c6:	6820      	ldr	r0, [r4, #0]
   d73c8:	f7fe ff62 	bl	d6290 <free>
}
   d73cc:	4620      	mov	r0, r4
   d73ce:	bd70      	pop	{r4, r5, r6, pc}

000d73d0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d73d0:	b510      	push	{r4, lr}
   d73d2:	4604      	mov	r4, r0
   d73d4:	300c      	adds	r0, #12
   d73d6:	f7ff ffd5 	bl	d7384 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d73da:	4620      	mov	r0, r4
   d73dc:	f7ff ffe6 	bl	d73ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d73e0:	4620      	mov	r0, r4
   d73e2:	bd10      	pop	{r4, pc}

000d73e4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d73e4:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d73e6:	4b04      	ldr	r3, [pc, #16]	; (d73f8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d73e8:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d73ea:	f840 3b04 	str.w	r3, [r0], #4
   d73ee:	f7ff ffef 	bl	d73d0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d73f2:	4620      	mov	r0, r4
   d73f4:	bd10      	pop	{r4, pc}
   d73f6:	bf00      	nop
   d73f8:	000d9938 	.word	0x000d9938

000d73fc <_ZN5spark16StreamLogHandlerD0Ev>:
   d73fc:	b510      	push	{r4, lr}
   d73fe:	4604      	mov	r4, r0
   d7400:	f7ff fff0 	bl	d73e4 <_ZN5spark16StreamLogHandlerD1Ev>
   d7404:	4620      	mov	r0, r4
   d7406:	2124      	movs	r1, #36	; 0x24
   d7408:	f001 fb60 	bl	d8acc <_ZdlPvj>
   d740c:	4620      	mov	r0, r4
   d740e:	bd10      	pop	{r4, pc}

000d7410 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d7410:	b510      	push	{r4, lr}
   d7412:	4b03      	ldr	r3, [pc, #12]	; (d7420 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d7414:	6003      	str	r3, [r0, #0]
   d7416:	4604      	mov	r4, r0
   d7418:	f7ff ffe4 	bl	d73e4 <_ZN5spark16StreamLogHandlerD1Ev>
   d741c:	4620      	mov	r0, r4
   d741e:	bd10      	pop	{r4, pc}
   d7420:	000d9d70 	.word	0x000d9d70

000d7424 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d7424:	b510      	push	{r4, lr}
   d7426:	4604      	mov	r4, r0
   d7428:	f7ff fff2 	bl	d7410 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d742c:	4620      	mov	r0, r4
   d742e:	2124      	movs	r1, #36	; 0x24
   d7430:	f001 fb4c 	bl	d8acc <_ZdlPvj>
   d7434:	4620      	mov	r0, r4
   d7436:	bd10      	pop	{r4, pc}

000d7438 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d7438:	2200      	movs	r2, #0
   d743a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d743e:	b510      	push	{r4, lr}
        capacity_(0) {
   d7440:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7442:	680c      	ldr	r4, [r1, #0]
   d7444:	6004      	str	r4, [r0, #0]
   d7446:	684c      	ldr	r4, [r1, #4]
   d7448:	6044      	str	r4, [r0, #4]
   d744a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d744c:	600a      	str	r2, [r1, #0]
   d744e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7450:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7452:	608a      	str	r2, [r1, #8]
}
   d7454:	bd10      	pop	{r4, pc}

000d7456 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7456:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d7458:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d745a:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d745c:	6818      	ldr	r0, [r3, #0]
   d745e:	f7fe fc61 	bl	d5d24 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d7462:	4620      	mov	r0, r4
   d7464:	bd10      	pop	{r4, pc}
	...

000d7468 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d7468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d746c:	b087      	sub	sp, #28
   d746e:	4680      	mov	r8, r0
   d7470:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d7472:	4b1c      	ldr	r3, [pc, #112]	; (d74e4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d7474:	685b      	ldr	r3, [r3, #4]
   d7476:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d747a:	4689      	mov	r9, r1
   d747c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d747e:	b96b      	cbnz	r3, d749c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d7480:	f7ff feb8 	bl	d71f4 <_ZN5spark10LogManager8instanceEv>
   d7484:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d7486:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d748a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d748c:	9305      	str	r3, [sp, #20]
   d748e:	f7fe fc41 	bl	d5d14 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d7492:	7b23      	ldrb	r3, [r4, #12]
   d7494:	b12b      	cbz	r3, d74a2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d7496:	a805      	add	r0, sp, #20
   d7498:	f7ff ffdd 	bl	d7456 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d749c:	b007      	add	sp, #28
   d749e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d74a2:	2301      	movs	r3, #1
   d74a4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d74a6:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d74aa:	fa5f f989 	uxtb.w	r9, r9
   d74ae:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d74b2:	45aa      	cmp	sl, r5
   d74b4:	d012      	beq.n	d74dc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d74b6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d74ba:	4631      	mov	r1, r6
   d74bc:	1d38      	adds	r0, r7, #4
   d74be:	f7ff fe25 	bl	d710c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d74c2:	4581      	cmp	r9, r0
   d74c4:	d3f5      	bcc.n	d74b2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d74c6:	683b      	ldr	r3, [r7, #0]
   d74c8:	9a03      	ldr	r2, [sp, #12]
   d74ca:	9200      	str	r2, [sp, #0]
   d74cc:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d74d0:	464a      	mov	r2, r9
   d74d2:	4633      	mov	r3, r6
   d74d4:	4641      	mov	r1, r8
   d74d6:	4638      	mov	r0, r7
   d74d8:	47d8      	blx	fp
   d74da:	e7ea      	b.n	d74b2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d74dc:	2300      	movs	r3, #0
   d74de:	7323      	strb	r3, [r4, #12]
   d74e0:	e7d9      	b.n	d7496 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d74e2:	bf00      	nop
   d74e4:	e000ed00 	.word	0xe000ed00

000d74e8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d74e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d74ec:	469b      	mov	fp, r3
   d74ee:	4b1a      	ldr	r3, [pc, #104]	; (d7558 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d74f0:	685b      	ldr	r3, [r3, #4]
   d74f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d74f6:	4680      	mov	r8, r0
   d74f8:	4689      	mov	r9, r1
   d74fa:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d74fc:	b96b      	cbnz	r3, d751a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d74fe:	f7ff fe79 	bl	d71f4 <_ZN5spark10LogManager8instanceEv>
   d7502:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d7504:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d7508:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d750a:	9301      	str	r3, [sp, #4]
   d750c:	f7fe fc02 	bl	d5d14 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d7510:	7b23      	ldrb	r3, [r4, #12]
   d7512:	b12b      	cbz	r3, d7520 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d7514:	a801      	add	r0, sp, #4
   d7516:	f7ff ff9e 	bl	d7456 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d751a:	b003      	add	sp, #12
   d751c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d7520:	2301      	movs	r3, #1
   d7522:	7323      	strb	r3, [r4, #12]
   d7524:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d7528:	b2f6      	uxtb	r6, r6
   d752a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d752e:	4555      	cmp	r5, sl
   d7530:	d00e      	beq.n	d7550 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d7532:	f855 7b04 	ldr.w	r7, [r5], #4
   d7536:	4659      	mov	r1, fp
   d7538:	1d38      	adds	r0, r7, #4
   d753a:	f7ff fde7 	bl	d710c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d753e:	4286      	cmp	r6, r0
   d7540:	d3f5      	bcc.n	d752e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d7542:	683b      	ldr	r3, [r7, #0]
   d7544:	464a      	mov	r2, r9
   d7546:	68db      	ldr	r3, [r3, #12]
   d7548:	4641      	mov	r1, r8
   d754a:	4638      	mov	r0, r7
   d754c:	4798      	blx	r3
   d754e:	e7ee      	b.n	d752e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d7550:	2300      	movs	r3, #0
   d7552:	7323      	strb	r3, [r4, #12]
   d7554:	e7de      	b.n	d7514 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d7556:	bf00      	nop
   d7558:	e000ed00 	.word	0xe000ed00

000d755c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d755c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7560:	4b16      	ldr	r3, [pc, #88]	; (d75bc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d7562:	685b      	ldr	r3, [r3, #4]
   d7564:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d7568:	4605      	mov	r5, r0
   d756a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d756c:	bb1b      	cbnz	r3, d75b6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d756e:	f7ff fe41 	bl	d71f4 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d7572:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d7576:	4604      	mov	r4, r0
   d7578:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d757a:	9301      	str	r3, [sp, #4]
   d757c:	f7fe fbca 	bl	d5d14 <os_mutex_recursive_lock>
   d7580:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d7584:	2446      	movs	r4, #70	; 0x46
   d7586:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d758a:	45b0      	cmp	r8, r6
   d758c:	d109      	bne.n	d75a2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d758e:	a801      	add	r0, sp, #4
   d7590:	f7ff ff61 	bl	d7456 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d7594:	42a5      	cmp	r5, r4
   d7596:	bfb4      	ite	lt
   d7598:	2000      	movlt	r0, #0
   d759a:	2001      	movge	r0, #1
}
   d759c:	b002      	add	sp, #8
   d759e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d75a2:	f856 0b04 	ldr.w	r0, [r6], #4
   d75a6:	4639      	mov	r1, r7
   d75a8:	3004      	adds	r0, #4
   d75aa:	f7ff fdaf 	bl	d710c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d75ae:	4284      	cmp	r4, r0
   d75b0:	bfa8      	it	ge
   d75b2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d75b4:	e7e9      	b.n	d758a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d75b6:	2000      	movs	r0, #0
   d75b8:	e7f0      	b.n	d759c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d75ba:	bf00      	nop
   d75bc:	e000ed00 	.word	0xe000ed00

000d75c0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d75c0:	b570      	push	{r4, r5, r6, lr}
   d75c2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d75c4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d75c8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d75ca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d75ce:	4282      	cmp	r2, r0
   d75d0:	d007      	beq.n	d75e2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d75d2:	4601      	mov	r1, r0
            if (*p == value) {
   d75d4:	681d      	ldr	r5, [r3, #0]
   d75d6:	f851 6b04 	ldr.w	r6, [r1], #4
   d75da:	42ae      	cmp	r6, r5
   d75dc:	d003      	beq.n	d75e6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d75de:	4608      	mov	r0, r1
   d75e0:	e7f5      	b.n	d75ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d75e2:	2000      	movs	r0, #0
}
   d75e4:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d75e6:	1a52      	subs	r2, r2, r1
   d75e8:	f001 fed6 	bl	d9398 <memmove>
    --size_;
   d75ec:	6863      	ldr	r3, [r4, #4]
   d75ee:	3b01      	subs	r3, #1
   d75f0:	6063      	str	r3, [r4, #4]
    return true;
   d75f2:	2001      	movs	r0, #1
   d75f4:	e7f6      	b.n	d75e4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d75f6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d75f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d75f8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d75fc:	4604      	mov	r4, r0
   d75fe:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7600:	9101      	str	r1, [sp, #4]
   d7602:	9303      	str	r3, [sp, #12]
   d7604:	f7fe fb86 	bl	d5d14 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d7608:	a901      	add	r1, sp, #4
   d760a:	4620      	mov	r0, r4
   d760c:	f7ff ffd8 	bl	d75c0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d7610:	b118      	cbz	r0, d761a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d7612:	6863      	ldr	r3, [r4, #4]
   d7614:	b90b      	cbnz	r3, d761a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d7616:	f7ff fe15 	bl	d7244 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d761a:	a803      	add	r0, sp, #12
   d761c:	f7ff ff1b 	bl	d7456 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d7620:	b004      	add	sp, #16
   d7622:	bd10      	pop	{r4, pc}

000d7624 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d7624:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d7626:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d762a:	2318      	movs	r3, #24
   d762c:	4604      	mov	r4, r0
   d762e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d7632:	42ae      	cmp	r6, r5
   d7634:	d015      	beq.n	d7662 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d7636:	f105 0110 	add.w	r1, r5, #16
   d763a:	4620      	mov	r0, r4
   d763c:	f7ff ffc0 	bl	d75c0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d7640:	6863      	ldr	r3, [r4, #4]
   d7642:	b90b      	cbnz	r3, d7648 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d7644:	f7ff fdfe 	bl	d7244 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d7648:	69e0      	ldr	r0, [r4, #28]
   d764a:	6929      	ldr	r1, [r5, #16]
   d764c:	6803      	ldr	r3, [r0, #0]
   d764e:	68db      	ldr	r3, [r3, #12]
   d7650:	4798      	blx	r3
        if (h.stream) {
   d7652:	6969      	ldr	r1, [r5, #20]
   d7654:	b119      	cbz	r1, d765e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d7656:	6a20      	ldr	r0, [r4, #32]
   d7658:	6803      	ldr	r3, [r0, #0]
   d765a:	68db      	ldr	r3, [r3, #12]
   d765c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d765e:	3518      	adds	r5, #24
   d7660:	e7e7      	b.n	d7632 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d7662:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d7666:	2618      	movs	r6, #24
   d7668:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d766c:	42ae      	cmp	r6, r5
   d766e:	d004      	beq.n	d767a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d7670:	4628      	mov	r0, r5
   d7672:	f000 fe4b 	bl	d830c <_ZN6StringD1Ev>
   d7676:	3518      	adds	r5, #24
   d7678:	e7f8      	b.n	d766c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d767a:	2300      	movs	r3, #0
   d767c:	6163      	str	r3, [r4, #20]
}
   d767e:	bd70      	pop	{r4, r5, r6, pc}

000d7680 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d7680:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7682:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d7684:	f7ff fdde 	bl	d7244 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7688:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d768c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d768e:	9301      	str	r3, [sp, #4]
   d7690:	f7fe fb40 	bl	d5d14 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d7694:	4620      	mov	r0, r4
   d7696:	f7ff ffc5 	bl	d7624 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d769a:	a801      	add	r0, sp, #4
   d769c:	f7ff fedb 	bl	d7456 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d76a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d76a2:	b108      	cbz	r0, d76a8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d76a4:	f7fe fb2e 	bl	d5d04 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d76a8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d76ac:	2618      	movs	r6, #24
   d76ae:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d76b2:	42ae      	cmp	r6, r5
   d76b4:	d004      	beq.n	d76c0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d76b6:	4628      	mov	r0, r5
   d76b8:	f000 fe28 	bl	d830c <_ZN6StringD1Ev>
   d76bc:	3518      	adds	r5, #24
   d76be:	e7f8      	b.n	d76b2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d76c0:	6920      	ldr	r0, [r4, #16]
   d76c2:	f7fe fde5 	bl	d6290 <free>
   d76c6:	6820      	ldr	r0, [r4, #0]
   d76c8:	f7fe fde2 	bl	d6290 <free>
}
   d76cc:	4620      	mov	r0, r4
   d76ce:	b002      	add	sp, #8
   d76d0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d76d4 <__tcf_2>:
    static LogManager mgr;
   d76d4:	4801      	ldr	r0, [pc, #4]	; (d76dc <__tcf_2+0x8>)
   d76d6:	f7ff bfd3 	b.w	d7680 <_ZN5spark10LogManagerD1Ev>
   d76da:	bf00      	nop
   d76dc:	2003e590 	.word	0x2003e590

000d76e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d76e0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d76e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d76e4:	4606      	mov	r6, r0
   d76e6:	460c      	mov	r4, r1
   d76e8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d76ea:	d927      	bls.n	d773c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d76ec:	4290      	cmp	r0, r2
   d76ee:	d226      	bcs.n	d773e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d76f0:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d76f4:	1a6c      	subs	r4, r5, r1
   d76f6:	f1a1 0714 	sub.w	r7, r1, #20
   d76fa:	4404      	add	r4, r0
        capacity_(0) {
   d76fc:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d76fe:	42af      	cmp	r7, r5
   d7700:	d03d      	beq.n	d777e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d7702:	b1a4      	cbz	r4, d772e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d7704:	682b      	ldr	r3, [r5, #0]
   d7706:	6023      	str	r3, [r4, #0]
   d7708:	88ab      	ldrh	r3, [r5, #4]
   d770a:	80a3      	strh	r3, [r4, #4]
   d770c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d7710:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d7712:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d7716:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7718:	68ab      	ldr	r3, [r5, #8]
   d771a:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d771c:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d771e:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7720:	68ea      	ldr	r2, [r5, #12]
   d7722:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7724:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7726:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7728:	692a      	ldr	r2, [r5, #16]
   d772a:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d772c:	612b      	str	r3, [r5, #16]
   d772e:	f105 0008 	add.w	r0, r5, #8
   d7732:	f7ff fe27 	bl	d7384 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d7736:	3d14      	subs	r5, #20
   d7738:	3c14      	subs	r4, #20
   d773a:	e7e0      	b.n	d76fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d773c:	d01f      	beq.n	d777e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d773e:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d7740:	42ac      	cmp	r4, r5
   d7742:	d01c      	beq.n	d777e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d7744:	b1a6      	cbz	r6, d7770 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d7746:	6823      	ldr	r3, [r4, #0]
   d7748:	6033      	str	r3, [r6, #0]
   d774a:	88a3      	ldrh	r3, [r4, #4]
   d774c:	80b3      	strh	r3, [r6, #4]
   d774e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d7752:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d7754:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d7758:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d775a:	68a3      	ldr	r3, [r4, #8]
   d775c:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d775e:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7760:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7762:	68e2      	ldr	r2, [r4, #12]
   d7764:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7766:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7768:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d776a:	6922      	ldr	r2, [r4, #16]
   d776c:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d776e:	6123      	str	r3, [r4, #16]
   d7770:	f104 0008 	add.w	r0, r4, #8
   d7774:	f7ff fe06 	bl	d7384 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d7778:	3414      	adds	r4, #20
   d777a:	3614      	adds	r6, #20
   d777c:	e7e0      	b.n	d7740 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d777e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7780 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7782:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d7786:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7788:	4604      	mov	r4, r0
   d778a:	460e      	mov	r6, r1
   d778c:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d778e:	db0d      	blt.n	d77ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d7790:	3501      	adds	r5, #1
        if (n > 0) {
   d7792:	2d00      	cmp	r5, #0
   d7794:	6800      	ldr	r0, [r0, #0]
   d7796:	dd04      	ble.n	d77a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d7798:	00a9      	lsls	r1, r5, #2
   d779a:	f7fe fd81 	bl	d62a0 <realloc>
            if (!d) {
   d779e:	b918      	cbnz	r0, d77a8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d77a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d77a2:	f7fe fd75 	bl	d6290 <free>
        T* d = nullptr;
   d77a6:	2000      	movs	r0, #0
        data_ = d;
   d77a8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d77aa:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d77ac:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d77ae:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d77b0:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d77b4:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d77b6:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d77ba:	1d08      	adds	r0, r1, #4
   d77bc:	f001 fdec 	bl	d9398 <memmove>
    new(p) T(std::move(value));
   d77c0:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d77c4:	6863      	ldr	r3, [r4, #4]
   d77c6:	3301      	adds	r3, #1
   d77c8:	6063      	str	r3, [r4, #4]
    return true;
   d77ca:	2001      	movs	r0, #1
   d77cc:	e7e8      	b.n	d77a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d77ce <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d77ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d77d0:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d77d4:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d77d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d77d8:	9301      	str	r3, [sp, #4]
   d77da:	460d      	mov	r5, r1
   d77dc:	f7fe fa9a 	bl	d5d14 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d77e0:	e9d4 3100 	ldrd	r3, r1, [r4]
   d77e4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d77e8:	4283      	cmp	r3, r0
   d77ea:	461a      	mov	r2, r3
   d77ec:	d00b      	beq.n	d7806 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d77ee:	6812      	ldr	r2, [r2, #0]
   d77f0:	42aa      	cmp	r2, r5
   d77f2:	f103 0304 	add.w	r3, r3, #4
   d77f6:	d1f7      	bne.n	d77e8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d77f8:	a801      	add	r0, sp, #4
   d77fa:	f7ff fe2c 	bl	d7456 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d77fe:	2500      	movs	r5, #0
}
   d7800:	4628      	mov	r0, r5
   d7802:	b003      	add	sp, #12
   d7804:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d7806:	462a      	mov	r2, r5
   d7808:	4620      	mov	r0, r4
   d780a:	f7ff ffb9 	bl	d7780 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d780e:	4605      	mov	r5, r0
   d7810:	2800      	cmp	r0, #0
   d7812:	d0f1      	beq.n	d77f8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d7814:	6863      	ldr	r3, [r4, #4]
   d7816:	2b01      	cmp	r3, #1
   d7818:	d101      	bne.n	d781e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d781a:	f7ff fd07 	bl	d722c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d781e:	a801      	add	r0, sp, #4
   d7820:	f7ff fe19 	bl	d7456 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d7824:	e7ec      	b.n	d7800 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d7826 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d7826:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d782a:	4604      	mov	r4, r0
   d782c:	460d      	mov	r5, r1
   d782e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7830:	d914      	bls.n	d785c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d7832:	4290      	cmp	r0, r2
   d7834:	d213      	bcs.n	d785e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d7836:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d783a:	1a75      	subs	r5, r6, r1
   d783c:	f1a1 0710 	sub.w	r7, r1, #16
   d7840:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7842:	42b7      	cmp	r7, r6
   d7844:	d018      	beq.n	d7878 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d7846:	b11c      	cbz	r4, d7850 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d7848:	4631      	mov	r1, r6
   d784a:	4620      	mov	r0, r4
   d784c:	f000 fdda 	bl	d8404 <_ZN6StringC1EOS_>
                end->~T();
   d7850:	4630      	mov	r0, r6
   d7852:	f000 fd5b 	bl	d830c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d7856:	3e10      	subs	r6, #16
   d7858:	3c10      	subs	r4, #16
   d785a:	e7f2      	b.n	d7842 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d785c:	d00c      	beq.n	d7878 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d785e:	42b5      	cmp	r5, r6
   d7860:	d00a      	beq.n	d7878 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d7862:	b11c      	cbz	r4, d786c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d7864:	4629      	mov	r1, r5
   d7866:	4620      	mov	r0, r4
   d7868:	f000 fdcc 	bl	d8404 <_ZN6StringC1EOS_>
                p->~T();
   d786c:	4628      	mov	r0, r5
   d786e:	f000 fd4d 	bl	d830c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d7872:	3510      	adds	r5, #16
   d7874:	3410      	adds	r4, #16
   d7876:	e7f2      	b.n	d785e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d7878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d787a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d787a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d787c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d787e:	4605      	mov	r5, r0
        if (n > 0) {
   d7880:	dd11      	ble.n	d78a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7882:	0130      	lsls	r0, r6, #4
   d7884:	f7fe fcfc 	bl	d6280 <malloc>
            if (!d) {
   d7888:	4604      	mov	r4, r0
   d788a:	b158      	cbz	r0, d78a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d788c:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7890:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d7894:	f7ff ffc7 	bl	d7826 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d7898:	6828      	ldr	r0, [r5, #0]
   d789a:	f7fe fcf9 	bl	d6290 <free>
        data_ = d;
   d789e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d78a0:	60ae      	str	r6, [r5, #8]
        return true;
   d78a2:	2001      	movs	r0, #1
    }
   d78a4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d78a6:	2400      	movs	r4, #0
   d78a8:	e7f6      	b.n	d7898 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d78aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d78aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d78ae:	4691      	mov	r9, r2
   d78b0:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d78b2:	2300      	movs	r3, #0
   d78b4:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d78b6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d78ba:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d78bc:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d78be:	4299      	cmp	r1, r3
        capacity_(0) {
   d78c0:	e9c0 3300 	strd	r3, r3, [r0]
   d78c4:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d78c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d78cc:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d78d0:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d78d2:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d78d4:	dc23      	bgt.n	d791e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d78d6:	e9d9 5700 	ldrd	r5, r7, [r9]
   d78da:	2314      	movs	r3, #20
   d78dc:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d78e0:	42af      	cmp	r7, r5
   d78e2:	d03b      	beq.n	d795c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d78e4:	4629      	mov	r1, r5
   d78e6:	a80d      	add	r0, sp, #52	; 0x34
   d78e8:	f000 fd8c 	bl	d8404 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d78ec:	a90d      	add	r1, sp, #52	; 0x34
   d78ee:	a811      	add	r0, sp, #68	; 0x44
   d78f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d78f2:	f000 fd87 	bl	d8404 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d78f6:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d78fa:	4299      	cmp	r1, r3
   d78fc:	da1b      	bge.n	d7936 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d78fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d7900:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d7902:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d7906:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d790a:	4631      	mov	r1, r6
   d790c:	f106 0010 	add.w	r0, r6, #16
   d7910:	f7ff ff89 	bl	d7826 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d7914:	b9ee      	cbnz	r6, d7952 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d7916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d7918:	3301      	adds	r3, #1
   d791a:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d791c:	e011      	b.n	d7942 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d791e:	a80a      	add	r0, sp, #40	; 0x28
   d7920:	f7ff ffab 	bl	d787a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7924:	2800      	cmp	r0, #0
   d7926:	d1d6      	bne.n	d78d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d7928:	a80a      	add	r0, sp, #40	; 0x28
   d792a:	f7ff fd3f 	bl	d73ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d792e:	4620      	mov	r0, r4
   d7930:	b017      	add	sp, #92	; 0x5c
   d7932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7936:	3101      	adds	r1, #1
   d7938:	a80a      	add	r0, sp, #40	; 0x28
   d793a:	f7ff ff9e 	bl	d787a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d793e:	2800      	cmp	r0, #0
   d7940:	d1dd      	bne.n	d78fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d7942:	a811      	add	r0, sp, #68	; 0x44
   d7944:	f000 fce2 	bl	d830c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d7948:	a80d      	add	r0, sp, #52	; 0x34
   d794a:	f000 fcdf 	bl	d830c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d794e:	3514      	adds	r5, #20
   d7950:	e7c6      	b.n	d78e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d7952:	a911      	add	r1, sp, #68	; 0x44
   d7954:	4630      	mov	r0, r6
   d7956:	f000 fd55 	bl	d8404 <_ZN6StringC1EOS_>
   d795a:	e7dc      	b.n	d7916 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d795c:	2600      	movs	r6, #0
   d795e:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d7962:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d7964:	4637      	mov	r7, r6
   d7966:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d796a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d796e:	429e      	cmp	r6, r3
   d7970:	f280 8097 	bge.w	d7aa2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d7974:	0133      	lsls	r3, r6, #4
   d7976:	58d3      	ldr	r3, [r2, r3]
   d7978:	9308      	str	r3, [sp, #32]
        if (!category) {
   d797a:	b90b      	cbnz	r3, d7980 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d797c:	3601      	adds	r6, #1
   d797e:	e7f4      	b.n	d796a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d7980:	fb0a f306 	mul.w	r3, sl, r6
   d7984:	9709      	str	r7, [sp, #36]	; 0x24
   d7986:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d7988:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d798a:	a909      	add	r1, sp, #36	; 0x24
   d798c:	a808      	add	r0, sp, #32
   d798e:	f7ff fb00 	bl	d6f92 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d7992:	4683      	mov	fp, r0
   d7994:	2800      	cmp	r0, #0
   d7996:	d0f1      	beq.n	d797c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d7998:	4601      	mov	r1, r0
   d799a:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d799c:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d79a0:	f10d 031f 	add.w	r3, sp, #31
   d79a4:	4628      	mov	r0, r5
   d79a6:	f7ff fb73 	bl	d7090 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d79aa:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d79ae:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d79b0:	f1b8 0f00 	cmp.w	r8, #0
   d79b4:	d166      	bne.n	d7a84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d79b6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d79ba:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d79be:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d79c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d79c6:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d79ca:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d79ce:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d79d2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d79d6:	4293      	cmp	r3, r2
   d79d8:	db1a      	blt.n	d7a10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d79da:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d79de:	f1bb 0f00 	cmp.w	fp, #0
   d79e2:	dd4a      	ble.n	d7a7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d79e4:	fb0a f00b 	mul.w	r0, sl, fp
   d79e8:	f7fe fc4a 	bl	d6280 <malloc>
            if (!d) {
   d79ec:	9004      	str	r0, [sp, #16]
   d79ee:	2800      	cmp	r0, #0
   d79f0:	d045      	beq.n	d7a7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d79f2:	e9d5 1200 	ldrd	r1, r2, [r5]
   d79f6:	fb0a 1202 	mla	r2, sl, r2, r1
   d79fa:	f7ff fe71 	bl	d76e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d79fe:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d7a00:	6828      	ldr	r0, [r5, #0]
   d7a02:	9304      	str	r3, [sp, #16]
   d7a04:	f7fe fc44 	bl	d6290 <free>
        data_ = d;
   d7a08:	9b04      	ldr	r3, [sp, #16]
   d7a0a:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d7a0c:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d7a10:	9b01      	ldr	r3, [sp, #4]
   d7a12:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d7a16:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d7a18:	fb0a f303 	mul.w	r3, sl, r3
   d7a1c:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d7a20:	f101 0014 	add.w	r0, r1, #20
   d7a24:	fb0a b202 	mla	r2, sl, r2, fp
   d7a28:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d7a2a:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d7a2c:	f7ff fe58 	bl	d76e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d7a30:	9904      	ldr	r1, [sp, #16]
   d7a32:	b1a9      	cbz	r1, d7a60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d7a34:	9b05      	ldr	r3, [sp, #20]
   d7a36:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d7a38:	f84b 2003 	str.w	r2, [fp, r3]
   d7a3c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d7a40:	808b      	strh	r3, [r1, #4]
   d7a42:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d7a46:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d7a48:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d7a4c:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7a4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7a50:	608b      	str	r3, [r1, #8]
   d7a52:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d7a54:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d7a56:	60cb      	str	r3, [r1, #12]
   d7a58:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d7a5a:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d7a5c:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a5e:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d7a60:	686b      	ldr	r3, [r5, #4]
   d7a62:	3301      	adds	r3, #1
   d7a64:	606b      	str	r3, [r5, #4]
   d7a66:	a813      	add	r0, sp, #76	; 0x4c
   d7a68:	f7ff fc8c 	bl	d7384 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7a6c:	f1b8 0f00 	cmp.w	r8, #0
   d7a70:	d008      	beq.n	d7a84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d7a72:	a80d      	add	r0, sp, #52	; 0x34
   d7a74:	f7ff fc86 	bl	d7384 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7a78:	e756      	b.n	d7928 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d7a7a:	4643      	mov	r3, r8
   d7a7c:	e7c0      	b.n	d7a00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7a7e:	f04f 0801 	mov.w	r8, #1
   d7a82:	e7f0      	b.n	d7a66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d7a84:	9b01      	ldr	r3, [sp, #4]
   d7a86:	682d      	ldr	r5, [r5, #0]
   d7a88:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d7a8c:	9b08      	ldr	r3, [sp, #32]
   d7a8e:	781b      	ldrb	r3, [r3, #0]
   d7a90:	b92b      	cbnz	r3, d7a9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d7a92:	f8d9 3000 	ldr.w	r3, [r9]
   d7a96:	9a02      	ldr	r2, [sp, #8]
   d7a98:	4413      	add	r3, r2
   d7a9a:	7c1b      	ldrb	r3, [r3, #16]
   d7a9c:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d7a9e:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d7aa0:	e773      	b.n	d798a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7aa2:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7aa4:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7aa6:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7aa8:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7aaa:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7aac:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d7aae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d7ab0:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7ab2:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7ab4:	60a2      	str	r2, [r4, #8]
   d7ab6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d7ab8:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7aba:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7abc:	60e2      	str	r2, [r4, #12]
   d7abe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d7ac0:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7ac2:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7ac4:	6122      	str	r2, [r4, #16]
   d7ac6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d7ac8:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d7aca:	9b03      	ldr	r3, [sp, #12]
   d7acc:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d7ace:	6162      	str	r2, [r4, #20]
   d7ad0:	7623      	strb	r3, [r4, #24]
   d7ad2:	e7ce      	b.n	d7a72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d7ad4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7ad4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d7ad6:	4605      	mov	r5, r0
   d7ad8:	4b09      	ldr	r3, [pc, #36]	; (d7b00 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d7ada:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7ade:	4604      	mov	r4, r0
   d7ae0:	460e      	mov	r6, r1
        filter_(level, filters) {
   d7ae2:	a801      	add	r0, sp, #4
   d7ae4:	4611      	mov	r1, r2
   d7ae6:	f7fc fdfa 	bl	d46de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7aea:	aa01      	add	r2, sp, #4
   d7aec:	4631      	mov	r1, r6
   d7aee:	4628      	mov	r0, r5
   d7af0:	f7ff fedb 	bl	d78aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7af4:	a801      	add	r0, sp, #4
   d7af6:	f7fc fdb1 	bl	d465c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d7afa:	4620      	mov	r0, r4
   d7afc:	b004      	add	sp, #16
   d7afe:	bd70      	pop	{r4, r5, r6, pc}
   d7b00:	000d9938 	.word	0x000d9938

000d7b04 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d7b04:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7b06:	460f      	mov	r7, r1
   d7b08:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7b0a:	4926      	ldr	r1, [pc, #152]	; (d7ba4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d7b0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7b0e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d7b10:	4616      	mov	r6, r2
   d7b12:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7b14:	f001 fcd1 	bl	d94ba <strcmp>
   d7b18:	bb00      	cbnz	r0, d7b5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d7b1a:	b1e4      	cbz	r4, d7b56 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d7b1c:	4629      	mov	r1, r5
   d7b1e:	4668      	mov	r0, sp
   d7b20:	f7ff fc8a 	bl	d7438 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7b24:	4920      	ldr	r1, [pc, #128]	; (d7ba8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d7b26:	2024      	movs	r0, #36	; 0x24
   d7b28:	f000 ffd2 	bl	d8ad0 <_ZnwjRKSt9nothrow_t>
   d7b2c:	4605      	mov	r5, r0
   d7b2e:	b170      	cbz	r0, d7b4e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d7b30:	4669      	mov	r1, sp
   d7b32:	a803      	add	r0, sp, #12
   d7b34:	f7fc fdd3 	bl	d46de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7b38:	aa03      	add	r2, sp, #12
   d7b3a:	4631      	mov	r1, r6
   d7b3c:	4628      	mov	r0, r5
   d7b3e:	f7ff ffc9 	bl	d7ad4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7b42:	a803      	add	r0, sp, #12
   d7b44:	f7fc fd8a 	bl	d465c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d7b48:	4b18      	ldr	r3, [pc, #96]	; (d7bac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d7b4a:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d7b4c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d7b4e:	4668      	mov	r0, sp
   d7b50:	f7fc fd84 	bl	d465c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7b54:	462c      	mov	r4, r5
}
   d7b56:	4620      	mov	r0, r4
   d7b58:	b007      	add	sp, #28
   d7b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d7b5c:	4914      	ldr	r1, [pc, #80]	; (d7bb0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d7b5e:	4638      	mov	r0, r7
   d7b60:	f001 fcab 	bl	d94ba <strcmp>
   d7b64:	b9e0      	cbnz	r0, d7ba0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d7b66:	2c00      	cmp	r4, #0
   d7b68:	d0f5      	beq.n	d7b56 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d7b6a:	4629      	mov	r1, r5
   d7b6c:	4668      	mov	r0, sp
   d7b6e:	f7ff fc63 	bl	d7438 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7b72:	490d      	ldr	r1, [pc, #52]	; (d7ba8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d7b74:	2024      	movs	r0, #36	; 0x24
   d7b76:	f000 ffab 	bl	d8ad0 <_ZnwjRKSt9nothrow_t>
   d7b7a:	4605      	mov	r5, r0
   d7b7c:	2800      	cmp	r0, #0
   d7b7e:	d0e6      	beq.n	d7b4e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d7b80:	4669      	mov	r1, sp
   d7b82:	a803      	add	r0, sp, #12
   d7b84:	f7fc fdab 	bl	d46de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7b88:	aa03      	add	r2, sp, #12
   d7b8a:	4631      	mov	r1, r6
   d7b8c:	4628      	mov	r0, r5
   d7b8e:	f7ff ffa1 	bl	d7ad4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7b92:	a803      	add	r0, sp, #12
   d7b94:	f7fc fd62 	bl	d465c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7b98:	4b06      	ldr	r3, [pc, #24]	; (d7bb4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d7b9a:	602b      	str	r3, [r5, #0]
   d7b9c:	622c      	str	r4, [r5, #32]
}
   d7b9e:	e7d6      	b.n	d7b4e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d7ba0:	2400      	movs	r4, #0
   d7ba2:	e7d8      	b.n	d7b56 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d7ba4:	000d9cd9 	.word	0x000d9cd9
   d7ba8:	000d9e70 	.word	0x000d9e70
   d7bac:	000d9d70 	.word	0x000d9d70
   d7bb0:	000d9cdd 	.word	0x000d9cdd
   d7bb4:	000d9d58 	.word	0x000d9d58

000d7bb8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d7bb8:	4b01      	ldr	r3, [pc, #4]	; (d7bc0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7bba:	4a02      	ldr	r2, [pc, #8]	; (d7bc4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7bbc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7bbe:	4770      	bx	lr
   d7bc0:	2003e58c 	.word	0x2003e58c
   d7bc4:	000d9cee 	.word	0x000d9cee

000d7bc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7bcc:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d7bce:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7bd2:	4604      	mov	r4, r0
   d7bd4:	460e      	mov	r6, r1
   d7bd6:	4617      	mov	r7, r2
   d7bd8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d7bda:	f000 fe0f 	bl	d87fc <_Z16_fetch_usbserialv>
   d7bde:	4581      	cmp	r9, r0
   d7be0:	d04c      	beq.n	d7c7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d7be2:	792b      	ldrb	r3, [r5, #4]
   d7be4:	0719      	lsls	r1, r3, #28
   d7be6:	d504      	bpl.n	d7bf2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d7be8:	696a      	ldr	r2, [r5, #20]
   d7bea:	4954      	ldr	r1, [pc, #336]	; (d7d3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d7bec:	4620      	mov	r0, r4
   d7bee:	f7ff fa40 	bl	d7072 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d7bf2:	f1b8 0f00 	cmp.w	r8, #0
   d7bf6:	d00d      	beq.n	d7c14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d7bf8:	215b      	movs	r1, #91	; 0x5b
   d7bfa:	4620      	mov	r0, r4
   d7bfc:	f7ff fa2d 	bl	d705a <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d7c00:	4641      	mov	r1, r8
   d7c02:	4620      	mov	r0, r4
   d7c04:	f7ff fa1a 	bl	d703c <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d7c08:	6823      	ldr	r3, [r4, #0]
   d7c0a:	494d      	ldr	r1, [pc, #308]	; (d7d40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d7c0c:	68db      	ldr	r3, [r3, #12]
   d7c0e:	2202      	movs	r2, #2
   d7c10:	4620      	mov	r0, r4
   d7c12:	4798      	blx	r3
    if (attr.has_file) {
   d7c14:	792b      	ldrb	r3, [r5, #4]
   d7c16:	07da      	lsls	r2, r3, #31
   d7c18:	d523      	bpl.n	d7c62 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d7c1a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d7c1e:	212f      	movs	r1, #47	; 0x2f
   d7c20:	4640      	mov	r0, r8
   d7c22:	f001 fc94 	bl	d954e <strrchr>
    if (s1) {
   d7c26:	b108      	cbz	r0, d7c2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d7c28:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d7c2c:	4641      	mov	r1, r8
   d7c2e:	4620      	mov	r0, r4
   d7c30:	f7ff fa04 	bl	d703c <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d7c34:	792b      	ldrb	r3, [r5, #4]
   d7c36:	079b      	lsls	r3, r3, #30
   d7c38:	d508      	bpl.n	d7c4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d7c3a:	213a      	movs	r1, #58	; 0x3a
   d7c3c:	4620      	mov	r0, r4
   d7c3e:	f7ff fa0c 	bl	d705a <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d7c42:	68ea      	ldr	r2, [r5, #12]
   d7c44:	493f      	ldr	r1, [pc, #252]	; (d7d44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d7c46:	4620      	mov	r0, r4
   d7c48:	f7ff fa13 	bl	d7072 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d7c4c:	792a      	ldrb	r2, [r5, #4]
   d7c4e:	6823      	ldr	r3, [r4, #0]
   d7c50:	f012 0f04 	tst.w	r2, #4
   d7c54:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d7c56:	bf14      	ite	ne
   d7c58:	493b      	ldrne	r1, [pc, #236]	; (d7d48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d7c5a:	493c      	ldreq	r1, [pc, #240]	; (d7d4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d7c5c:	2202      	movs	r2, #2
            write(": ", 2);
   d7c5e:	4620      	mov	r0, r4
   d7c60:	4798      	blx	r3
    if (attr.has_function) {
   d7c62:	792b      	ldrb	r3, [r5, #4]
   d7c64:	0758      	lsls	r0, r3, #29
   d7c66:	d51d      	bpl.n	d7ca4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7c68:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d7c6a:	460b      	mov	r3, r1
   d7c6c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d7c6e:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7c72:	b160      	cbz	r0, d7c8e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d7c74:	2820      	cmp	r0, #32
   d7c76:	d108      	bne.n	d7c8a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d7c78:	4619      	mov	r1, r3
   d7c7a:	e7f7      	b.n	d7c6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d7c7c:	4834      	ldr	r0, [pc, #208]	; (d7d50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d7c7e:	f000 f966 	bl	d7f4e <_ZN5spark12NetworkClass9listeningEv>
   d7c82:	2800      	cmp	r0, #0
   d7c84:	d0ad      	beq.n	d7be2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d7c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d7c8a:	2828      	cmp	r0, #40	; 0x28
   d7c8c:	d1ee      	bne.n	d7c6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d7c8e:	6823      	ldr	r3, [r4, #0]
   d7c90:	1a52      	subs	r2, r2, r1
   d7c92:	68db      	ldr	r3, [r3, #12]
   d7c94:	4620      	mov	r0, r4
   d7c96:	4798      	blx	r3
        write("(): ", 4);
   d7c98:	6823      	ldr	r3, [r4, #0]
   d7c9a:	492e      	ldr	r1, [pc, #184]	; (d7d54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d7c9c:	68db      	ldr	r3, [r3, #12]
   d7c9e:	2204      	movs	r2, #4
   d7ca0:	4620      	mov	r0, r4
   d7ca2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d7ca4:	2100      	movs	r1, #0
   d7ca6:	4638      	mov	r0, r7
   d7ca8:	f7fe f9f4 	bl	d6094 <log_level_name>
   d7cac:	4601      	mov	r1, r0
    write(s);
   d7cae:	4620      	mov	r0, r4
   d7cb0:	f7ff f9c4 	bl	d703c <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d7cb4:	6823      	ldr	r3, [r4, #0]
   d7cb6:	4925      	ldr	r1, [pc, #148]	; (d7d4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d7cb8:	68db      	ldr	r3, [r3, #12]
   d7cba:	2202      	movs	r2, #2
   d7cbc:	4620      	mov	r0, r4
   d7cbe:	4798      	blx	r3
    if (msg) {
   d7cc0:	b11e      	cbz	r6, d7cca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d7cc2:	4631      	mov	r1, r6
   d7cc4:	4620      	mov	r0, r4
   d7cc6:	f7ff f9b9 	bl	d703c <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d7cca:	792b      	ldrb	r3, [r5, #4]
   d7ccc:	f013 0f30 	tst.w	r3, #48	; 0x30
   d7cd0:	d02c      	beq.n	d7d2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d7cd2:	6823      	ldr	r3, [r4, #0]
   d7cd4:	4920      	ldr	r1, [pc, #128]	; (d7d58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d7cd6:	68db      	ldr	r3, [r3, #12]
   d7cd8:	2202      	movs	r2, #2
   d7cda:	4620      	mov	r0, r4
   d7cdc:	4798      	blx	r3
        if (attr.has_code) {
   d7cde:	792b      	ldrb	r3, [r5, #4]
   d7ce0:	06d9      	lsls	r1, r3, #27
   d7ce2:	d50a      	bpl.n	d7cfa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d7ce4:	6823      	ldr	r3, [r4, #0]
   d7ce6:	491d      	ldr	r1, [pc, #116]	; (d7d5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7ce8:	68db      	ldr	r3, [r3, #12]
   d7cea:	2207      	movs	r2, #7
   d7cec:	4620      	mov	r0, r4
   d7cee:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d7cf0:	69aa      	ldr	r2, [r5, #24]
   d7cf2:	491b      	ldr	r1, [pc, #108]	; (d7d60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d7cf4:	4620      	mov	r0, r4
   d7cf6:	f7ff f9bc 	bl	d7072 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d7cfa:	792b      	ldrb	r3, [r5, #4]
   d7cfc:	069a      	lsls	r2, r3, #26
   d7cfe:	d511      	bpl.n	d7d24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d7d00:	06db      	lsls	r3, r3, #27
   d7d02:	d505      	bpl.n	d7d10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d7d04:	6823      	ldr	r3, [r4, #0]
   d7d06:	4910      	ldr	r1, [pc, #64]	; (d7d48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d7d08:	68db      	ldr	r3, [r3, #12]
   d7d0a:	2202      	movs	r2, #2
   d7d0c:	4620      	mov	r0, r4
   d7d0e:	4798      	blx	r3
            write("details = ", 10);
   d7d10:	6823      	ldr	r3, [r4, #0]
   d7d12:	4914      	ldr	r1, [pc, #80]	; (d7d64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d7d14:	68db      	ldr	r3, [r3, #12]
   d7d16:	4620      	mov	r0, r4
   d7d18:	220a      	movs	r2, #10
   d7d1a:	4798      	blx	r3
            write(attr.details);
   d7d1c:	69e9      	ldr	r1, [r5, #28]
   d7d1e:	4620      	mov	r0, r4
   d7d20:	f7ff f98c 	bl	d703c <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d7d24:	215d      	movs	r1, #93	; 0x5d
   d7d26:	4620      	mov	r0, r4
   d7d28:	f7ff f997 	bl	d705a <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d7d2c:	6823      	ldr	r3, [r4, #0]
   d7d2e:	490e      	ldr	r1, [pc, #56]	; (d7d68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d7d30:	68db      	ldr	r3, [r3, #12]
   d7d32:	4620      	mov	r0, r4
   d7d34:	2202      	movs	r2, #2
}
   d7d36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d7d3a:	4718      	bx	r3
   d7d3c:	000d9cf2 	.word	0x000d9cf2
   d7d40:	000d9cf9 	.word	0x000d9cf9
   d7d44:	000d97fe 	.word	0x000d97fe
   d7d48:	000d9cfc 	.word	0x000d9cfc
   d7d4c:	000d9d01 	.word	0x000d9d01
   d7d50:	2003e5b8 	.word	0x2003e5b8
   d7d54:	000d9cff 	.word	0x000d9cff
   d7d58:	000d9d04 	.word	0x000d9d04
   d7d5c:	000d9d07 	.word	0x000d9d07
   d7d60:	000d9d0f 	.word	0x000d9d0f
   d7d64:	000d9d12 	.word	0x000d9d12
   d7d68:	000d9d1d 	.word	0x000d9d1d

000d7d6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7d70:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d7d72:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7d76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7d78:	4605      	mov	r5, r0
   d7d7a:	460f      	mov	r7, r1
   d7d7c:	4690      	mov	r8, r2
   d7d7e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d7d80:	f000 fd3c 	bl	d87fc <_Z16_fetch_usbserialv>
   d7d84:	4581      	cmp	r9, r0
   d7d86:	d105      	bne.n	d7d94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7d88:	4849      	ldr	r0, [pc, #292]	; (d7eb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d7d8a:	f000 f8e0 	bl	d7f4e <_ZN5spark12NetworkClass9listeningEv>
   d7d8e:	2800      	cmp	r0, #0
   d7d90:	f040 808a 	bne.w	d7ea8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d7d94:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d7d96:	4a47      	ldr	r2, [pc, #284]	; (d7eb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d7d98:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d7d9a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d7d9e:	a801      	add	r0, sp, #4
        strm_(stream) {
   d7da0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d7da2:	f88d 9008 	strb.w	r9, [sp, #8]
   d7da6:	f7ff f83c 	bl	d6e22 <_ZN5spark10JSONWriter11beginObjectEv>
   d7daa:	4649      	mov	r1, r9
   d7dac:	4640      	mov	r0, r8
   d7dae:	f7fe f971 	bl	d6094 <log_level_name>
    json.name("l", 1).value(s);
   d7db2:	4941      	ldr	r1, [pc, #260]	; (d7eb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d7db4:	4680      	mov	r8, r0
   d7db6:	2201      	movs	r2, #1
   d7db8:	a801      	add	r0, sp, #4
   d7dba:	f7ff f8bb 	bl	d6f34 <_ZN5spark10JSONWriter4nameEPKcj>
   d7dbe:	4641      	mov	r1, r8
   d7dc0:	f7ff f92e 	bl	d7020 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d7dc4:	b13f      	cbz	r7, d7dd6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d7dc6:	493d      	ldr	r1, [pc, #244]	; (d7ebc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d7dc8:	2201      	movs	r2, #1
   d7dca:	a801      	add	r0, sp, #4
   d7dcc:	f7ff f8b2 	bl	d6f34 <_ZN5spark10JSONWriter4nameEPKcj>
   d7dd0:	4639      	mov	r1, r7
   d7dd2:	f7ff f925 	bl	d7020 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d7dd6:	b13e      	cbz	r6, d7de8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d7dd8:	4939      	ldr	r1, [pc, #228]	; (d7ec0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d7dda:	2201      	movs	r2, #1
   d7ddc:	a801      	add	r0, sp, #4
   d7dde:	f7ff f8a9 	bl	d6f34 <_ZN5spark10JSONWriter4nameEPKcj>
   d7de2:	4631      	mov	r1, r6
   d7de4:	f7ff f91c 	bl	d7020 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d7de8:	7923      	ldrb	r3, [r4, #4]
   d7dea:	07df      	lsls	r7, r3, #31
   d7dec:	d50e      	bpl.n	d7e0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d7dee:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d7df0:	212f      	movs	r1, #47	; 0x2f
   d7df2:	4630      	mov	r0, r6
   d7df4:	f001 fbab 	bl	d954e <strrchr>
    if (s1) {
   d7df8:	b100      	cbz	r0, d7dfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d7dfa:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d7dfc:	4931      	ldr	r1, [pc, #196]	; (d7ec4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d7dfe:	2201      	movs	r2, #1
   d7e00:	a801      	add	r0, sp, #4
   d7e02:	f7ff f897 	bl	d6f34 <_ZN5spark10JSONWriter4nameEPKcj>
   d7e06:	4631      	mov	r1, r6
   d7e08:	f7ff f90a 	bl	d7020 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d7e0c:	7923      	ldrb	r3, [r4, #4]
   d7e0e:	079e      	lsls	r6, r3, #30
   d7e10:	d507      	bpl.n	d7e22 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d7e12:	492d      	ldr	r1, [pc, #180]	; (d7ec8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d7e14:	2202      	movs	r2, #2
   d7e16:	a801      	add	r0, sp, #4
   d7e18:	f7ff f88c 	bl	d6f34 <_ZN5spark10JSONWriter4nameEPKcj>
   d7e1c:	68e1      	ldr	r1, [r4, #12]
   d7e1e:	f7ff f80d 	bl	d6e3c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d7e22:	7923      	ldrb	r3, [r4, #4]
   d7e24:	0758      	lsls	r0, r3, #29
   d7e26:	d514      	bpl.n	d7e52 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7e28:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d7e2a:	4633      	mov	r3, r6
   d7e2c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d7e2e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7e32:	b12a      	cbz	r2, d7e40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d7e34:	2a20      	cmp	r2, #32
   d7e36:	d101      	bne.n	d7e3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d7e38:	461e      	mov	r6, r3
   d7e3a:	e7f7      	b.n	d7e2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d7e3c:	2a28      	cmp	r2, #40	; 0x28
   d7e3e:	d1f5      	bne.n	d7e2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d7e40:	4922      	ldr	r1, [pc, #136]	; (d7ecc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d7e42:	2202      	movs	r2, #2
   d7e44:	a801      	add	r0, sp, #4
   d7e46:	f7ff f875 	bl	d6f34 <_ZN5spark10JSONWriter4nameEPKcj>
   d7e4a:	1bba      	subs	r2, r7, r6
   d7e4c:	4631      	mov	r1, r6
   d7e4e:	f7ff f881 	bl	d6f54 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d7e52:	7923      	ldrb	r3, [r4, #4]
   d7e54:	0719      	lsls	r1, r3, #28
   d7e56:	d507      	bpl.n	d7e68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d7e58:	491d      	ldr	r1, [pc, #116]	; (d7ed0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d7e5a:	2201      	movs	r2, #1
   d7e5c:	a801      	add	r0, sp, #4
   d7e5e:	f7ff f869 	bl	d6f34 <_ZN5spark10JSONWriter4nameEPKcj>
   d7e62:	6961      	ldr	r1, [r4, #20]
   d7e64:	f7fe fffc 	bl	d6e60 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d7e68:	7923      	ldrb	r3, [r4, #4]
   d7e6a:	06da      	lsls	r2, r3, #27
   d7e6c:	d508      	bpl.n	d7e80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d7e6e:	2204      	movs	r2, #4
   d7e70:	4918      	ldr	r1, [pc, #96]	; (d7ed4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d7e72:	eb0d 0002 	add.w	r0, sp, r2
   d7e76:	f7ff f85d 	bl	d6f34 <_ZN5spark10JSONWriter4nameEPKcj>
   d7e7a:	69a1      	ldr	r1, [r4, #24]
   d7e7c:	f7fe ffde 	bl	d6e3c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d7e80:	7923      	ldrb	r3, [r4, #4]
   d7e82:	069b      	lsls	r3, r3, #26
   d7e84:	d507      	bpl.n	d7e96 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d7e86:	4914      	ldr	r1, [pc, #80]	; (d7ed8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d7e88:	2206      	movs	r2, #6
   d7e8a:	a801      	add	r0, sp, #4
   d7e8c:	f7ff f852 	bl	d6f34 <_ZN5spark10JSONWriter4nameEPKcj>
   d7e90:	69e1      	ldr	r1, [r4, #28]
   d7e92:	f7ff f8c5 	bl	d7020 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d7e96:	a801      	add	r0, sp, #4
   d7e98:	f7fe ffad 	bl	d6df6 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d7e9c:	6a28      	ldr	r0, [r5, #32]
   d7e9e:	490f      	ldr	r1, [pc, #60]	; (d7edc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d7ea0:	6803      	ldr	r3, [r0, #0]
   d7ea2:	2202      	movs	r2, #2
   d7ea4:	68db      	ldr	r3, [r3, #12]
   d7ea6:	4798      	blx	r3
}
   d7ea8:	b005      	add	sp, #20
   d7eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7eae:	bf00      	nop
   d7eb0:	2003e5b8 	.word	0x2003e5b8
   d7eb4:	000d9d40 	.word	0x000d9d40
   d7eb8:	000d9ccf 	.word	0x000d9ccf
   d7ebc:	000d9d20 	.word	0x000d9d20
   d7ec0:	000d9d22 	.word	0x000d9d22
   d7ec4:	000d9d24 	.word	0x000d9d24
   d7ec8:	000d9d26 	.word	0x000d9d26
   d7ecc:	000d9d29 	.word	0x000d9d29
   d7ed0:	000d9827 	.word	0x000d9827
   d7ed4:	000d9d2c 	.word	0x000d9d2c
   d7ed8:	000d9d31 	.word	0x000d9d31
   d7edc:	000d9d1d 	.word	0x000d9d1d

000d7ee0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7ee0:	2300      	movs	r3, #0
   d7ee2:	6840      	ldr	r0, [r0, #4]
   d7ee4:	461a      	mov	r2, r3
   d7ee6:	f7fe b96b 	b.w	d61c0 <network_connect>

000d7eea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7eea:	6840      	ldr	r0, [r0, #4]
   d7eec:	2200      	movs	r2, #0
   d7eee:	2102      	movs	r1, #2
   d7ef0:	f7fe b976 	b.w	d61e0 <network_disconnect>

000d7ef4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7ef4:	2200      	movs	r2, #0
   d7ef6:	6840      	ldr	r0, [r0, #4]
   d7ef8:	4611      	mov	r1, r2
   d7efa:	f7fe b969 	b.w	d61d0 <network_connecting>

000d7efe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7efe:	2200      	movs	r2, #0
   d7f00:	6840      	ldr	r0, [r0, #4]
   d7f02:	4611      	mov	r1, r2
   d7f04:	f7fe b974 	b.w	d61f0 <network_ready>

000d7f08 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7f08:	2300      	movs	r3, #0
   d7f0a:	6840      	ldr	r0, [r0, #4]
   d7f0c:	461a      	mov	r2, r3
   d7f0e:	4619      	mov	r1, r3
   d7f10:	f7fe b976 	b.w	d6200 <network_on>

000d7f14 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7f14:	2300      	movs	r3, #0
   d7f16:	6840      	ldr	r0, [r0, #4]
   d7f18:	461a      	mov	r2, r3
   d7f1a:	4619      	mov	r1, r3
   d7f1c:	f7fe b978 	b.w	d6210 <network_off>

000d7f20 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7f20:	6840      	ldr	r0, [r0, #4]
   d7f22:	2100      	movs	r1, #0
   d7f24:	f7fe b99c 	b.w	d6260 <network_is_on>

000d7f28 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7f28:	6840      	ldr	r0, [r0, #4]
   d7f2a:	2100      	movs	r1, #0
   d7f2c:	f7fe b9a0 	b.w	d6270 <network_is_off>

000d7f30 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7f30:	6840      	ldr	r0, [r0, #4]
   d7f32:	2200      	movs	r2, #0
   d7f34:	f081 0101 	eor.w	r1, r1, #1
   d7f38:	f7fe b972 	b.w	d6220 <network_listen>

000d7f3c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7f3c:	6840      	ldr	r0, [r0, #4]
   d7f3e:	2200      	movs	r2, #0
   d7f40:	f7fe b97e 	b.w	d6240 <network_set_listen_timeout>

000d7f44 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7f44:	2200      	movs	r2, #0
   d7f46:	6840      	ldr	r0, [r0, #4]
   d7f48:	4611      	mov	r1, r2
   d7f4a:	f7fe b981 	b.w	d6250 <network_get_listen_timeout>

000d7f4e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7f4e:	2200      	movs	r2, #0
   d7f50:	6840      	ldr	r0, [r0, #4]
   d7f52:	4611      	mov	r1, r2
   d7f54:	f7fe b96c 	b.w	d6230 <network_listening>

000d7f58 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7f5c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7f5e:	b095      	sub	sp, #84	; 0x54
   d7f60:	4616      	mov	r6, r2
   d7f62:	460d      	mov	r5, r1
   d7f64:	4607      	mov	r7, r0
    IPAddress addr;
   d7f66:	f7fe fde7 	bl	d6b38 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7f6a:	4621      	mov	r1, r4
   d7f6c:	2218      	movs	r2, #24
   d7f6e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7f70:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7f72:	f001 fa2b 	bl	d93cc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7f76:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7f78:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7f7c:	4621      	mov	r1, r4
   d7f7e:	466b      	mov	r3, sp
   d7f80:	aa0c      	add	r2, sp, #48	; 0x30
   d7f82:	4630      	mov	r0, r6
   d7f84:	f7fd ff8e 	bl	d5ea4 <netdb_getaddrinfo>
    if (!r) {
   d7f88:	4604      	mov	r4, r0
   d7f8a:	2800      	cmp	r0, #0
   d7f8c:	d146      	bne.n	d801c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7f8e:	4602      	mov	r2, r0
   d7f90:	2101      	movs	r1, #1
   d7f92:	6868      	ldr	r0, [r5, #4]
   d7f94:	f7fe f92c 	bl	d61f0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f98:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7f9a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f9c:	4622      	mov	r2, r4
   d7f9e:	6868      	ldr	r0, [r5, #4]
   d7fa0:	f7fe f926 	bl	d61f0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7fa4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7fa6:	4681      	mov	r9, r0
        bool ok = false;
   d7fa8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7faa:	2e00      	cmp	r6, #0
   d7fac:	d036      	beq.n	d801c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d7fae:	2900      	cmp	r1, #0
   d7fb0:	d134      	bne.n	d801c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7fb2:	6873      	ldr	r3, [r6, #4]
   d7fb4:	2b02      	cmp	r3, #2
   d7fb6:	d003      	beq.n	d7fc0 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7fb8:	2b0a      	cmp	r3, #10
   d7fba:	d00b      	beq.n	d7fd4 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7fbc:	69f6      	ldr	r6, [r6, #28]
   d7fbe:	e7f4      	b.n	d7faa <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7fc0:	f1b8 0f00 	cmp.w	r8, #0
   d7fc4:	d004      	beq.n	d7fd0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7fc6:	6971      	ldr	r1, [r6, #20]
   d7fc8:	4638      	mov	r0, r7
   d7fca:	3104      	adds	r1, #4
   d7fcc:	f7fe fde1 	bl	d6b92 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7fd0:	4641      	mov	r1, r8
   d7fd2:	e7f3      	b.n	d7fbc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7fd4:	f1b9 0f00 	cmp.w	r9, #0
   d7fd8:	d101      	bne.n	d7fde <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7fda:	4649      	mov	r1, r9
   d7fdc:	e7ee      	b.n	d7fbc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7fde:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7fe0:	2210      	movs	r2, #16
   d7fe2:	a801      	add	r0, sp, #4
   d7fe4:	f001 f9f2 	bl	d93cc <memset>
                    a.v = 6;
   d7fe8:	2306      	movs	r3, #6
   d7fea:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7fee:	ad01      	add	r5, sp, #4
   d7ff0:	f104 0308 	add.w	r3, r4, #8
   d7ff4:	3418      	adds	r4, #24
   d7ff6:	6818      	ldr	r0, [r3, #0]
   d7ff8:	6859      	ldr	r1, [r3, #4]
   d7ffa:	462a      	mov	r2, r5
   d7ffc:	c203      	stmia	r2!, {r0, r1}
   d7ffe:	3308      	adds	r3, #8
   d8000:	42a3      	cmp	r3, r4
   d8002:	4615      	mov	r5, r2
   d8004:	d1f7      	bne.n	d7ff6 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d8006:	a901      	add	r1, sp, #4
   d8008:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d800a:	ad07      	add	r5, sp, #28
   d800c:	f7fe fda2 	bl	d6b54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8012:	1d3c      	adds	r4, r7, #4
   d8014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8016:	682b      	ldr	r3, [r5, #0]
   d8018:	7023      	strb	r3, [r4, #0]
   d801a:	e7de      	b.n	d7fda <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d801c:	9800      	ldr	r0, [sp, #0]
   d801e:	f7fd ff39 	bl	d5e94 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8022:	4638      	mov	r0, r7
   d8024:	b015      	add	sp, #84	; 0x54
   d8026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d802c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d802c:	4b02      	ldr	r3, [pc, #8]	; (d8038 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d802e:	4a03      	ldr	r2, [pc, #12]	; (d803c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8030:	601a      	str	r2, [r3, #0]
   d8032:	2200      	movs	r2, #0
   d8034:	605a      	str	r2, [r3, #4]

} // spark
   d8036:	4770      	bx	lr
   d8038:	2003e5b8 	.word	0x2003e5b8
   d803c:	000d9db8 	.word	0x000d9db8

000d8040 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8042:	4606      	mov	r6, r0
   d8044:	460d      	mov	r5, r1
  size_t n = 0;
   d8046:	188f      	adds	r7, r1, r2
   d8048:	2400      	movs	r4, #0
  while (size--) {
   d804a:	42bd      	cmp	r5, r7
   d804c:	d00c      	beq.n	d8068 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d804e:	6833      	ldr	r3, [r6, #0]
   d8050:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8054:	689b      	ldr	r3, [r3, #8]
   d8056:	4630      	mov	r0, r6
   d8058:	4798      	blx	r3
     if (chunk>=0)
   d805a:	1e03      	subs	r3, r0, #0
   d805c:	db01      	blt.n	d8062 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d805e:	441c      	add	r4, r3
  while (size--) {
   d8060:	e7f3      	b.n	d804a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8062:	2c00      	cmp	r4, #0
   d8064:	bf08      	it	eq
   d8066:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d8068:	4620      	mov	r0, r4
   d806a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d806c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d806c:	b513      	push	{r0, r1, r4, lr}
   d806e:	4604      	mov	r4, r0
    }
   d8070:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d8072:	b159      	cbz	r1, d808c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d8074:	9101      	str	r1, [sp, #4]
   d8076:	f001 fa50 	bl	d951a <strlen>
   d807a:	6823      	ldr	r3, [r4, #0]
   d807c:	9901      	ldr	r1, [sp, #4]
   d807e:	68db      	ldr	r3, [r3, #12]
   d8080:	4602      	mov	r2, r0
   d8082:	4620      	mov	r0, r4
    }
   d8084:	b002      	add	sp, #8
   d8086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d808a:	4718      	bx	r3
    }
   d808c:	b002      	add	sp, #8
   d808e:	bd10      	pop	{r4, pc}

000d8090 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d8090:	b508      	push	{r3, lr}
  return write(str);
   d8092:	f7ff ffeb 	bl	d806c <_ZN5Print5writeEPKc>
}
   d8096:	bd08      	pop	{r3, pc}

000d8098 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d8098:	6803      	ldr	r3, [r0, #0]
   d809a:	689b      	ldr	r3, [r3, #8]
   d809c:	4718      	bx	r3

000d809e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d809e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d80a0:	210d      	movs	r1, #13
{
   d80a2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d80a4:	f7ff fff8 	bl	d8098 <_ZN5Print5printEc>
  n += print('\n');
   d80a8:	210a      	movs	r1, #10
  size_t n = print('\r');
   d80aa:	4604      	mov	r4, r0
  n += print('\n');
   d80ac:	4628      	mov	r0, r5
   d80ae:	f7ff fff3 	bl	d8098 <_ZN5Print5printEc>
  return n;
}
   d80b2:	4420      	add	r0, r4
   d80b4:	bd38      	pop	{r3, r4, r5, pc}

000d80b6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d80b6:	b530      	push	{r4, r5, lr}
   d80b8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d80ba:	2300      	movs	r3, #0
   d80bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d80c0:	2a01      	cmp	r2, #1
   d80c2:	bf98      	it	ls
   d80c4:	220a      	movls	r2, #10
   d80c6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d80c8:	460d      	mov	r5, r1
   d80ca:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d80ce:	fb01 5312 	mls	r3, r1, r2, r5
   d80d2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d80d6:	2b09      	cmp	r3, #9
   d80d8:	bf94      	ite	ls
   d80da:	3330      	addls	r3, #48	; 0x30
   d80dc:	3337      	addhi	r3, #55	; 0x37
   d80de:	b2db      	uxtb	r3, r3
  } while(n);
   d80e0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d80e2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d80e6:	d9ef      	bls.n	d80c8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d80e8:	4621      	mov	r1, r4
   d80ea:	f7ff ffbf 	bl	d806c <_ZN5Print5writeEPKc>
}
   d80ee:	b00b      	add	sp, #44	; 0x2c
   d80f0:	bd30      	pop	{r4, r5, pc}

000d80f2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d80f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d80f6:	b086      	sub	sp, #24
   d80f8:	af00      	add	r7, sp, #0
   d80fa:	4605      	mov	r5, r0
   d80fc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d80fe:	1d38      	adds	r0, r7, #4
   d8100:	2114      	movs	r1, #20
{
   d8102:	4614      	mov	r4, r2
    va_copy(args2, args);
   d8104:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d8106:	f7fe f8e3 	bl	d62d0 <vsnprintf>

    if (n<bufsize)
   d810a:	2813      	cmp	r0, #19
   d810c:	d80e      	bhi.n	d812c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d810e:	1d39      	adds	r1, r7, #4
   d8110:	4628      	mov	r0, r5
   d8112:	f7ff ffab 	bl	d806c <_ZN5Print5writeEPKc>
   d8116:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d8118:	b11e      	cbz	r6, d8122 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d811a:	4628      	mov	r0, r5
   d811c:	f7ff ffbf 	bl	d809e <_ZN5Print7printlnEv>
   d8120:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d8122:	4620      	mov	r0, r4
   d8124:	3718      	adds	r7, #24
   d8126:	46bd      	mov	sp, r7
   d8128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d812c:	f100 0308 	add.w	r3, r0, #8
   d8130:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d8134:	46e8      	mov	r8, sp
        char bigger[n+1];
   d8136:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d813a:	4622      	mov	r2, r4
   d813c:	1c41      	adds	r1, r0, #1
   d813e:	683b      	ldr	r3, [r7, #0]
   d8140:	4668      	mov	r0, sp
   d8142:	f7fe f8c5 	bl	d62d0 <vsnprintf>
  return write(str);
   d8146:	4669      	mov	r1, sp
   d8148:	4628      	mov	r0, r5
   d814a:	f7ff ff8f 	bl	d806c <_ZN5Print5writeEPKc>
   d814e:	4604      	mov	r4, r0
   d8150:	46c5      	mov	sp, r8
   d8152:	e7e1      	b.n	d8118 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d8154 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d8154:	b510      	push	{r4, lr}
  if (0 == max) {
   d8156:	4604      	mov	r4, r0
   d8158:	b128      	cbz	r0, d8166 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d815a:	f001 f963 	bl	d9424 <rand>
   d815e:	fb90 f3f4 	sdiv	r3, r0, r4
   d8162:	fb03 0414 	mls	r4, r3, r4, r0
}
   d8166:	4620      	mov	r0, r4
   d8168:	bd10      	pop	{r4, pc}

000d816a <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d816a:	4288      	cmp	r0, r1
{
   d816c:	b510      	push	{r4, lr}
   d816e:	4604      	mov	r4, r0
  if (min >= max) {
   d8170:	da03      	bge.n	d817a <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d8172:	1a08      	subs	r0, r1, r0
   d8174:	f7ff ffee 	bl	d8154 <_Z6randomi>
   d8178:	4404      	add	r4, r0
}
   d817a:	4620      	mov	r0, r4
   d817c:	bd10      	pop	{r4, pc}
	...

000d8180 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d8180:	4b01      	ldr	r3, [pc, #4]	; (d8188 <_GLOBAL__sub_I_RGB+0x8>)
   d8182:	2200      	movs	r2, #0
   d8184:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d8186:	4770      	bx	lr
   d8188:	2003e5c0 	.word	0x2003e5c0

000d818c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d818c:	2100      	movs	r1, #0
   d818e:	f7fd bec9 	b.w	d5f24 <hal_spi_acquire>

000d8192 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d8192:	2100      	movs	r1, #0
   d8194:	f7fd bece 	b.w	d5f34 <hal_spi_release>

000d8198 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d8198:	b510      	push	{r4, lr}
   d819a:	4604      	mov	r4, r0
   d819c:	4608      	mov	r0, r1
{
    _spi = spi;
   d819e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d81a0:	f7fd fea0 	bl	d5ee4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d81a4:	2300      	movs	r3, #0
   d81a6:	6063      	str	r3, [r4, #4]
}
   d81a8:	4620      	mov	r0, r4
   d81aa:	bd10      	pop	{r4, pc}

000d81ac <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d81ac:	b510      	push	{r4, lr}
   d81ae:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d81b0:	7800      	ldrb	r0, [r0, #0]
   d81b2:	f7ff ffeb 	bl	d818c <_ZN8SPIClass4lockEv.isra.0>
   d81b6:	b948      	cbnz	r0, d81cc <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d81b8:	7820      	ldrb	r0, [r4, #0]
   d81ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d81be:	f7fd fe79 	bl	d5eb4 <hal_spi_begin>
        unlock();
   d81c2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d81c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d81c8:	f7ff bfe3 	b.w	d8192 <_ZN8SPIClass6unlockEv.isra.0>
}
   d81cc:	bd10      	pop	{r4, pc}

000d81ce <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   d81ce:	b510      	push	{r4, lr}
   d81d0:	4604      	mov	r4, r0
    if (!lock())
   d81d2:	7800      	ldrb	r0, [r0, #0]
   d81d4:	f7ff ffda 	bl	d818c <_ZN8SPIClass4lockEv.isra.0>
   d81d8:	b938      	cbnz	r0, d81ea <_ZN8SPIClass3endEv+0x1c>
    {
        hal_spi_end(_spi);
   d81da:	7820      	ldrb	r0, [r4, #0]
   d81dc:	f7fd fe72 	bl	d5ec4 <hal_spi_end>
        unlock();
   d81e0:	7820      	ldrb	r0, [r4, #0]
    }
}
   d81e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d81e6:	f7ff bfd4 	b.w	d8192 <_ZN8SPIClass6unlockEv.isra.0>
}
   d81ea:	bd10      	pop	{r4, pc}

000d81ec <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d81ec:	7800      	ldrb	r0, [r0, #0]
   d81ee:	f7ff bfd0 	b.w	d8192 <_ZN8SPIClass6unlockEv.isra.0>
	...

000d81f4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d81f4:	0840      	lsrs	r0, r0, #1
{
   d81f6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d81f8:	6018      	str	r0, [r3, #0]
   d81fa:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d81fc:	6818      	ldr	r0, [r3, #0]
   d81fe:	4288      	cmp	r0, r1
   d8200:	b2e5      	uxtb	r5, r4
   d8202:	d906      	bls.n	d8212 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d8204:	3401      	adds	r4, #1
   d8206:	2c08      	cmp	r4, #8
   d8208:	d002      	beq.n	d8210 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d820a:	0840      	lsrs	r0, r0, #1
   d820c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d820e:	e7f5      	b.n	d81fc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d8210:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d8212:	4b02      	ldr	r3, [pc, #8]	; (d821c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d8214:	5d5b      	ldrb	r3, [r3, r5]
   d8216:	7013      	strb	r3, [r2, #0]
}
   d8218:	bd30      	pop	{r4, r5, pc}
   d821a:	bf00      	nop
   d821c:	000d9dec 	.word	0x000d9dec

000d8220 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d8220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8224:	4606      	mov	r6, r0
   d8226:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d8228:	7800      	ldrb	r0, [r0, #0]
{
   d822a:	460c      	mov	r4, r1
    CHECK(lock());
   d822c:	f7ff ffae 	bl	d818c <_ZN8SPIClass4lockEv.isra.0>
   d8230:	2800      	cmp	r0, #0
   d8232:	db1b      	blt.n	d826c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d8234:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d8236:	2214      	movs	r2, #20
   d8238:	2100      	movs	r1, #0
   d823a:	a809      	add	r0, sp, #36	; 0x24
   d823c:	f001 f8c6 	bl	d93cc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d8240:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d8242:	2200      	movs	r2, #0
   d8244:	a909      	add	r1, sp, #36	; 0x24
   d8246:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d8248:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d824c:	f7fd fe5a 	bl	d5f04 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d8250:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d8254:	b113      	cbz	r3, d825c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d8256:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d825a:	b155      	cbz	r5, d8272 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d825c:	2700      	movs	r7, #0
   d825e:	46b9      	mov	r9, r7
   d8260:	46b8      	mov	r8, r7
   d8262:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d8264:	7923      	ldrb	r3, [r4, #4]
   d8266:	b15d      	cbz	r5, d8280 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d8268:	b1c3      	cbz	r3, d829c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d826a:	2000      	movs	r0, #0
}
   d826c:	b00f      	add	sp, #60	; 0x3c
   d826e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d8272:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d8276:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d827a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d827e:	e7f1      	b.n	d8264 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d8280:	2b00      	cmp	r3, #0
   d8282:	d135      	bne.n	d82f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d8284:	68a3      	ldr	r3, [r4, #8]
   d8286:	4543      	cmp	r3, r8
   d8288:	d108      	bne.n	d829c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d828a:	f88d 9020 	strb.w	r9, [sp, #32]
   d828e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d8292:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d8296:	89a3      	ldrh	r3, [r4, #12]
   d8298:	429a      	cmp	r2, r3
   d829a:	d0e6      	beq.n	d826a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d829c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d829e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d82a0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d82a4:	980a      	ldr	r0, [sp, #40]	; 0x28
   d82a6:	ab04      	add	r3, sp, #16
   d82a8:	f10d 020f 	add.w	r2, sp, #15
   d82ac:	f7ff ffa2 	bl	d81f4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d82b0:	7921      	ldrb	r1, [r4, #4]
   d82b2:	b985      	cbnz	r5, d82d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d82b4:	b989      	cbnz	r1, d82da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d82b6:	68a3      	ldr	r3, [r4, #8]
   d82b8:	4543      	cmp	r3, r8
   d82ba:	d30e      	bcc.n	d82da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d82bc:	f88d 9020 	strb.w	r9, [sp, #32]
   d82c0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d82c4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d82c8:	89a3      	ldrh	r3, [r4, #12]
   d82ca:	429a      	cmp	r2, r3
   d82cc:	d105      	bne.n	d82da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d82ce:	9b04      	ldr	r3, [sp, #16]
   d82d0:	4543      	cmp	r3, r8
   d82d2:	d102      	bne.n	d82da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d82d4:	e7c9      	b.n	d826a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d82d6:	2900      	cmp	r1, #0
   d82d8:	d1f9      	bne.n	d82ce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d82da:	2300      	movs	r3, #0
   d82dc:	9301      	str	r3, [sp, #4]
   d82de:	7b63      	ldrb	r3, [r4, #13]
   d82e0:	9300      	str	r3, [sp, #0]
   d82e2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d82e6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d82e8:	7830      	ldrb	r0, [r6, #0]
   d82ea:	f7fd fe13 	bl	d5f14 <hal_spi_set_settings>
   d82ee:	e7bc      	b.n	d826a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d82f0:	e9cd 5500 	strd	r5, r5, [sp]
   d82f4:	462b      	mov	r3, r5
   d82f6:	462a      	mov	r2, r5
   d82f8:	2101      	movs	r1, #1
   d82fa:	e7f5      	b.n	d82e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d82fc <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d82fc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d82fe:	7800      	ldrb	r0, [r0, #0]
   d8300:	f7fd fde8 	bl	d5ed4 <hal_spi_transfer>
}
   d8304:	b2c0      	uxtb	r0, r0
   d8306:	bd08      	pop	{r3, pc}

000d8308 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   d8308:	4770      	bx	lr

000d830a <_ZN8SPIClass15detachInterruptEv>:
   d830a:	4770      	bx	lr

000d830c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d830c:	b510      	push	{r4, lr}
   d830e:	4604      	mov	r4, r0
{
	free(buffer);
   d8310:	6800      	ldr	r0, [r0, #0]
   d8312:	f7fd ffbd 	bl	d6290 <free>
}
   d8316:	4620      	mov	r0, r4
   d8318:	bd10      	pop	{r4, pc}

000d831a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d831a:	b510      	push	{r4, lr}
   d831c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d831e:	6800      	ldr	r0, [r0, #0]
   d8320:	b108      	cbz	r0, d8326 <_ZN6String10invalidateEv+0xc>
   d8322:	f7fd ffb5 	bl	d6290 <free>
	buffer = NULL;
   d8326:	2300      	movs	r3, #0
	capacity = len = 0;
   d8328:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d832c:	6023      	str	r3, [r4, #0]
}
   d832e:	bd10      	pop	{r4, pc}

000d8330 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8330:	b538      	push	{r3, r4, r5, lr}
   d8332:	4604      	mov	r4, r0
   d8334:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d8336:	6800      	ldr	r0, [r0, #0]
   d8338:	3101      	adds	r1, #1
   d833a:	f7fd ffb1 	bl	d62a0 <realloc>
	if (newbuffer) {
   d833e:	b110      	cbz	r0, d8346 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8340:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d8344:	2001      	movs	r0, #1
	}
	return 0;
}
   d8346:	bd38      	pop	{r3, r4, r5, pc}

000d8348 <_ZN6String7reserveEj>:
{
   d8348:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d834a:	6803      	ldr	r3, [r0, #0]
{
   d834c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d834e:	b123      	cbz	r3, d835a <_ZN6String7reserveEj+0x12>
   d8350:	6843      	ldr	r3, [r0, #4]
   d8352:	428b      	cmp	r3, r1
   d8354:	d301      	bcc.n	d835a <_ZN6String7reserveEj+0x12>
   d8356:	2001      	movs	r0, #1
}
   d8358:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d835a:	4620      	mov	r0, r4
   d835c:	f7ff ffe8 	bl	d8330 <_ZN6String12changeBufferEj>
   d8360:	2800      	cmp	r0, #0
   d8362:	d0f9      	beq.n	d8358 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d8364:	68a3      	ldr	r3, [r4, #8]
   d8366:	2b00      	cmp	r3, #0
   d8368:	d1f5      	bne.n	d8356 <_ZN6String7reserveEj+0xe>
   d836a:	6822      	ldr	r2, [r4, #0]
   d836c:	7013      	strb	r3, [r2, #0]
   d836e:	e7f2      	b.n	d8356 <_ZN6String7reserveEj+0xe>

000d8370 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8370:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8372:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d8374:	4611      	mov	r1, r2
   d8376:	9201      	str	r2, [sp, #4]
{
   d8378:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d837a:	f7ff ffe5 	bl	d8348 <_ZN6String7reserveEj>
   d837e:	9a01      	ldr	r2, [sp, #4]
   d8380:	b928      	cbnz	r0, d838e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d8382:	4620      	mov	r0, r4
   d8384:	f7ff ffc9 	bl	d831a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d8388:	4620      	mov	r0, r4
   d838a:	b003      	add	sp, #12
   d838c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d838e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d8390:	4629      	mov	r1, r5
   d8392:	6820      	ldr	r0, [r4, #0]
   d8394:	f000 fff2 	bl	d937c <memcpy>
	buffer[len] = 0;
   d8398:	6822      	ldr	r2, [r4, #0]
   d839a:	68a3      	ldr	r3, [r4, #8]
   d839c:	2100      	movs	r1, #0
   d839e:	54d1      	strb	r1, [r2, r3]
	return *this;
   d83a0:	e7f2      	b.n	d8388 <_ZN6String4copyEPKcj+0x18>

000d83a2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d83a2:	2300      	movs	r3, #0
String::String(const char *cstr)
   d83a4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d83a6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d83aa:	4604      	mov	r4, r0
	len = 0;
   d83ac:	6083      	str	r3, [r0, #8]
	flags = 0;
   d83ae:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d83b0:	b141      	cbz	r1, d83c4 <_ZN6StringC1EPKc+0x22>
   d83b2:	4608      	mov	r0, r1
   d83b4:	9101      	str	r1, [sp, #4]
   d83b6:	f001 f8b0 	bl	d951a <strlen>
   d83ba:	9901      	ldr	r1, [sp, #4]
   d83bc:	4602      	mov	r2, r0
   d83be:	4620      	mov	r0, r4
   d83c0:	f7ff ffd6 	bl	d8370 <_ZN6String4copyEPKcj>
}
   d83c4:	4620      	mov	r0, r4
   d83c6:	b002      	add	sp, #8
   d83c8:	bd10      	pop	{r4, pc}

000d83ca <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d83ca:	b538      	push	{r3, r4, r5, lr}
   d83cc:	4605      	mov	r5, r0
	if (buffer) {
   d83ce:	6800      	ldr	r0, [r0, #0]
{
   d83d0:	460c      	mov	r4, r1
	if (buffer) {
   d83d2:	b168      	cbz	r0, d83f0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d83d4:	686a      	ldr	r2, [r5, #4]
   d83d6:	688b      	ldr	r3, [r1, #8]
   d83d8:	429a      	cmp	r2, r3
   d83da:	d307      	bcc.n	d83ec <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d83dc:	6809      	ldr	r1, [r1, #0]
   d83de:	f001 f876 	bl	d94ce <strcpy>
			len = rhs.len;
   d83e2:	68a3      	ldr	r3, [r4, #8]
   d83e4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d83e6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d83e8:	60a3      	str	r3, [r4, #8]
}
   d83ea:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d83ec:	f7fd ff50 	bl	d6290 <free>
	buffer = rhs.buffer;
   d83f0:	6823      	ldr	r3, [r4, #0]
   d83f2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d83f4:	6863      	ldr	r3, [r4, #4]
   d83f6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d83f8:	68a3      	ldr	r3, [r4, #8]
   d83fa:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d83fc:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d83fe:	e9c4 3300 	strd	r3, r3, [r4]
   d8402:	e7f1      	b.n	d83e8 <_ZN6String4moveERS_+0x1e>

000d8404 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d8404:	b510      	push	{r4, lr}
	buffer = NULL;
   d8406:	2300      	movs	r3, #0
	capacity = 0;
   d8408:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d840c:	4604      	mov	r4, r0
	len = 0;
   d840e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8410:	7303      	strb	r3, [r0, #12]
	move(rval);
   d8412:	f7ff ffda 	bl	d83ca <_ZN6String4moveERS_>
}
   d8416:	4620      	mov	r0, r4
   d8418:	bd10      	pop	{r4, pc}

000d841a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d841a:	4288      	cmp	r0, r1
{
   d841c:	b510      	push	{r4, lr}
   d841e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d8420:	d005      	beq.n	d842e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d8422:	680b      	ldr	r3, [r1, #0]
   d8424:	b12b      	cbz	r3, d8432 <_ZN6StringaSERKS_+0x18>
   d8426:	688a      	ldr	r2, [r1, #8]
   d8428:	4619      	mov	r1, r3
   d842a:	f7ff ffa1 	bl	d8370 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d842e:	4620      	mov	r0, r4
   d8430:	bd10      	pop	{r4, pc}
	else invalidate();
   d8432:	f7ff ff72 	bl	d831a <_ZN6String10invalidateEv>
   d8436:	e7fa      	b.n	d842e <_ZN6StringaSERKS_+0x14>

000d8438 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d8438:	b510      	push	{r4, lr}
	buffer = NULL;
   d843a:	2300      	movs	r3, #0
String::String(const String &value)
   d843c:	4604      	mov	r4, r0
	capacity = 0;
   d843e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d8442:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8444:	7303      	strb	r3, [r0, #12]
	*this = value;
   d8446:	f7ff ffe8 	bl	d841a <_ZN6StringaSERKS_>
}
   d844a:	4620      	mov	r0, r4
   d844c:	bd10      	pop	{r4, pc}
	...

000d8450 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d8450:	4b05      	ldr	r3, [pc, #20]	; (d8468 <_GLOBAL__sub_I_System+0x18>)
   d8452:	2202      	movs	r2, #2
   d8454:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8456:	4b05      	ldr	r3, [pc, #20]	; (d846c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d8458:	4a05      	ldr	r2, [pc, #20]	; (d8470 <_GLOBAL__sub_I_System+0x20>)
   d845a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d845c:	2000      	movs	r0, #0
   d845e:	6018      	str	r0, [r3, #0]
   d8460:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d8462:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8464:	f7fd be38 	b.w	d60d8 <set_system_mode>
   d8468:	2003e5dc 	.word	0x2003e5dc
   d846c:	2003e5d0 	.word	0x2003e5d0
   d8470:	ffff0000 	.word	0xffff0000

000d8474 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d8474:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8476:	2000      	movs	r0, #0
   d8478:	f7fd fe92 	bl	d61a0 <spark_sync_time_pending>
   d847c:	b128      	cbz	r0, d848a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d847e:	f7fd fe7f 	bl	d6180 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8482:	f080 0001 	eor.w	r0, r0, #1
   d8486:	b2c0      	uxtb	r0, r0
    }
   d8488:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d848a:	2001      	movs	r0, #1
   d848c:	e7fc      	b.n	d8488 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d8490 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d8490:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d8494:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d8498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d849c:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d849e:	d411      	bmi.n	d84c4 <_ZN9TimeClass4zoneEf+0x34>
   d84a0:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d84a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d84a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d84ac:	dc0a      	bgt.n	d84c4 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d84ae:	eddf 7a06 	vldr	s15, [pc, #24]	; d84c8 <_ZN9TimeClass4zoneEf+0x38>
   d84b2:	ee60 7a27 	vmul.f32	s15, s0, s15
   d84b6:	ee17 0a90 	vmov	r0, s15
   d84ba:	f000 feff 	bl	d92bc <__aeabi_f2lz>
   d84be:	4b03      	ldr	r3, [pc, #12]	; (d84cc <_ZN9TimeClass4zoneEf+0x3c>)
   d84c0:	e9c3 0100 	strd	r0, r1, [r3]
}
   d84c4:	bd08      	pop	{r3, pc}
   d84c6:	bf00      	nop
   d84c8:	45610000 	.word	0x45610000
   d84cc:	2003e5f0 	.word	0x2003e5f0

000d84d0 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   d84d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d84d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d84d8:	b508      	push	{r3, lr}
    if (offset < 0 || offset > 2)
   d84da:	d411      	bmi.n	d8500 <_ZN9TimeClass12setDSTOffsetEf+0x30>
   d84dc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d84e0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d84e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d84e8:	dc0a      	bgt.n	d8500 <_ZN9TimeClass12setDSTOffsetEf+0x30>
    {
        return;
    }
    dst_cache = offset * 3600;
   d84ea:	eddf 7a06 	vldr	s15, [pc, #24]	; d8504 <_ZN9TimeClass12setDSTOffsetEf+0x34>
   d84ee:	ee60 7a27 	vmul.f32	s15, s0, s15
   d84f2:	ee17 0a90 	vmov	r0, s15
   d84f6:	f000 fee1 	bl	d92bc <__aeabi_f2lz>
   d84fa:	4b03      	ldr	r3, [pc, #12]	; (d8508 <_ZN9TimeClass12setDSTOffsetEf+0x38>)
   d84fc:	e9c3 0100 	strd	r0, r1, [r3]
}
   d8500:	bd08      	pop	{r3, pc}
   d8502:	bf00      	nop
   d8504:	45610000 	.word	0x45610000
   d8508:	2003dee8 	.word	0x2003dee8

000d850c <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   d850c:	4b03      	ldr	r3, [pc, #12]	; (d851c <_ZN9TimeClass8beginDSTEv+0x10>)
   d850e:	e9d3 0100 	ldrd	r0, r1, [r3]
   d8512:	4b03      	ldr	r3, [pc, #12]	; (d8520 <_ZN9TimeClass8beginDSTEv+0x14>)
   d8514:	e9c3 0100 	strd	r0, r1, [r3]
}
   d8518:	4770      	bx	lr
   d851a:	bf00      	nop
   d851c:	2003dee8 	.word	0x2003dee8
   d8520:	2003e5e8 	.word	0x2003e5e8

000d8524 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d8524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d8526:	4602      	mov	r2, r0
   d8528:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d852a:	4668      	mov	r0, sp
    struct timeval tv = {
   d852c:	2100      	movs	r1, #0
    };
   d852e:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d8532:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d8536:	f7fd fc3d 	bl	d5db4 <hal_rtc_set_time>
   d853a:	4602      	mov	r2, r0
   d853c:	b910      	cbnz	r0, d8544 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d853e:	4601      	mov	r1, r0
   d8540:	f7fd fdfa 	bl	d6138 <system_notify_time_changed>
    }
}
   d8544:	b005      	add	sp, #20
   d8546:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d854c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d854c:	b530      	push	{r4, r5, lr}
   d854e:	4604      	mov	r4, r0
    t += time_zone_cache;
   d8550:	4818      	ldr	r0, [pc, #96]	; (d85b4 <_ZN9TimeClass7timeStrEx+0x68>)
   d8552:	e9d0 1000 	ldrd	r1, r0, [r0]
   d8556:	1852      	adds	r2, r2, r1
   d8558:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d855c:	4816      	ldr	r0, [pc, #88]	; (d85b8 <_ZN9TimeClass7timeStrEx+0x6c>)
   d855e:	e9d0 1000 	ldrd	r1, r0, [r0]
   d8562:	1852      	adds	r2, r2, r1
{
   d8564:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d8566:	eb40 0303 	adc.w	r3, r0, r3
   d856a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d856e:	2224      	movs	r2, #36	; 0x24
   d8570:	eb0d 0002 	add.w	r0, sp, r2
   d8574:	2100      	movs	r1, #0
   d8576:	f000 ff29 	bl	d93cc <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d857a:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d857c:	a909      	add	r1, sp, #36	; 0x24
   d857e:	4668      	mov	r0, sp
   d8580:	f7fd fec6 	bl	d6310 <localtime_r>
    char ascstr[26] = {};
   d8584:	2216      	movs	r2, #22
   d8586:	4629      	mov	r1, r5
   d8588:	a803      	add	r0, sp, #12
   d858a:	9502      	str	r5, [sp, #8]
   d858c:	f000 ff1e 	bl	d93cc <memset>
    asctime_r(&calendar_time, ascstr);
   d8590:	a902      	add	r1, sp, #8
   d8592:	a809      	add	r0, sp, #36	; 0x24
   d8594:	f000 fec6 	bl	d9324 <asctime_r>
    int len = strlen(ascstr);
   d8598:	a802      	add	r0, sp, #8
   d859a:	f000 ffbe 	bl	d951a <strlen>
    ascstr[len-1] = 0; // remove final newline
   d859e:	ab12      	add	r3, sp, #72	; 0x48
   d85a0:	4418      	add	r0, r3
    return String(ascstr);
   d85a2:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d85a4:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d85a8:	4620      	mov	r0, r4
   d85aa:	f7ff fefa 	bl	d83a2 <_ZN6StringC1EPKc>
}
   d85ae:	4620      	mov	r0, r4
   d85b0:	b013      	add	sp, #76	; 0x4c
   d85b2:	bd30      	pop	{r4, r5, pc}
   d85b4:	2003e5f0 	.word	0x2003e5f0
   d85b8:	2003e5e8 	.word	0x2003e5e8

000d85bc <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d85bc:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d85be:	2000      	movs	r0, #0
   d85c0:	f7fd fbe0 	bl	d5d84 <hal_rtc_time_is_valid>
    if (rtcstate)
   d85c4:	4604      	mov	r4, r0
   d85c6:	b9a0      	cbnz	r0, d85f2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d85c8:	f7fd fd7e 	bl	d60c8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d85cc:	2801      	cmp	r0, #1
   d85ce:	d110      	bne.n	d85f2 <_ZN9TimeClass7isValidEv+0x36>
   d85d0:	4620      	mov	r0, r4
   d85d2:	f7fd fda9 	bl	d6128 <system_thread_get_state>
   d85d6:	b960      	cbnz	r0, d85f2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d85d8:	f7ff ff4c 	bl	d8474 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d85dc:	b910      	cbnz	r0, d85e4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d85de:	f7fd fdc7 	bl	d6170 <spark_process>
        while (_while() && !_condition()) {
   d85e2:	e7f9      	b.n	d85d8 <_ZN9TimeClass7isValidEv+0x1c>
   d85e4:	f7ff ff46 	bl	d8474 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d85e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d85ec:	2000      	movs	r0, #0
   d85ee:	f7fd bbc9 	b.w	d5d84 <hal_rtc_time_is_valid>
}
   d85f2:	4620      	mov	r0, r4
   d85f4:	bd10      	pop	{r4, pc}

000d85f6 <_ZN9TimeClass3nowEv>:
{
   d85f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d85f8:	f7ff ffe0 	bl	d85bc <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d85fc:	2210      	movs	r2, #16
   d85fe:	2100      	movs	r1, #0
   d8600:	4668      	mov	r0, sp
   d8602:	f000 fee3 	bl	d93cc <memset>
    hal_rtc_get_time(&tv, nullptr);
   d8606:	2100      	movs	r1, #0
   d8608:	4668      	mov	r0, sp
   d860a:	f7fd fbcb 	bl	d5da4 <hal_rtc_get_time>
}
   d860e:	9800      	ldr	r0, [sp, #0]
   d8610:	b005      	add	sp, #20
   d8612:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8618 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8618:	4b02      	ldr	r3, [pc, #8]	; (d8624 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d861a:	681a      	ldr	r2, [r3, #0]
   d861c:	4b02      	ldr	r3, [pc, #8]	; (d8628 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d861e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d8620:	4770      	bx	lr
   d8622:	bf00      	nop
   d8624:	2003dee4 	.word	0x2003dee4
   d8628:	2003e5e0 	.word	0x2003e5e0

000d862c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d862c:	4770      	bx	lr

000d862e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d862e:	7441      	strb	r1, [r0, #17]
}
   d8630:	4770      	bx	lr

000d8632 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8632:	4770      	bx	lr

000d8634 <_ZN11USARTSerial17availableForWriteEv>:
{
   d8634:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d8636:	7c00      	ldrb	r0, [r0, #16]
   d8638:	f7fd fcc4 	bl	d5fc4 <hal_usart_available_data_for_write>
}
   d863c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8640:	bd08      	pop	{r3, pc}

000d8642 <_ZN11USARTSerial9availableEv>:
{
   d8642:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d8644:	7c00      	ldrb	r0, [r0, #16]
   d8646:	f7fd fc95 	bl	d5f74 <hal_usart_available>
}
   d864a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d864e:	bd08      	pop	{r3, pc}

000d8650 <_ZN11USARTSerial4peekEv>:
{
   d8650:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d8652:	7c00      	ldrb	r0, [r0, #16]
   d8654:	f7fd fc9e 	bl	d5f94 <hal_usart_peek>
}
   d8658:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d865c:	bd08      	pop	{r3, pc}

000d865e <_ZN11USARTSerial4readEv>:
{
   d865e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d8660:	7c00      	ldrb	r0, [r0, #16]
   d8662:	f7fd fc8f 	bl	d5f84 <hal_usart_read>
}
   d8666:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d866a:	bd08      	pop	{r3, pc}

000d866c <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d866c:	7c00      	ldrb	r0, [r0, #16]
   d866e:	f7fd bc99 	b.w	d5fa4 <hal_usart_flush>

000d8672 <_ZN11USARTSerial5writeEh>:
{
   d8672:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8674:	7c45      	ldrb	r5, [r0, #17]
{
   d8676:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8678:	b12d      	cbz	r5, d8686 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d867a:	7c20      	ldrb	r0, [r4, #16]
}
   d867c:	b003      	add	sp, #12
   d867e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d8682:	f7fd bc6f 	b.w	d5f64 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8686:	7c00      	ldrb	r0, [r0, #16]
   d8688:	9101      	str	r1, [sp, #4]
   d868a:	f7fd fc9b 	bl	d5fc4 <hal_usart_available_data_for_write>
   d868e:	2800      	cmp	r0, #0
   d8690:	9901      	ldr	r1, [sp, #4]
   d8692:	dcf2      	bgt.n	d867a <_ZN11USARTSerial5writeEh+0x8>
}
   d8694:	4628      	mov	r0, r5
   d8696:	b003      	add	sp, #12
   d8698:	bd30      	pop	{r4, r5, pc}

000d869a <_ZN11USARTSerialD0Ev>:
   d869a:	b510      	push	{r4, lr}
   d869c:	2114      	movs	r1, #20
   d869e:	4604      	mov	r4, r0
   d86a0:	f000 fa14 	bl	d8acc <_ZdlPvj>
   d86a4:	4620      	mov	r0, r4
   d86a6:	bd10      	pop	{r4, pc}

000d86a8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d86a8:	b510      	push	{r4, lr}
   d86aa:	f04f 0c00 	mov.w	ip, #0
   d86ae:	4604      	mov	r4, r0
   d86b0:	4608      	mov	r0, r1
   d86b2:	4611      	mov	r1, r2
   d86b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d86b8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d86bc:	4a04      	ldr	r2, [pc, #16]	; (d86d0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d86be:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d86c0:	2201      	movs	r2, #1
  _serial = serial;
   d86c2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d86c4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d86c6:	461a      	mov	r2, r3
   d86c8:	f7fd fc3c 	bl	d5f44 <hal_usart_init>
}
   d86cc:	4620      	mov	r0, r4
   d86ce:	bd10      	pop	{r4, pc}
   d86d0:	000d9e18 	.word	0x000d9e18

000d86d4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d86d4:	7c00      	ldrb	r0, [r0, #16]
   d86d6:	2300      	movs	r3, #0
   d86d8:	f7fd bc7c 	b.w	d5fd4 <hal_usart_begin_config>

000d86dc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d86dc:	2200      	movs	r2, #0
   d86de:	f7ff bff9 	b.w	d86d4 <_ZN11USARTSerial5beginEmm>

000d86e2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d86e2:	7c00      	ldrb	r0, [r0, #16]
   d86e4:	f7fd bc36 	b.w	d5f54 <hal_usart_end>

000d86e8 <_Z22__fetch_global_Serial1v>:
{
   d86e8:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d86ea:	4c0d      	ldr	r4, [pc, #52]	; (d8720 <_Z22__fetch_global_Serial1v+0x38>)
   d86ec:	7821      	ldrb	r1, [r4, #0]
   d86ee:	f3bf 8f5b 	dmb	ish
   d86f2:	f011 0101 	ands.w	r1, r1, #1
   d86f6:	d110      	bne.n	d871a <_Z22__fetch_global_Serial1v+0x32>
   d86f8:	4620      	mov	r0, r4
   d86fa:	9101      	str	r1, [sp, #4]
   d86fc:	f7fb fcdc 	bl	d40b8 <__cxa_guard_acquire>
   d8700:	9901      	ldr	r1, [sp, #4]
   d8702:	b150      	cbz	r0, d871a <_Z22__fetch_global_Serial1v+0x32>
   d8704:	4b07      	ldr	r3, [pc, #28]	; (d8724 <_Z22__fetch_global_Serial1v+0x3c>)
   d8706:	4a08      	ldr	r2, [pc, #32]	; (d8728 <_Z22__fetch_global_Serial1v+0x40>)
   d8708:	4808      	ldr	r0, [pc, #32]	; (d872c <_Z22__fetch_global_Serial1v+0x44>)
   d870a:	f7ff ffcd 	bl	d86a8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d870e:	4620      	mov	r0, r4
   d8710:	f7fb fcd7 	bl	d40c2 <__cxa_guard_release>
   d8714:	4806      	ldr	r0, [pc, #24]	; (d8730 <_Z22__fetch_global_Serial1v+0x48>)
   d8716:	f000 fe2b 	bl	d9370 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d871a:	4804      	ldr	r0, [pc, #16]	; (d872c <_Z22__fetch_global_Serial1v+0x44>)
   d871c:	b002      	add	sp, #8
   d871e:	bd10      	pop	{r4, pc}
   d8720:	2003e5f8 	.word	0x2003e5f8
   d8724:	2003e680 	.word	0x2003e680
   d8728:	2003e5fc 	.word	0x2003e5fc
   d872c:	2003e704 	.word	0x2003e704
   d8730:	000d8633 	.word	0x000d8633

000d8734 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8734:	7441      	strb	r1, [r0, #17]
}
   d8736:	4770      	bx	lr

000d8738 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8738:	4770      	bx	lr

000d873a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d873a:	4770      	bx	lr

000d873c <_ZN9USBSerial4readEv>:
{
   d873c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d873e:	2100      	movs	r1, #0
   d8740:	7c00      	ldrb	r0, [r0, #16]
   d8742:	f7fd fc77 	bl	d6034 <HAL_USB_USART_Receive_Data>
}
   d8746:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d874a:	bd08      	pop	{r3, pc}

000d874c <_ZN9USBSerial4peekEv>:
{
   d874c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d874e:	2101      	movs	r1, #1
   d8750:	7c00      	ldrb	r0, [r0, #16]
   d8752:	f7fd fc6f 	bl	d6034 <HAL_USB_USART_Receive_Data>
}
   d8756:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d875a:	bd08      	pop	{r3, pc}

000d875c <_ZN9USBSerial17availableForWriteEv>:
{
   d875c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d875e:	7c00      	ldrb	r0, [r0, #16]
   d8760:	f7fd fc60 	bl	d6024 <HAL_USB_USART_Available_Data_For_Write>
}
   d8764:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8768:	bd08      	pop	{r3, pc}

000d876a <_ZN9USBSerial9availableEv>:
{
   d876a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d876c:	7c00      	ldrb	r0, [r0, #16]
   d876e:	f7fd fc51 	bl	d6014 <HAL_USB_USART_Available_Data>
}
   d8772:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8776:	bd08      	pop	{r3, pc}

000d8778 <_ZN9USBSerial5writeEh>:
{
   d8778:	b513      	push	{r0, r1, r4, lr}
   d877a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d877c:	7c00      	ldrb	r0, [r0, #16]
{
   d877e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8780:	f7fd fc50 	bl	d6024 <HAL_USB_USART_Available_Data_For_Write>
   d8784:	2800      	cmp	r0, #0
   d8786:	9901      	ldr	r1, [sp, #4]
   d8788:	dc01      	bgt.n	d878e <_ZN9USBSerial5writeEh+0x16>
   d878a:	7c60      	ldrb	r0, [r4, #17]
   d878c:	b120      	cbz	r0, d8798 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d878e:	7c20      	ldrb	r0, [r4, #16]
   d8790:	f7fd fc58 	bl	d6044 <HAL_USB_USART_Send_Data>
   d8794:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d8798:	b002      	add	sp, #8
   d879a:	bd10      	pop	{r4, pc}

000d879c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d879c:	7c00      	ldrb	r0, [r0, #16]
   d879e:	f7fd bc59 	b.w	d6054 <HAL_USB_USART_Flush_Data>

000d87a2 <_ZN9USBSerialD0Ev>:
   d87a2:	b510      	push	{r4, lr}
   d87a4:	2114      	movs	r1, #20
   d87a6:	4604      	mov	r4, r0
   d87a8:	f000 f990 	bl	d8acc <_ZdlPvj>
   d87ac:	4620      	mov	r0, r4
   d87ae:	bd10      	pop	{r4, pc}

000d87b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d87b0:	b510      	push	{r4, lr}
   d87b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d87b6:	4604      	mov	r4, r0
   d87b8:	4608      	mov	r0, r1
   d87ba:	2100      	movs	r1, #0
   d87bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d87c0:	4b04      	ldr	r3, [pc, #16]	; (d87d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d87c2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d87c4:	2301      	movs	r3, #1
  _serial = serial;
   d87c6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d87c8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d87ca:	4611      	mov	r1, r2
   d87cc:	f7fd fc0a 	bl	d5fe4 <HAL_USB_USART_Init>
}
   d87d0:	4620      	mov	r0, r4
   d87d2:	bd10      	pop	{r4, pc}
   d87d4:	000d9e48 	.word	0x000d9e48

000d87d8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d87d8:	7c00      	ldrb	r0, [r0, #16]
   d87da:	2200      	movs	r2, #0
   d87dc:	f7fd bc0a 	b.w	d5ff4 <HAL_USB_USART_Begin>

000d87e0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d87e0:	7c00      	ldrb	r0, [r0, #16]
   d87e2:	f7fd bc0f 	b.w	d6004 <HAL_USB_USART_End>

000d87e6 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   d87e6:	7c00      	ldrb	r0, [r0, #16]
   d87e8:	f7fd bc3c 	b.w	d6064 <HAL_USB_USART_Is_Connected>

000d87ec <_Z19acquireSerialBufferv>:
{
   d87ec:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d87ee:	2214      	movs	r2, #20
{
   d87f0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d87f2:	2100      	movs	r1, #0
   d87f4:	f000 fdea 	bl	d93cc <memset>
}
   d87f8:	4620      	mov	r0, r4
   d87fa:	bd10      	pop	{r4, pc}

000d87fc <_Z16_fetch_usbserialv>:
{
   d87fc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d87fe:	4c0f      	ldr	r4, [pc, #60]	; (d883c <_Z16_fetch_usbserialv+0x40>)
{
   d8800:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8802:	a803      	add	r0, sp, #12
   d8804:	f7ff fff2 	bl	d87ec <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8808:	7821      	ldrb	r1, [r4, #0]
   d880a:	f3bf 8f5b 	dmb	ish
   d880e:	f011 0101 	ands.w	r1, r1, #1
   d8812:	d10f      	bne.n	d8834 <_Z16_fetch_usbserialv+0x38>
   d8814:	4620      	mov	r0, r4
   d8816:	9101      	str	r1, [sp, #4]
   d8818:	f7fb fc4e 	bl	d40b8 <__cxa_guard_acquire>
   d881c:	9901      	ldr	r1, [sp, #4]
   d881e:	b148      	cbz	r0, d8834 <_Z16_fetch_usbserialv+0x38>
   d8820:	aa03      	add	r2, sp, #12
   d8822:	4807      	ldr	r0, [pc, #28]	; (d8840 <_Z16_fetch_usbserialv+0x44>)
   d8824:	f7ff ffc4 	bl	d87b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8828:	4620      	mov	r0, r4
   d882a:	f7fb fc4a 	bl	d40c2 <__cxa_guard_release>
   d882e:	4805      	ldr	r0, [pc, #20]	; (d8844 <_Z16_fetch_usbserialv+0x48>)
   d8830:	f000 fd9e 	bl	d9370 <atexit>
	return _usbserial;
}
   d8834:	4802      	ldr	r0, [pc, #8]	; (d8840 <_Z16_fetch_usbserialv+0x44>)
   d8836:	b008      	add	sp, #32
   d8838:	bd10      	pop	{r4, pc}
   d883a:	bf00      	nop
   d883c:	2003e718 	.word	0x2003e718
   d8840:	2003e71c 	.word	0x2003e71c
   d8844:	000d8739 	.word	0x000d8739

000d8848 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8848:	4b01      	ldr	r3, [pc, #4]	; (d8850 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d884a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d884c:	4770      	bx	lr
   d884e:	bf00      	nop
   d8850:	2003def0 	.word	0x2003def0

000d8854 <serialEventRun>:
{
   d8854:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8856:	4b0b      	ldr	r3, [pc, #44]	; (d8884 <serialEventRun+0x30>)
   d8858:	b143      	cbz	r3, d886c <serialEventRun+0x18>
   d885a:	f7ff ffcf 	bl	d87fc <_Z16_fetch_usbserialv>
   d885e:	6803      	ldr	r3, [r0, #0]
   d8860:	691b      	ldr	r3, [r3, #16]
   d8862:	4798      	blx	r3
   d8864:	2800      	cmp	r0, #0
   d8866:	dd01      	ble.n	d886c <serialEventRun+0x18>
        serialEvent();
   d8868:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d886c:	4b06      	ldr	r3, [pc, #24]	; (d8888 <serialEventRun+0x34>)
   d886e:	b143      	cbz	r3, d8882 <serialEventRun+0x2e>
   d8870:	f7ff ff3a 	bl	d86e8 <_Z22__fetch_global_Serial1v>
   d8874:	6803      	ldr	r3, [r0, #0]
   d8876:	691b      	ldr	r3, [r3, #16]
   d8878:	4798      	blx	r3
   d887a:	2800      	cmp	r0, #0
   d887c:	dd01      	ble.n	d8882 <serialEventRun+0x2e>
        serialEvent1();
   d887e:	f3af 8000 	nop.w
}
   d8882:	bd08      	pop	{r3, pc}
	...

000d888c <_post_loop>:
{
   d888c:	b508      	push	{r3, lr}
	serialEventRun();
   d888e:	f7ff ffe1 	bl	d8854 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8892:	f7fd fa6f 	bl	d5d74 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8896:	4b01      	ldr	r3, [pc, #4]	; (d889c <_post_loop+0x10>)
   d8898:	6018      	str	r0, [r3, #0]
}
   d889a:	bd08      	pop	{r3, pc}
   d889c:	2003e738 	.word	0x2003e738

000d88a0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d88a0:	4805      	ldr	r0, [pc, #20]	; (d88b8 <_Z33system_initialize_user_backup_ramv+0x18>)
   d88a2:	4a06      	ldr	r2, [pc, #24]	; (d88bc <_Z33system_initialize_user_backup_ramv+0x1c>)
   d88a4:	4906      	ldr	r1, [pc, #24]	; (d88c0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d88a6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d88a8:	1a12      	subs	r2, r2, r0
   d88aa:	f000 fd67 	bl	d937c <memcpy>
    __backup_sram_signature = signature;
   d88ae:	4b05      	ldr	r3, [pc, #20]	; (d88c4 <_Z33system_initialize_user_backup_ramv+0x24>)
   d88b0:	4a05      	ldr	r2, [pc, #20]	; (d88c8 <_Z33system_initialize_user_backup_ramv+0x28>)
   d88b2:	601a      	str	r2, [r3, #0]
}
   d88b4:	bd08      	pop	{r3, pc}
   d88b6:	bf00      	nop
   d88b8:	2003f400 	.word	0x2003f400
   d88bc:	2003f408 	.word	0x2003f408
   d88c0:	000da000 	.word	0x000da000
   d88c4:	2003f404 	.word	0x2003f404
   d88c8:	9a271c1e 	.word	0x9a271c1e

000d88cc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d88cc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d88ce:	2300      	movs	r3, #0
   d88d0:	9300      	str	r3, [sp, #0]
   d88d2:	461a      	mov	r2, r3
   d88d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d88d8:	f7fd fc40 	bl	d615c <system_ctrl_set_result>
}
   d88dc:	b003      	add	sp, #12
   d88de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d88e4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d88e4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d88e6:	8843      	ldrh	r3, [r0, #2]
   d88e8:	2b0a      	cmp	r3, #10
   d88ea:	d008      	beq.n	d88fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d88ec:	2b50      	cmp	r3, #80	; 0x50
   d88ee:	d10b      	bne.n	d8908 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d88f0:	4b09      	ldr	r3, [pc, #36]	; (d8918 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d88f2:	681b      	ldr	r3, [r3, #0]
   d88f4:	b14b      	cbz	r3, d890a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d88f6:	b003      	add	sp, #12
   d88f8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d88fc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d88fe:	f7ff ffe5 	bl	d88cc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d8902:	b003      	add	sp, #12
   d8904:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8908:	2300      	movs	r3, #0
   d890a:	9300      	str	r3, [sp, #0]
   d890c:	461a      	mov	r2, r3
   d890e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8912:	f7fd fc23 	bl	d615c <system_ctrl_set_result>
}
   d8916:	e7f4      	b.n	d8902 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8918:	2003e734 	.word	0x2003e734

000d891c <module_user_init_hook>:
{
   d891c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d891e:	4812      	ldr	r0, [pc, #72]	; (d8968 <module_user_init_hook+0x4c>)
   d8920:	2100      	movs	r1, #0
   d8922:	f7fd fced 	bl	d6300 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d8926:	4b11      	ldr	r3, [pc, #68]	; (d896c <module_user_init_hook+0x50>)
   d8928:	681a      	ldr	r2, [r3, #0]
   d892a:	4b11      	ldr	r3, [pc, #68]	; (d8970 <module_user_init_hook+0x54>)
   d892c:	429a      	cmp	r2, r3
   d892e:	4b11      	ldr	r3, [pc, #68]	; (d8974 <module_user_init_hook+0x58>)
   d8930:	bf0c      	ite	eq
   d8932:	2201      	moveq	r2, #1
   d8934:	2200      	movne	r2, #0
   d8936:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8938:	d001      	beq.n	d893e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d893a:	f7ff ffb1 	bl	d88a0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d893e:	f7fd fa09 	bl	d5d54 <HAL_RNG_GetRandomNumber>
   d8942:	4604      	mov	r4, r0
    srand(seed);
   d8944:	f000 fd4a 	bl	d93dc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8948:	4b0b      	ldr	r3, [pc, #44]	; (d8978 <module_user_init_hook+0x5c>)
   d894a:	b113      	cbz	r3, d8952 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d894c:	4620      	mov	r0, r4
   d894e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8952:	2100      	movs	r1, #0
   d8954:	4808      	ldr	r0, [pc, #32]	; (d8978 <module_user_init_hook+0x5c>)
   d8956:	f7fd fc2b 	bl	d61b0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d895a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d895e:	4807      	ldr	r0, [pc, #28]	; (d897c <module_user_init_hook+0x60>)
   d8960:	2100      	movs	r1, #0
   d8962:	f7fd bbf1 	b.w	d6148 <system_ctrl_set_app_request_handler>
   d8966:	bf00      	nop
   d8968:	000d8849 	.word	0x000d8849
   d896c:	2003f404 	.word	0x2003f404
   d8970:	9a271c1e 	.word	0x9a271c1e
   d8974:	2003e730 	.word	0x2003e730
   d8978:	00000000 	.word	0x00000000
   d897c:	000d88e5 	.word	0x000d88e5

000d8980 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d8980:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d8982:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8984:	d902      	bls.n	d898c <pinAvailable+0xc>
    return false;
   d8986:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d8988:	b002      	add	sp, #8
   d898a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d898c:	f1a0 030b 	sub.w	r3, r0, #11
   d8990:	2b02      	cmp	r3, #2
   d8992:	d81a      	bhi.n	d89ca <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8994:	4c17      	ldr	r4, [pc, #92]	; (d89f4 <pinAvailable+0x74>)
   d8996:	7821      	ldrb	r1, [r4, #0]
   d8998:	f3bf 8f5b 	dmb	ish
   d899c:	f011 0101 	ands.w	r1, r1, #1
   d89a0:	d10b      	bne.n	d89ba <pinAvailable+0x3a>
   d89a2:	4620      	mov	r0, r4
   d89a4:	9101      	str	r1, [sp, #4]
   d89a6:	f7fb fb87 	bl	d40b8 <__cxa_guard_acquire>
   d89aa:	9901      	ldr	r1, [sp, #4]
   d89ac:	b128      	cbz	r0, d89ba <pinAvailable+0x3a>
   d89ae:	4812      	ldr	r0, [pc, #72]	; (d89f8 <pinAvailable+0x78>)
   d89b0:	f7ff fbf2 	bl	d8198 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d89b4:	4620      	mov	r0, r4
   d89b6:	f7fb fb84 	bl	d40c2 <__cxa_guard_release>
   d89ba:	4b0f      	ldr	r3, [pc, #60]	; (d89f8 <pinAvailable+0x78>)
   d89bc:	7818      	ldrb	r0, [r3, #0]
   d89be:	f7fd fa99 	bl	d5ef4 <hal_spi_is_enabled>
   d89c2:	2800      	cmp	r0, #0
   d89c4:	d1df      	bne.n	d8986 <pinAvailable+0x6>
  return true; // 'pin' is available
   d89c6:	2001      	movs	r0, #1
   d89c8:	e7de      	b.n	d8988 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d89ca:	2801      	cmp	r0, #1
   d89cc:	d809      	bhi.n	d89e2 <pinAvailable+0x62>
   d89ce:	f000 f859 	bl	d8a84 <_Z19__fetch_global_Wirev>
   d89d2:	2100      	movs	r1, #0
   d89d4:	7c00      	ldrb	r0, [r0, #16]
   d89d6:	f7fd fa45 	bl	d5e64 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d89da:	f080 0001 	eor.w	r0, r0, #1
   d89de:	b2c0      	uxtb	r0, r0
   d89e0:	e7d2      	b.n	d8988 <pinAvailable+0x8>
   d89e2:	3809      	subs	r0, #9
   d89e4:	2801      	cmp	r0, #1
   d89e6:	d8ee      	bhi.n	d89c6 <pinAvailable+0x46>
   d89e8:	f7ff fe7e 	bl	d86e8 <_Z22__fetch_global_Serial1v>
   d89ec:	7c00      	ldrb	r0, [r0, #16]
   d89ee:	f7fd fae1 	bl	d5fb4 <hal_usart_is_enabled>
   d89f2:	e7f2      	b.n	d89da <pinAvailable+0x5a>
   d89f4:	2003e318 	.word	0x2003e318
   d89f8:	2003e31c 	.word	0x2003e31c

000d89fc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d89fc:	2823      	cmp	r0, #35	; 0x23
{
   d89fe:	b538      	push	{r3, r4, r5, lr}
   d8a00:	4604      	mov	r4, r0
   d8a02:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8a04:	d80a      	bhi.n	d8a1c <pinMode+0x20>
   d8a06:	29ff      	cmp	r1, #255	; 0xff
   d8a08:	d008      	beq.n	d8a1c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d8a0a:	f7ff ffb9 	bl	d8980 <pinAvailable>
   d8a0e:	b128      	cbz	r0, d8a1c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8a10:	4629      	mov	r1, r5
   d8a12:	4620      	mov	r0, r4
}
   d8a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d8a18:	f7fd b9d4 	b.w	d5dc4 <HAL_Pin_Mode>
}
   d8a1c:	bd38      	pop	{r3, r4, r5, pc}

000d8a1e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8a1e:	b538      	push	{r3, r4, r5, lr}
   d8a20:	4604      	mov	r4, r0
   d8a22:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8a24:	f7fd f9d6 	bl	d5dd4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8a28:	28ff      	cmp	r0, #255	; 0xff
   d8a2a:	d010      	beq.n	d8a4e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d8a2c:	2806      	cmp	r0, #6
   d8a2e:	d804      	bhi.n	d8a3a <digitalWrite+0x1c>
   d8a30:	234d      	movs	r3, #77	; 0x4d
   d8a32:	fa23 f000 	lsr.w	r0, r3, r0
   d8a36:	07c3      	lsls	r3, r0, #31
   d8a38:	d409      	bmi.n	d8a4e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8a3a:	4620      	mov	r0, r4
   d8a3c:	f7ff ffa0 	bl	d8980 <pinAvailable>
   d8a40:	b128      	cbz	r0, d8a4e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8a42:	4629      	mov	r1, r5
   d8a44:	4620      	mov	r0, r4
}
   d8a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d8a4a:	f7fd b9cb 	b.w	d5de4 <HAL_GPIO_Write>
}
   d8a4e:	bd38      	pop	{r3, r4, r5, pc}

000d8a50 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8a50:	4770      	bx	lr
	...

000d8a54 <_Z17acquireWireBufferv>:
{
   d8a54:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8a56:	2300      	movs	r3, #0
   d8a58:	2520      	movs	r5, #32
   d8a5a:	8043      	strh	r3, [r0, #2]
   d8a5c:	2314      	movs	r3, #20
{
   d8a5e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8a60:	8003      	strh	r3, [r0, #0]
   d8a62:	6085      	str	r5, [r0, #8]
   d8a64:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8a66:	4906      	ldr	r1, [pc, #24]	; (d8a80 <_Z17acquireWireBufferv+0x2c>)
   d8a68:	4628      	mov	r0, r5
   d8a6a:	f000 f833 	bl	d8ad4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8a6e:	4904      	ldr	r1, [pc, #16]	; (d8a80 <_Z17acquireWireBufferv+0x2c>)
	};
   d8a70:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8a72:	4628      	mov	r0, r5
   d8a74:	f000 f82e 	bl	d8ad4 <_ZnajRKSt9nothrow_t>
	};
   d8a78:	60e0      	str	r0, [r4, #12]
}
   d8a7a:	4620      	mov	r0, r4
   d8a7c:	bd38      	pop	{r3, r4, r5, pc}
   d8a7e:	bf00      	nop
   d8a80:	000d9e70 	.word	0x000d9e70

000d8a84 <_Z19__fetch_global_Wirev>:
{
   d8a84:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8a86:	4d0e      	ldr	r5, [pc, #56]	; (d8ac0 <_Z19__fetch_global_Wirev+0x3c>)
   d8a88:	7829      	ldrb	r1, [r5, #0]
   d8a8a:	f3bf 8f5b 	dmb	ish
   d8a8e:	f011 0401 	ands.w	r4, r1, #1
{
   d8a92:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8a94:	d111      	bne.n	d8aba <_Z19__fetch_global_Wirev+0x36>
   d8a96:	4628      	mov	r0, r5
   d8a98:	f7fb fb0e 	bl	d40b8 <__cxa_guard_acquire>
   d8a9c:	b168      	cbz	r0, d8aba <_Z19__fetch_global_Wirev+0x36>
   d8a9e:	a801      	add	r0, sp, #4
   d8aa0:	f7ff ffd8 	bl	d8a54 <_Z17acquireWireBufferv>
   d8aa4:	aa01      	add	r2, sp, #4
   d8aa6:	4621      	mov	r1, r4
   d8aa8:	4806      	ldr	r0, [pc, #24]	; (d8ac4 <_Z19__fetch_global_Wirev+0x40>)
   d8aaa:	f7fd ffcd 	bl	d6a48 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8aae:	4628      	mov	r0, r5
   d8ab0:	f7fb fb07 	bl	d40c2 <__cxa_guard_release>
   d8ab4:	4804      	ldr	r0, [pc, #16]	; (d8ac8 <_Z19__fetch_global_Wirev+0x44>)
   d8ab6:	f000 fc5b 	bl	d9370 <atexit>
	return wire;
}
   d8aba:	4802      	ldr	r0, [pc, #8]	; (d8ac4 <_Z19__fetch_global_Wirev+0x40>)
   d8abc:	b007      	add	sp, #28
   d8abe:	bd30      	pop	{r4, r5, pc}
   d8ac0:	2003e73c 	.word	0x2003e73c
   d8ac4:	2003e740 	.word	0x2003e740
   d8ac8:	000d8a51 	.word	0x000d8a51

000d8acc <_ZdlPvj>:
   d8acc:	f7fb bae7 	b.w	d409e <_ZdlPv>

000d8ad0 <_ZnwjRKSt9nothrow_t>:
   d8ad0:	f7fb bae1 	b.w	d4096 <_Znwj>

000d8ad4 <_ZnajRKSt9nothrow_t>:
   d8ad4:	f7fb bae1 	b.w	d409a <_Znaj>

000d8ad8 <_ZSt25__throw_bad_function_callv>:
   d8ad8:	b508      	push	{r3, lr}
   d8ada:	f7fd fc01 	bl	d62e0 <abort>
	...

000d8ae0 <__aeabi_drsub>:
   d8ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8ae4:	e002      	b.n	d8aec <__adddf3>
   d8ae6:	bf00      	nop

000d8ae8 <__aeabi_dsub>:
   d8ae8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8aec <__adddf3>:
   d8aec:	b530      	push	{r4, r5, lr}
   d8aee:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8af2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8af6:	ea94 0f05 	teq	r4, r5
   d8afa:	bf08      	it	eq
   d8afc:	ea90 0f02 	teqeq	r0, r2
   d8b00:	bf1f      	itttt	ne
   d8b02:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8b06:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8b0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8b0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8b12:	f000 80e2 	beq.w	d8cda <__adddf3+0x1ee>
   d8b16:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8b1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8b1e:	bfb8      	it	lt
   d8b20:	426d      	neglt	r5, r5
   d8b22:	dd0c      	ble.n	d8b3e <__adddf3+0x52>
   d8b24:	442c      	add	r4, r5
   d8b26:	ea80 0202 	eor.w	r2, r0, r2
   d8b2a:	ea81 0303 	eor.w	r3, r1, r3
   d8b2e:	ea82 0000 	eor.w	r0, r2, r0
   d8b32:	ea83 0101 	eor.w	r1, r3, r1
   d8b36:	ea80 0202 	eor.w	r2, r0, r2
   d8b3a:	ea81 0303 	eor.w	r3, r1, r3
   d8b3e:	2d36      	cmp	r5, #54	; 0x36
   d8b40:	bf88      	it	hi
   d8b42:	bd30      	pophi	{r4, r5, pc}
   d8b44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8b48:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8b4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8b50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8b54:	d002      	beq.n	d8b5c <__adddf3+0x70>
   d8b56:	4240      	negs	r0, r0
   d8b58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8b5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8b60:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8b64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8b68:	d002      	beq.n	d8b70 <__adddf3+0x84>
   d8b6a:	4252      	negs	r2, r2
   d8b6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8b70:	ea94 0f05 	teq	r4, r5
   d8b74:	f000 80a7 	beq.w	d8cc6 <__adddf3+0x1da>
   d8b78:	f1a4 0401 	sub.w	r4, r4, #1
   d8b7c:	f1d5 0e20 	rsbs	lr, r5, #32
   d8b80:	db0d      	blt.n	d8b9e <__adddf3+0xb2>
   d8b82:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8b86:	fa22 f205 	lsr.w	r2, r2, r5
   d8b8a:	1880      	adds	r0, r0, r2
   d8b8c:	f141 0100 	adc.w	r1, r1, #0
   d8b90:	fa03 f20e 	lsl.w	r2, r3, lr
   d8b94:	1880      	adds	r0, r0, r2
   d8b96:	fa43 f305 	asr.w	r3, r3, r5
   d8b9a:	4159      	adcs	r1, r3
   d8b9c:	e00e      	b.n	d8bbc <__adddf3+0xd0>
   d8b9e:	f1a5 0520 	sub.w	r5, r5, #32
   d8ba2:	f10e 0e20 	add.w	lr, lr, #32
   d8ba6:	2a01      	cmp	r2, #1
   d8ba8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8bac:	bf28      	it	cs
   d8bae:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8bb2:	fa43 f305 	asr.w	r3, r3, r5
   d8bb6:	18c0      	adds	r0, r0, r3
   d8bb8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8bbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8bc0:	d507      	bpl.n	d8bd2 <__adddf3+0xe6>
   d8bc2:	f04f 0e00 	mov.w	lr, #0
   d8bc6:	f1dc 0c00 	rsbs	ip, ip, #0
   d8bca:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8bce:	eb6e 0101 	sbc.w	r1, lr, r1
   d8bd2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8bd6:	d31b      	bcc.n	d8c10 <__adddf3+0x124>
   d8bd8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8bdc:	d30c      	bcc.n	d8bf8 <__adddf3+0x10c>
   d8bde:	0849      	lsrs	r1, r1, #1
   d8be0:	ea5f 0030 	movs.w	r0, r0, rrx
   d8be4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8be8:	f104 0401 	add.w	r4, r4, #1
   d8bec:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8bf0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8bf4:	f080 809a 	bcs.w	d8d2c <__adddf3+0x240>
   d8bf8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8bfc:	bf08      	it	eq
   d8bfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8c02:	f150 0000 	adcs.w	r0, r0, #0
   d8c06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8c0a:	ea41 0105 	orr.w	r1, r1, r5
   d8c0e:	bd30      	pop	{r4, r5, pc}
   d8c10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8c14:	4140      	adcs	r0, r0
   d8c16:	eb41 0101 	adc.w	r1, r1, r1
   d8c1a:	3c01      	subs	r4, #1
   d8c1c:	bf28      	it	cs
   d8c1e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8c22:	d2e9      	bcs.n	d8bf8 <__adddf3+0x10c>
   d8c24:	f091 0f00 	teq	r1, #0
   d8c28:	bf04      	itt	eq
   d8c2a:	4601      	moveq	r1, r0
   d8c2c:	2000      	moveq	r0, #0
   d8c2e:	fab1 f381 	clz	r3, r1
   d8c32:	bf08      	it	eq
   d8c34:	3320      	addeq	r3, #32
   d8c36:	f1a3 030b 	sub.w	r3, r3, #11
   d8c3a:	f1b3 0220 	subs.w	r2, r3, #32
   d8c3e:	da0c      	bge.n	d8c5a <__adddf3+0x16e>
   d8c40:	320c      	adds	r2, #12
   d8c42:	dd08      	ble.n	d8c56 <__adddf3+0x16a>
   d8c44:	f102 0c14 	add.w	ip, r2, #20
   d8c48:	f1c2 020c 	rsb	r2, r2, #12
   d8c4c:	fa01 f00c 	lsl.w	r0, r1, ip
   d8c50:	fa21 f102 	lsr.w	r1, r1, r2
   d8c54:	e00c      	b.n	d8c70 <__adddf3+0x184>
   d8c56:	f102 0214 	add.w	r2, r2, #20
   d8c5a:	bfd8      	it	le
   d8c5c:	f1c2 0c20 	rsble	ip, r2, #32
   d8c60:	fa01 f102 	lsl.w	r1, r1, r2
   d8c64:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8c68:	bfdc      	itt	le
   d8c6a:	ea41 010c 	orrle.w	r1, r1, ip
   d8c6e:	4090      	lslle	r0, r2
   d8c70:	1ae4      	subs	r4, r4, r3
   d8c72:	bfa2      	ittt	ge
   d8c74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8c78:	4329      	orrge	r1, r5
   d8c7a:	bd30      	popge	{r4, r5, pc}
   d8c7c:	ea6f 0404 	mvn.w	r4, r4
   d8c80:	3c1f      	subs	r4, #31
   d8c82:	da1c      	bge.n	d8cbe <__adddf3+0x1d2>
   d8c84:	340c      	adds	r4, #12
   d8c86:	dc0e      	bgt.n	d8ca6 <__adddf3+0x1ba>
   d8c88:	f104 0414 	add.w	r4, r4, #20
   d8c8c:	f1c4 0220 	rsb	r2, r4, #32
   d8c90:	fa20 f004 	lsr.w	r0, r0, r4
   d8c94:	fa01 f302 	lsl.w	r3, r1, r2
   d8c98:	ea40 0003 	orr.w	r0, r0, r3
   d8c9c:	fa21 f304 	lsr.w	r3, r1, r4
   d8ca0:	ea45 0103 	orr.w	r1, r5, r3
   d8ca4:	bd30      	pop	{r4, r5, pc}
   d8ca6:	f1c4 040c 	rsb	r4, r4, #12
   d8caa:	f1c4 0220 	rsb	r2, r4, #32
   d8cae:	fa20 f002 	lsr.w	r0, r0, r2
   d8cb2:	fa01 f304 	lsl.w	r3, r1, r4
   d8cb6:	ea40 0003 	orr.w	r0, r0, r3
   d8cba:	4629      	mov	r1, r5
   d8cbc:	bd30      	pop	{r4, r5, pc}
   d8cbe:	fa21 f004 	lsr.w	r0, r1, r4
   d8cc2:	4629      	mov	r1, r5
   d8cc4:	bd30      	pop	{r4, r5, pc}
   d8cc6:	f094 0f00 	teq	r4, #0
   d8cca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8cce:	bf06      	itte	eq
   d8cd0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8cd4:	3401      	addeq	r4, #1
   d8cd6:	3d01      	subne	r5, #1
   d8cd8:	e74e      	b.n	d8b78 <__adddf3+0x8c>
   d8cda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8cde:	bf18      	it	ne
   d8ce0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8ce4:	d029      	beq.n	d8d3a <__adddf3+0x24e>
   d8ce6:	ea94 0f05 	teq	r4, r5
   d8cea:	bf08      	it	eq
   d8cec:	ea90 0f02 	teqeq	r0, r2
   d8cf0:	d005      	beq.n	d8cfe <__adddf3+0x212>
   d8cf2:	ea54 0c00 	orrs.w	ip, r4, r0
   d8cf6:	bf04      	itt	eq
   d8cf8:	4619      	moveq	r1, r3
   d8cfa:	4610      	moveq	r0, r2
   d8cfc:	bd30      	pop	{r4, r5, pc}
   d8cfe:	ea91 0f03 	teq	r1, r3
   d8d02:	bf1e      	ittt	ne
   d8d04:	2100      	movne	r1, #0
   d8d06:	2000      	movne	r0, #0
   d8d08:	bd30      	popne	{r4, r5, pc}
   d8d0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8d0e:	d105      	bne.n	d8d1c <__adddf3+0x230>
   d8d10:	0040      	lsls	r0, r0, #1
   d8d12:	4149      	adcs	r1, r1
   d8d14:	bf28      	it	cs
   d8d16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8d1a:	bd30      	pop	{r4, r5, pc}
   d8d1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8d20:	bf3c      	itt	cc
   d8d22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8d26:	bd30      	popcc	{r4, r5, pc}
   d8d28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8d2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8d30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8d34:	f04f 0000 	mov.w	r0, #0
   d8d38:	bd30      	pop	{r4, r5, pc}
   d8d3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8d3e:	bf1a      	itte	ne
   d8d40:	4619      	movne	r1, r3
   d8d42:	4610      	movne	r0, r2
   d8d44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8d48:	bf1c      	itt	ne
   d8d4a:	460b      	movne	r3, r1
   d8d4c:	4602      	movne	r2, r0
   d8d4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8d52:	bf06      	itte	eq
   d8d54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8d58:	ea91 0f03 	teqeq	r1, r3
   d8d5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8d60:	bd30      	pop	{r4, r5, pc}
   d8d62:	bf00      	nop

000d8d64 <__aeabi_ui2d>:
   d8d64:	f090 0f00 	teq	r0, #0
   d8d68:	bf04      	itt	eq
   d8d6a:	2100      	moveq	r1, #0
   d8d6c:	4770      	bxeq	lr
   d8d6e:	b530      	push	{r4, r5, lr}
   d8d70:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8d74:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8d78:	f04f 0500 	mov.w	r5, #0
   d8d7c:	f04f 0100 	mov.w	r1, #0
   d8d80:	e750      	b.n	d8c24 <__adddf3+0x138>
   d8d82:	bf00      	nop

000d8d84 <__aeabi_i2d>:
   d8d84:	f090 0f00 	teq	r0, #0
   d8d88:	bf04      	itt	eq
   d8d8a:	2100      	moveq	r1, #0
   d8d8c:	4770      	bxeq	lr
   d8d8e:	b530      	push	{r4, r5, lr}
   d8d90:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8d94:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8d98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8d9c:	bf48      	it	mi
   d8d9e:	4240      	negmi	r0, r0
   d8da0:	f04f 0100 	mov.w	r1, #0
   d8da4:	e73e      	b.n	d8c24 <__adddf3+0x138>
   d8da6:	bf00      	nop

000d8da8 <__aeabi_f2d>:
   d8da8:	0042      	lsls	r2, r0, #1
   d8daa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8dae:	ea4f 0131 	mov.w	r1, r1, rrx
   d8db2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8db6:	bf1f      	itttt	ne
   d8db8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8dbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8dc0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8dc4:	4770      	bxne	lr
   d8dc6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8dca:	bf08      	it	eq
   d8dcc:	4770      	bxeq	lr
   d8dce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8dd2:	bf04      	itt	eq
   d8dd4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8dd8:	4770      	bxeq	lr
   d8dda:	b530      	push	{r4, r5, lr}
   d8ddc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8de0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8de4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8de8:	e71c      	b.n	d8c24 <__adddf3+0x138>
   d8dea:	bf00      	nop

000d8dec <__aeabi_ul2d>:
   d8dec:	ea50 0201 	orrs.w	r2, r0, r1
   d8df0:	bf08      	it	eq
   d8df2:	4770      	bxeq	lr
   d8df4:	b530      	push	{r4, r5, lr}
   d8df6:	f04f 0500 	mov.w	r5, #0
   d8dfa:	e00a      	b.n	d8e12 <__aeabi_l2d+0x16>

000d8dfc <__aeabi_l2d>:
   d8dfc:	ea50 0201 	orrs.w	r2, r0, r1
   d8e00:	bf08      	it	eq
   d8e02:	4770      	bxeq	lr
   d8e04:	b530      	push	{r4, r5, lr}
   d8e06:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8e0a:	d502      	bpl.n	d8e12 <__aeabi_l2d+0x16>
   d8e0c:	4240      	negs	r0, r0
   d8e0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8e12:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8e16:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8e1a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8e1e:	f43f aed8 	beq.w	d8bd2 <__adddf3+0xe6>
   d8e22:	f04f 0203 	mov.w	r2, #3
   d8e26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8e2a:	bf18      	it	ne
   d8e2c:	3203      	addne	r2, #3
   d8e2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8e32:	bf18      	it	ne
   d8e34:	3203      	addne	r2, #3
   d8e36:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8e3a:	f1c2 0320 	rsb	r3, r2, #32
   d8e3e:	fa00 fc03 	lsl.w	ip, r0, r3
   d8e42:	fa20 f002 	lsr.w	r0, r0, r2
   d8e46:	fa01 fe03 	lsl.w	lr, r1, r3
   d8e4a:	ea40 000e 	orr.w	r0, r0, lr
   d8e4e:	fa21 f102 	lsr.w	r1, r1, r2
   d8e52:	4414      	add	r4, r2
   d8e54:	e6bd      	b.n	d8bd2 <__adddf3+0xe6>
   d8e56:	bf00      	nop

000d8e58 <__aeabi_dmul>:
   d8e58:	b570      	push	{r4, r5, r6, lr}
   d8e5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8e5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8e62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8e66:	bf1d      	ittte	ne
   d8e68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8e6c:	ea94 0f0c 	teqne	r4, ip
   d8e70:	ea95 0f0c 	teqne	r5, ip
   d8e74:	f000 f8de 	bleq	d9034 <__aeabi_dmul+0x1dc>
   d8e78:	442c      	add	r4, r5
   d8e7a:	ea81 0603 	eor.w	r6, r1, r3
   d8e7e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8e82:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8e86:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8e8a:	bf18      	it	ne
   d8e8c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8e90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8e98:	d038      	beq.n	d8f0c <__aeabi_dmul+0xb4>
   d8e9a:	fba0 ce02 	umull	ip, lr, r0, r2
   d8e9e:	f04f 0500 	mov.w	r5, #0
   d8ea2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8ea6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8eaa:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8eae:	f04f 0600 	mov.w	r6, #0
   d8eb2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8eb6:	f09c 0f00 	teq	ip, #0
   d8eba:	bf18      	it	ne
   d8ebc:	f04e 0e01 	orrne.w	lr, lr, #1
   d8ec0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8ec4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8ec8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8ecc:	d204      	bcs.n	d8ed8 <__aeabi_dmul+0x80>
   d8ece:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8ed2:	416d      	adcs	r5, r5
   d8ed4:	eb46 0606 	adc.w	r6, r6, r6
   d8ed8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8edc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8ee0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8ee4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8ee8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8eec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8ef0:	bf88      	it	hi
   d8ef2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8ef6:	d81e      	bhi.n	d8f36 <__aeabi_dmul+0xde>
   d8ef8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8efc:	bf08      	it	eq
   d8efe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8f02:	f150 0000 	adcs.w	r0, r0, #0
   d8f06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8f0a:	bd70      	pop	{r4, r5, r6, pc}
   d8f0c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8f10:	ea46 0101 	orr.w	r1, r6, r1
   d8f14:	ea40 0002 	orr.w	r0, r0, r2
   d8f18:	ea81 0103 	eor.w	r1, r1, r3
   d8f1c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8f20:	bfc2      	ittt	gt
   d8f22:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8f26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8f2a:	bd70      	popgt	{r4, r5, r6, pc}
   d8f2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8f30:	f04f 0e00 	mov.w	lr, #0
   d8f34:	3c01      	subs	r4, #1
   d8f36:	f300 80ab 	bgt.w	d9090 <__aeabi_dmul+0x238>
   d8f3a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8f3e:	bfde      	ittt	le
   d8f40:	2000      	movle	r0, #0
   d8f42:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8f46:	bd70      	pople	{r4, r5, r6, pc}
   d8f48:	f1c4 0400 	rsb	r4, r4, #0
   d8f4c:	3c20      	subs	r4, #32
   d8f4e:	da35      	bge.n	d8fbc <__aeabi_dmul+0x164>
   d8f50:	340c      	adds	r4, #12
   d8f52:	dc1b      	bgt.n	d8f8c <__aeabi_dmul+0x134>
   d8f54:	f104 0414 	add.w	r4, r4, #20
   d8f58:	f1c4 0520 	rsb	r5, r4, #32
   d8f5c:	fa00 f305 	lsl.w	r3, r0, r5
   d8f60:	fa20 f004 	lsr.w	r0, r0, r4
   d8f64:	fa01 f205 	lsl.w	r2, r1, r5
   d8f68:	ea40 0002 	orr.w	r0, r0, r2
   d8f6c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8f70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8f74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8f78:	fa21 f604 	lsr.w	r6, r1, r4
   d8f7c:	eb42 0106 	adc.w	r1, r2, r6
   d8f80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8f84:	bf08      	it	eq
   d8f86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8f8a:	bd70      	pop	{r4, r5, r6, pc}
   d8f8c:	f1c4 040c 	rsb	r4, r4, #12
   d8f90:	f1c4 0520 	rsb	r5, r4, #32
   d8f94:	fa00 f304 	lsl.w	r3, r0, r4
   d8f98:	fa20 f005 	lsr.w	r0, r0, r5
   d8f9c:	fa01 f204 	lsl.w	r2, r1, r4
   d8fa0:	ea40 0002 	orr.w	r0, r0, r2
   d8fa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8fa8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8fac:	f141 0100 	adc.w	r1, r1, #0
   d8fb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8fb4:	bf08      	it	eq
   d8fb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8fba:	bd70      	pop	{r4, r5, r6, pc}
   d8fbc:	f1c4 0520 	rsb	r5, r4, #32
   d8fc0:	fa00 f205 	lsl.w	r2, r0, r5
   d8fc4:	ea4e 0e02 	orr.w	lr, lr, r2
   d8fc8:	fa20 f304 	lsr.w	r3, r0, r4
   d8fcc:	fa01 f205 	lsl.w	r2, r1, r5
   d8fd0:	ea43 0302 	orr.w	r3, r3, r2
   d8fd4:	fa21 f004 	lsr.w	r0, r1, r4
   d8fd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8fdc:	fa21 f204 	lsr.w	r2, r1, r4
   d8fe0:	ea20 0002 	bic.w	r0, r0, r2
   d8fe4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8fe8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8fec:	bf08      	it	eq
   d8fee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8ff2:	bd70      	pop	{r4, r5, r6, pc}
   d8ff4:	f094 0f00 	teq	r4, #0
   d8ff8:	d10f      	bne.n	d901a <__aeabi_dmul+0x1c2>
   d8ffa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8ffe:	0040      	lsls	r0, r0, #1
   d9000:	eb41 0101 	adc.w	r1, r1, r1
   d9004:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9008:	bf08      	it	eq
   d900a:	3c01      	subeq	r4, #1
   d900c:	d0f7      	beq.n	d8ffe <__aeabi_dmul+0x1a6>
   d900e:	ea41 0106 	orr.w	r1, r1, r6
   d9012:	f095 0f00 	teq	r5, #0
   d9016:	bf18      	it	ne
   d9018:	4770      	bxne	lr
   d901a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d901e:	0052      	lsls	r2, r2, #1
   d9020:	eb43 0303 	adc.w	r3, r3, r3
   d9024:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9028:	bf08      	it	eq
   d902a:	3d01      	subeq	r5, #1
   d902c:	d0f7      	beq.n	d901e <__aeabi_dmul+0x1c6>
   d902e:	ea43 0306 	orr.w	r3, r3, r6
   d9032:	4770      	bx	lr
   d9034:	ea94 0f0c 	teq	r4, ip
   d9038:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d903c:	bf18      	it	ne
   d903e:	ea95 0f0c 	teqne	r5, ip
   d9042:	d00c      	beq.n	d905e <__aeabi_dmul+0x206>
   d9044:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9048:	bf18      	it	ne
   d904a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d904e:	d1d1      	bne.n	d8ff4 <__aeabi_dmul+0x19c>
   d9050:	ea81 0103 	eor.w	r1, r1, r3
   d9054:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9058:	f04f 0000 	mov.w	r0, #0
   d905c:	bd70      	pop	{r4, r5, r6, pc}
   d905e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9062:	bf06      	itte	eq
   d9064:	4610      	moveq	r0, r2
   d9066:	4619      	moveq	r1, r3
   d9068:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d906c:	d019      	beq.n	d90a2 <__aeabi_dmul+0x24a>
   d906e:	ea94 0f0c 	teq	r4, ip
   d9072:	d102      	bne.n	d907a <__aeabi_dmul+0x222>
   d9074:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9078:	d113      	bne.n	d90a2 <__aeabi_dmul+0x24a>
   d907a:	ea95 0f0c 	teq	r5, ip
   d907e:	d105      	bne.n	d908c <__aeabi_dmul+0x234>
   d9080:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9084:	bf1c      	itt	ne
   d9086:	4610      	movne	r0, r2
   d9088:	4619      	movne	r1, r3
   d908a:	d10a      	bne.n	d90a2 <__aeabi_dmul+0x24a>
   d908c:	ea81 0103 	eor.w	r1, r1, r3
   d9090:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9094:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9098:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d909c:	f04f 0000 	mov.w	r0, #0
   d90a0:	bd70      	pop	{r4, r5, r6, pc}
   d90a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d90a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d90aa:	bd70      	pop	{r4, r5, r6, pc}

000d90ac <__aeabi_ddiv>:
   d90ac:	b570      	push	{r4, r5, r6, lr}
   d90ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d90b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d90b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d90ba:	bf1d      	ittte	ne
   d90bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d90c0:	ea94 0f0c 	teqne	r4, ip
   d90c4:	ea95 0f0c 	teqne	r5, ip
   d90c8:	f000 f8a7 	bleq	d921a <__aeabi_ddiv+0x16e>
   d90cc:	eba4 0405 	sub.w	r4, r4, r5
   d90d0:	ea81 0e03 	eor.w	lr, r1, r3
   d90d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d90d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d90dc:	f000 8088 	beq.w	d91f0 <__aeabi_ddiv+0x144>
   d90e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d90e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d90e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d90ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d90f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d90f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d90f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d90fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9100:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9104:	429d      	cmp	r5, r3
   d9106:	bf08      	it	eq
   d9108:	4296      	cmpeq	r6, r2
   d910a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d910e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9112:	d202      	bcs.n	d911a <__aeabi_ddiv+0x6e>
   d9114:	085b      	lsrs	r3, r3, #1
   d9116:	ea4f 0232 	mov.w	r2, r2, rrx
   d911a:	1ab6      	subs	r6, r6, r2
   d911c:	eb65 0503 	sbc.w	r5, r5, r3
   d9120:	085b      	lsrs	r3, r3, #1
   d9122:	ea4f 0232 	mov.w	r2, r2, rrx
   d9126:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d912a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d912e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9132:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9136:	bf22      	ittt	cs
   d9138:	1ab6      	subcs	r6, r6, r2
   d913a:	4675      	movcs	r5, lr
   d913c:	ea40 000c 	orrcs.w	r0, r0, ip
   d9140:	085b      	lsrs	r3, r3, #1
   d9142:	ea4f 0232 	mov.w	r2, r2, rrx
   d9146:	ebb6 0e02 	subs.w	lr, r6, r2
   d914a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d914e:	bf22      	ittt	cs
   d9150:	1ab6      	subcs	r6, r6, r2
   d9152:	4675      	movcs	r5, lr
   d9154:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9158:	085b      	lsrs	r3, r3, #1
   d915a:	ea4f 0232 	mov.w	r2, r2, rrx
   d915e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9162:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9166:	bf22      	ittt	cs
   d9168:	1ab6      	subcs	r6, r6, r2
   d916a:	4675      	movcs	r5, lr
   d916c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9170:	085b      	lsrs	r3, r3, #1
   d9172:	ea4f 0232 	mov.w	r2, r2, rrx
   d9176:	ebb6 0e02 	subs.w	lr, r6, r2
   d917a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d917e:	bf22      	ittt	cs
   d9180:	1ab6      	subcs	r6, r6, r2
   d9182:	4675      	movcs	r5, lr
   d9184:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9188:	ea55 0e06 	orrs.w	lr, r5, r6
   d918c:	d018      	beq.n	d91c0 <__aeabi_ddiv+0x114>
   d918e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9192:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9196:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d919a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d919e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d91a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d91a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d91aa:	d1c0      	bne.n	d912e <__aeabi_ddiv+0x82>
   d91ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d91b0:	d10b      	bne.n	d91ca <__aeabi_ddiv+0x11e>
   d91b2:	ea41 0100 	orr.w	r1, r1, r0
   d91b6:	f04f 0000 	mov.w	r0, #0
   d91ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d91be:	e7b6      	b.n	d912e <__aeabi_ddiv+0x82>
   d91c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d91c4:	bf04      	itt	eq
   d91c6:	4301      	orreq	r1, r0
   d91c8:	2000      	moveq	r0, #0
   d91ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d91ce:	bf88      	it	hi
   d91d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d91d4:	f63f aeaf 	bhi.w	d8f36 <__aeabi_dmul+0xde>
   d91d8:	ebb5 0c03 	subs.w	ip, r5, r3
   d91dc:	bf04      	itt	eq
   d91de:	ebb6 0c02 	subseq.w	ip, r6, r2
   d91e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d91e6:	f150 0000 	adcs.w	r0, r0, #0
   d91ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d91ee:	bd70      	pop	{r4, r5, r6, pc}
   d91f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d91f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d91f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d91fc:	bfc2      	ittt	gt
   d91fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9202:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9206:	bd70      	popgt	{r4, r5, r6, pc}
   d9208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d920c:	f04f 0e00 	mov.w	lr, #0
   d9210:	3c01      	subs	r4, #1
   d9212:	e690      	b.n	d8f36 <__aeabi_dmul+0xde>
   d9214:	ea45 0e06 	orr.w	lr, r5, r6
   d9218:	e68d      	b.n	d8f36 <__aeabi_dmul+0xde>
   d921a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d921e:	ea94 0f0c 	teq	r4, ip
   d9222:	bf08      	it	eq
   d9224:	ea95 0f0c 	teqeq	r5, ip
   d9228:	f43f af3b 	beq.w	d90a2 <__aeabi_dmul+0x24a>
   d922c:	ea94 0f0c 	teq	r4, ip
   d9230:	d10a      	bne.n	d9248 <__aeabi_ddiv+0x19c>
   d9232:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9236:	f47f af34 	bne.w	d90a2 <__aeabi_dmul+0x24a>
   d923a:	ea95 0f0c 	teq	r5, ip
   d923e:	f47f af25 	bne.w	d908c <__aeabi_dmul+0x234>
   d9242:	4610      	mov	r0, r2
   d9244:	4619      	mov	r1, r3
   d9246:	e72c      	b.n	d90a2 <__aeabi_dmul+0x24a>
   d9248:	ea95 0f0c 	teq	r5, ip
   d924c:	d106      	bne.n	d925c <__aeabi_ddiv+0x1b0>
   d924e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9252:	f43f aefd 	beq.w	d9050 <__aeabi_dmul+0x1f8>
   d9256:	4610      	mov	r0, r2
   d9258:	4619      	mov	r1, r3
   d925a:	e722      	b.n	d90a2 <__aeabi_dmul+0x24a>
   d925c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9260:	bf18      	it	ne
   d9262:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9266:	f47f aec5 	bne.w	d8ff4 <__aeabi_dmul+0x19c>
   d926a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d926e:	f47f af0d 	bne.w	d908c <__aeabi_dmul+0x234>
   d9272:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9276:	f47f aeeb 	bne.w	d9050 <__aeabi_dmul+0x1f8>
   d927a:	e712      	b.n	d90a2 <__aeabi_dmul+0x24a>

000d927c <__aeabi_d2uiz>:
   d927c:	004a      	lsls	r2, r1, #1
   d927e:	d211      	bcs.n	d92a4 <__aeabi_d2uiz+0x28>
   d9280:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9284:	d211      	bcs.n	d92aa <__aeabi_d2uiz+0x2e>
   d9286:	d50d      	bpl.n	d92a4 <__aeabi_d2uiz+0x28>
   d9288:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d928c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9290:	d40e      	bmi.n	d92b0 <__aeabi_d2uiz+0x34>
   d9292:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9296:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d929a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d929e:	fa23 f002 	lsr.w	r0, r3, r2
   d92a2:	4770      	bx	lr
   d92a4:	f04f 0000 	mov.w	r0, #0
   d92a8:	4770      	bx	lr
   d92aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d92ae:	d102      	bne.n	d92b6 <__aeabi_d2uiz+0x3a>
   d92b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d92b4:	4770      	bx	lr
   d92b6:	f04f 0000 	mov.w	r0, #0
   d92ba:	4770      	bx	lr

000d92bc <__aeabi_f2lz>:
   d92bc:	ee07 0a90 	vmov	s15, r0
   d92c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d92c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d92c8:	d401      	bmi.n	d92ce <__aeabi_f2lz+0x12>
   d92ca:	f000 b80b 	b.w	d92e4 <__aeabi_f2ulz>
   d92ce:	eef1 7a67 	vneg.f32	s15, s15
   d92d2:	b508      	push	{r3, lr}
   d92d4:	ee17 0a90 	vmov	r0, s15
   d92d8:	f000 f804 	bl	d92e4 <__aeabi_f2ulz>
   d92dc:	4240      	negs	r0, r0
   d92de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d92e2:	bd08      	pop	{r3, pc}

000d92e4 <__aeabi_f2ulz>:
   d92e4:	b5d0      	push	{r4, r6, r7, lr}
   d92e6:	f7ff fd5f 	bl	d8da8 <__aeabi_f2d>
   d92ea:	4b0c      	ldr	r3, [pc, #48]	; (d931c <__aeabi_f2ulz+0x38>)
   d92ec:	2200      	movs	r2, #0
   d92ee:	4606      	mov	r6, r0
   d92f0:	460f      	mov	r7, r1
   d92f2:	f7ff fdb1 	bl	d8e58 <__aeabi_dmul>
   d92f6:	f7ff ffc1 	bl	d927c <__aeabi_d2uiz>
   d92fa:	4604      	mov	r4, r0
   d92fc:	f7ff fd32 	bl	d8d64 <__aeabi_ui2d>
   d9300:	4b07      	ldr	r3, [pc, #28]	; (d9320 <__aeabi_f2ulz+0x3c>)
   d9302:	2200      	movs	r2, #0
   d9304:	f7ff fda8 	bl	d8e58 <__aeabi_dmul>
   d9308:	4602      	mov	r2, r0
   d930a:	460b      	mov	r3, r1
   d930c:	4630      	mov	r0, r6
   d930e:	4639      	mov	r1, r7
   d9310:	f7ff fbea 	bl	d8ae8 <__aeabi_dsub>
   d9314:	f7ff ffb2 	bl	d927c <__aeabi_d2uiz>
   d9318:	4621      	mov	r1, r4
   d931a:	bdd0      	pop	{r4, r6, r7, pc}
   d931c:	3df00000 	.word	0x3df00000
   d9320:	41f00000 	.word	0x41f00000

000d9324 <asctime_r>:
   d9324:	b510      	push	{r4, lr}
   d9326:	460c      	mov	r4, r1
   d9328:	6941      	ldr	r1, [r0, #20]
   d932a:	6903      	ldr	r3, [r0, #16]
   d932c:	6982      	ldr	r2, [r0, #24]
   d932e:	b086      	sub	sp, #24
   d9330:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d9334:	9104      	str	r1, [sp, #16]
   d9336:	6801      	ldr	r1, [r0, #0]
   d9338:	9103      	str	r1, [sp, #12]
   d933a:	6841      	ldr	r1, [r0, #4]
   d933c:	9102      	str	r1, [sp, #8]
   d933e:	6881      	ldr	r1, [r0, #8]
   d9340:	9101      	str	r1, [sp, #4]
   d9342:	68c1      	ldr	r1, [r0, #12]
   d9344:	9100      	str	r1, [sp, #0]
   d9346:	4907      	ldr	r1, [pc, #28]	; (d9364 <asctime_r+0x40>)
   d9348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d934c:	440b      	add	r3, r1
   d934e:	4906      	ldr	r1, [pc, #24]	; (d9368 <asctime_r+0x44>)
   d9350:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d9354:	440a      	add	r2, r1
   d9356:	4620      	mov	r0, r4
   d9358:	4904      	ldr	r1, [pc, #16]	; (d936c <asctime_r+0x48>)
   d935a:	f7fc ffa9 	bl	d62b0 <siprintf>
   d935e:	4620      	mov	r0, r4
   d9360:	b006      	add	sp, #24
   d9362:	bd10      	pop	{r4, pc}
   d9364:	000d9ea6 	.word	0x000d9ea6
   d9368:	000d9e91 	.word	0x000d9e91
   d936c:	000d9e71 	.word	0x000d9e71

000d9370 <atexit>:
   d9370:	2300      	movs	r3, #0
   d9372:	4601      	mov	r1, r0
   d9374:	461a      	mov	r2, r3
   d9376:	4618      	mov	r0, r3
   d9378:	f000 b982 	b.w	d9680 <__register_exitproc>

000d937c <memcpy>:
   d937c:	440a      	add	r2, r1
   d937e:	4291      	cmp	r1, r2
   d9380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d9384:	d100      	bne.n	d9388 <memcpy+0xc>
   d9386:	4770      	bx	lr
   d9388:	b510      	push	{r4, lr}
   d938a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d938e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9392:	4291      	cmp	r1, r2
   d9394:	d1f9      	bne.n	d938a <memcpy+0xe>
   d9396:	bd10      	pop	{r4, pc}

000d9398 <memmove>:
   d9398:	4288      	cmp	r0, r1
   d939a:	b510      	push	{r4, lr}
   d939c:	eb01 0402 	add.w	r4, r1, r2
   d93a0:	d902      	bls.n	d93a8 <memmove+0x10>
   d93a2:	4284      	cmp	r4, r0
   d93a4:	4623      	mov	r3, r4
   d93a6:	d807      	bhi.n	d93b8 <memmove+0x20>
   d93a8:	1e43      	subs	r3, r0, #1
   d93aa:	42a1      	cmp	r1, r4
   d93ac:	d008      	beq.n	d93c0 <memmove+0x28>
   d93ae:	f811 2b01 	ldrb.w	r2, [r1], #1
   d93b2:	f803 2f01 	strb.w	r2, [r3, #1]!
   d93b6:	e7f8      	b.n	d93aa <memmove+0x12>
   d93b8:	4402      	add	r2, r0
   d93ba:	4601      	mov	r1, r0
   d93bc:	428a      	cmp	r2, r1
   d93be:	d100      	bne.n	d93c2 <memmove+0x2a>
   d93c0:	bd10      	pop	{r4, pc}
   d93c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d93c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d93ca:	e7f7      	b.n	d93bc <memmove+0x24>

000d93cc <memset>:
   d93cc:	4402      	add	r2, r0
   d93ce:	4603      	mov	r3, r0
   d93d0:	4293      	cmp	r3, r2
   d93d2:	d100      	bne.n	d93d6 <memset+0xa>
   d93d4:	4770      	bx	lr
   d93d6:	f803 1b01 	strb.w	r1, [r3], #1
   d93da:	e7f9      	b.n	d93d0 <memset+0x4>

000d93dc <srand>:
   d93dc:	b538      	push	{r3, r4, r5, lr}
   d93de:	4b0d      	ldr	r3, [pc, #52]	; (d9414 <srand+0x38>)
   d93e0:	681d      	ldr	r5, [r3, #0]
   d93e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d93e4:	4604      	mov	r4, r0
   d93e6:	b97b      	cbnz	r3, d9408 <srand+0x2c>
   d93e8:	2018      	movs	r0, #24
   d93ea:	f7fc ff49 	bl	d6280 <malloc>
   d93ee:	4a0a      	ldr	r2, [pc, #40]	; (d9418 <srand+0x3c>)
   d93f0:	4b0a      	ldr	r3, [pc, #40]	; (d941c <srand+0x40>)
   d93f2:	63a8      	str	r0, [r5, #56]	; 0x38
   d93f4:	e9c0 2300 	strd	r2, r3, [r0]
   d93f8:	4b09      	ldr	r3, [pc, #36]	; (d9420 <srand+0x44>)
   d93fa:	6083      	str	r3, [r0, #8]
   d93fc:	230b      	movs	r3, #11
   d93fe:	8183      	strh	r3, [r0, #12]
   d9400:	2201      	movs	r2, #1
   d9402:	2300      	movs	r3, #0
   d9404:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9408:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d940a:	2200      	movs	r2, #0
   d940c:	611c      	str	r4, [r3, #16]
   d940e:	615a      	str	r2, [r3, #20]
   d9410:	bd38      	pop	{r3, r4, r5, pc}
   d9412:	bf00      	nop
   d9414:	2003def0 	.word	0x2003def0
   d9418:	abcd330e 	.word	0xabcd330e
   d941c:	e66d1234 	.word	0xe66d1234
   d9420:	0005deec 	.word	0x0005deec

000d9424 <rand>:
   d9424:	4b13      	ldr	r3, [pc, #76]	; (d9474 <rand+0x50>)
   d9426:	b510      	push	{r4, lr}
   d9428:	681c      	ldr	r4, [r3, #0]
   d942a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d942c:	b97b      	cbnz	r3, d944e <rand+0x2a>
   d942e:	2018      	movs	r0, #24
   d9430:	f7fc ff26 	bl	d6280 <malloc>
   d9434:	4a10      	ldr	r2, [pc, #64]	; (d9478 <rand+0x54>)
   d9436:	4b11      	ldr	r3, [pc, #68]	; (d947c <rand+0x58>)
   d9438:	63a0      	str	r0, [r4, #56]	; 0x38
   d943a:	e9c0 2300 	strd	r2, r3, [r0]
   d943e:	4b10      	ldr	r3, [pc, #64]	; (d9480 <rand+0x5c>)
   d9440:	6083      	str	r3, [r0, #8]
   d9442:	230b      	movs	r3, #11
   d9444:	8183      	strh	r3, [r0, #12]
   d9446:	2201      	movs	r2, #1
   d9448:	2300      	movs	r3, #0
   d944a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d944e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d9450:	480c      	ldr	r0, [pc, #48]	; (d9484 <rand+0x60>)
   d9452:	690a      	ldr	r2, [r1, #16]
   d9454:	694b      	ldr	r3, [r1, #20]
   d9456:	4c0c      	ldr	r4, [pc, #48]	; (d9488 <rand+0x64>)
   d9458:	4350      	muls	r0, r2
   d945a:	fb04 0003 	mla	r0, r4, r3, r0
   d945e:	fba2 3404 	umull	r3, r4, r2, r4
   d9462:	1c5a      	adds	r2, r3, #1
   d9464:	4404      	add	r4, r0
   d9466:	f144 0000 	adc.w	r0, r4, #0
   d946a:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d946e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d9472:	bd10      	pop	{r4, pc}
   d9474:	2003def0 	.word	0x2003def0
   d9478:	abcd330e 	.word	0xabcd330e
   d947c:	e66d1234 	.word	0xe66d1234
   d9480:	0005deec 	.word	0x0005deec
   d9484:	5851f42d 	.word	0x5851f42d
   d9488:	4c957f2d 	.word	0x4c957f2d

000d948c <strchr>:
   d948c:	b2c9      	uxtb	r1, r1
   d948e:	4603      	mov	r3, r0
   d9490:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9494:	b11a      	cbz	r2, d949e <strchr+0x12>
   d9496:	428a      	cmp	r2, r1
   d9498:	d1f9      	bne.n	d948e <strchr+0x2>
   d949a:	4618      	mov	r0, r3
   d949c:	4770      	bx	lr
   d949e:	2900      	cmp	r1, #0
   d94a0:	bf18      	it	ne
   d94a2:	2300      	movne	r3, #0
   d94a4:	e7f9      	b.n	d949a <strchr+0xe>

000d94a6 <strchrnul>:
   d94a6:	b510      	push	{r4, lr}
   d94a8:	4604      	mov	r4, r0
   d94aa:	f7ff ffef 	bl	d948c <strchr>
   d94ae:	b918      	cbnz	r0, d94b8 <strchrnul+0x12>
   d94b0:	4620      	mov	r0, r4
   d94b2:	f000 f832 	bl	d951a <strlen>
   d94b6:	4420      	add	r0, r4
   d94b8:	bd10      	pop	{r4, pc}

000d94ba <strcmp>:
   d94ba:	f810 2b01 	ldrb.w	r2, [r0], #1
   d94be:	f811 3b01 	ldrb.w	r3, [r1], #1
   d94c2:	2a01      	cmp	r2, #1
   d94c4:	bf28      	it	cs
   d94c6:	429a      	cmpcs	r2, r3
   d94c8:	d0f7      	beq.n	d94ba <strcmp>
   d94ca:	1ad0      	subs	r0, r2, r3
   d94cc:	4770      	bx	lr

000d94ce <strcpy>:
   d94ce:	4603      	mov	r3, r0
   d94d0:	f811 2b01 	ldrb.w	r2, [r1], #1
   d94d4:	f803 2b01 	strb.w	r2, [r3], #1
   d94d8:	2a00      	cmp	r2, #0
   d94da:	d1f9      	bne.n	d94d0 <strcpy+0x2>
   d94dc:	4770      	bx	lr
	...

000d94e0 <strdup>:
   d94e0:	4b02      	ldr	r3, [pc, #8]	; (d94ec <strdup+0xc>)
   d94e2:	4601      	mov	r1, r0
   d94e4:	6818      	ldr	r0, [r3, #0]
   d94e6:	f000 b803 	b.w	d94f0 <_strdup_r>
   d94ea:	bf00      	nop
   d94ec:	2003def0 	.word	0x2003def0

000d94f0 <_strdup_r>:
   d94f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d94f2:	4604      	mov	r4, r0
   d94f4:	4608      	mov	r0, r1
   d94f6:	460d      	mov	r5, r1
   d94f8:	f000 f80f 	bl	d951a <strlen>
   d94fc:	1c42      	adds	r2, r0, #1
   d94fe:	4611      	mov	r1, r2
   d9500:	4620      	mov	r0, r4
   d9502:	9201      	str	r2, [sp, #4]
   d9504:	f7fc fef4 	bl	d62f0 <_malloc_r>
   d9508:	4604      	mov	r4, r0
   d950a:	b118      	cbz	r0, d9514 <_strdup_r+0x24>
   d950c:	9a01      	ldr	r2, [sp, #4]
   d950e:	4629      	mov	r1, r5
   d9510:	f7ff ff34 	bl	d937c <memcpy>
   d9514:	4620      	mov	r0, r4
   d9516:	b003      	add	sp, #12
   d9518:	bd30      	pop	{r4, r5, pc}

000d951a <strlen>:
   d951a:	4603      	mov	r3, r0
   d951c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9520:	2a00      	cmp	r2, #0
   d9522:	d1fb      	bne.n	d951c <strlen+0x2>
   d9524:	1a18      	subs	r0, r3, r0
   d9526:	3801      	subs	r0, #1
   d9528:	4770      	bx	lr

000d952a <strncmp>:
   d952a:	b510      	push	{r4, lr}
   d952c:	b16a      	cbz	r2, d954a <strncmp+0x20>
   d952e:	3901      	subs	r1, #1
   d9530:	1884      	adds	r4, r0, r2
   d9532:	f810 3b01 	ldrb.w	r3, [r0], #1
   d9536:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d953a:	4293      	cmp	r3, r2
   d953c:	d103      	bne.n	d9546 <strncmp+0x1c>
   d953e:	42a0      	cmp	r0, r4
   d9540:	d001      	beq.n	d9546 <strncmp+0x1c>
   d9542:	2b00      	cmp	r3, #0
   d9544:	d1f5      	bne.n	d9532 <strncmp+0x8>
   d9546:	1a98      	subs	r0, r3, r2
   d9548:	bd10      	pop	{r4, pc}
   d954a:	4610      	mov	r0, r2
   d954c:	e7fc      	b.n	d9548 <strncmp+0x1e>

000d954e <strrchr>:
   d954e:	b538      	push	{r3, r4, r5, lr}
   d9550:	4603      	mov	r3, r0
   d9552:	460c      	mov	r4, r1
   d9554:	b969      	cbnz	r1, d9572 <strrchr+0x24>
   d9556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d955a:	f7ff bf97 	b.w	d948c <strchr>
   d955e:	1c43      	adds	r3, r0, #1
   d9560:	4605      	mov	r5, r0
   d9562:	4621      	mov	r1, r4
   d9564:	4618      	mov	r0, r3
   d9566:	f7ff ff91 	bl	d948c <strchr>
   d956a:	2800      	cmp	r0, #0
   d956c:	d1f7      	bne.n	d955e <strrchr+0x10>
   d956e:	4628      	mov	r0, r5
   d9570:	bd38      	pop	{r3, r4, r5, pc}
   d9572:	2500      	movs	r5, #0
   d9574:	e7f5      	b.n	d9562 <strrchr+0x14>
	...

000d9578 <_strtol_l.isra.0>:
   d9578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d957c:	4e3a      	ldr	r6, [pc, #232]	; (d9668 <_strtol_l.isra.0+0xf0>)
   d957e:	4686      	mov	lr, r0
   d9580:	468c      	mov	ip, r1
   d9582:	4660      	mov	r0, ip
   d9584:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9588:	5da5      	ldrb	r5, [r4, r6]
   d958a:	f015 0508 	ands.w	r5, r5, #8
   d958e:	d1f8      	bne.n	d9582 <_strtol_l.isra.0+0xa>
   d9590:	2c2d      	cmp	r4, #45	; 0x2d
   d9592:	d133      	bne.n	d95fc <_strtol_l.isra.0+0x84>
   d9594:	f89c 4000 	ldrb.w	r4, [ip]
   d9598:	f04f 0801 	mov.w	r8, #1
   d959c:	f100 0c02 	add.w	ip, r0, #2
   d95a0:	2b00      	cmp	r3, #0
   d95a2:	d05c      	beq.n	d965e <_strtol_l.isra.0+0xe6>
   d95a4:	2b10      	cmp	r3, #16
   d95a6:	d10c      	bne.n	d95c2 <_strtol_l.isra.0+0x4a>
   d95a8:	2c30      	cmp	r4, #48	; 0x30
   d95aa:	d10a      	bne.n	d95c2 <_strtol_l.isra.0+0x4a>
   d95ac:	f89c 0000 	ldrb.w	r0, [ip]
   d95b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d95b4:	2858      	cmp	r0, #88	; 0x58
   d95b6:	d14d      	bne.n	d9654 <_strtol_l.isra.0+0xdc>
   d95b8:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d95bc:	2310      	movs	r3, #16
   d95be:	f10c 0c02 	add.w	ip, ip, #2
   d95c2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d95c6:	3f01      	subs	r7, #1
   d95c8:	2600      	movs	r6, #0
   d95ca:	fbb7 f9f3 	udiv	r9, r7, r3
   d95ce:	4630      	mov	r0, r6
   d95d0:	fb03 7a19 	mls	sl, r3, r9, r7
   d95d4:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d95d8:	2d09      	cmp	r5, #9
   d95da:	d818      	bhi.n	d960e <_strtol_l.isra.0+0x96>
   d95dc:	462c      	mov	r4, r5
   d95de:	42a3      	cmp	r3, r4
   d95e0:	dd24      	ble.n	d962c <_strtol_l.isra.0+0xb4>
   d95e2:	1c75      	adds	r5, r6, #1
   d95e4:	d007      	beq.n	d95f6 <_strtol_l.isra.0+0x7e>
   d95e6:	4581      	cmp	r9, r0
   d95e8:	d31d      	bcc.n	d9626 <_strtol_l.isra.0+0xae>
   d95ea:	d101      	bne.n	d95f0 <_strtol_l.isra.0+0x78>
   d95ec:	45a2      	cmp	sl, r4
   d95ee:	db1a      	blt.n	d9626 <_strtol_l.isra.0+0xae>
   d95f0:	fb00 4003 	mla	r0, r0, r3, r4
   d95f4:	2601      	movs	r6, #1
   d95f6:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d95fa:	e7eb      	b.n	d95d4 <_strtol_l.isra.0+0x5c>
   d95fc:	2c2b      	cmp	r4, #43	; 0x2b
   d95fe:	bf08      	it	eq
   d9600:	f89c 4000 	ldrbeq.w	r4, [ip]
   d9604:	46a8      	mov	r8, r5
   d9606:	bf08      	it	eq
   d9608:	f100 0c02 	addeq.w	ip, r0, #2
   d960c:	e7c8      	b.n	d95a0 <_strtol_l.isra.0+0x28>
   d960e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d9612:	2d19      	cmp	r5, #25
   d9614:	d801      	bhi.n	d961a <_strtol_l.isra.0+0xa2>
   d9616:	3c37      	subs	r4, #55	; 0x37
   d9618:	e7e1      	b.n	d95de <_strtol_l.isra.0+0x66>
   d961a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d961e:	2d19      	cmp	r5, #25
   d9620:	d804      	bhi.n	d962c <_strtol_l.isra.0+0xb4>
   d9622:	3c57      	subs	r4, #87	; 0x57
   d9624:	e7db      	b.n	d95de <_strtol_l.isra.0+0x66>
   d9626:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d962a:	e7e4      	b.n	d95f6 <_strtol_l.isra.0+0x7e>
   d962c:	1c73      	adds	r3, r6, #1
   d962e:	d106      	bne.n	d963e <_strtol_l.isra.0+0xc6>
   d9630:	2322      	movs	r3, #34	; 0x22
   d9632:	f8ce 3000 	str.w	r3, [lr]
   d9636:	4638      	mov	r0, r7
   d9638:	b942      	cbnz	r2, d964c <_strtol_l.isra.0+0xd4>
   d963a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d963e:	f1b8 0f00 	cmp.w	r8, #0
   d9642:	d000      	beq.n	d9646 <_strtol_l.isra.0+0xce>
   d9644:	4240      	negs	r0, r0
   d9646:	2a00      	cmp	r2, #0
   d9648:	d0f7      	beq.n	d963a <_strtol_l.isra.0+0xc2>
   d964a:	b10e      	cbz	r6, d9650 <_strtol_l.isra.0+0xd8>
   d964c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d9650:	6011      	str	r1, [r2, #0]
   d9652:	e7f2      	b.n	d963a <_strtol_l.isra.0+0xc2>
   d9654:	2430      	movs	r4, #48	; 0x30
   d9656:	2b00      	cmp	r3, #0
   d9658:	d1b3      	bne.n	d95c2 <_strtol_l.isra.0+0x4a>
   d965a:	2308      	movs	r3, #8
   d965c:	e7b1      	b.n	d95c2 <_strtol_l.isra.0+0x4a>
   d965e:	2c30      	cmp	r4, #48	; 0x30
   d9660:	d0a4      	beq.n	d95ac <_strtol_l.isra.0+0x34>
   d9662:	230a      	movs	r3, #10
   d9664:	e7ad      	b.n	d95c2 <_strtol_l.isra.0+0x4a>
   d9666:	bf00      	nop
   d9668:	000d9ecb 	.word	0x000d9ecb

000d966c <strtol>:
   d966c:	4613      	mov	r3, r2
   d966e:	460a      	mov	r2, r1
   d9670:	4601      	mov	r1, r0
   d9672:	4802      	ldr	r0, [pc, #8]	; (d967c <strtol+0x10>)
   d9674:	6800      	ldr	r0, [r0, #0]
   d9676:	f7ff bf7f 	b.w	d9578 <_strtol_l.isra.0>
   d967a:	bf00      	nop
   d967c:	2003def0 	.word	0x2003def0

000d9680 <__register_exitproc>:
   d9680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9684:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d9740 <__register_exitproc+0xc0>
   d9688:	4606      	mov	r6, r0
   d968a:	f8d8 0000 	ldr.w	r0, [r8]
   d968e:	461f      	mov	r7, r3
   d9690:	460d      	mov	r5, r1
   d9692:	4691      	mov	r9, r2
   d9694:	f000 f856 	bl	d9744 <__retarget_lock_acquire_recursive>
   d9698:	4b25      	ldr	r3, [pc, #148]	; (d9730 <__register_exitproc+0xb0>)
   d969a:	681c      	ldr	r4, [r3, #0]
   d969c:	b934      	cbnz	r4, d96ac <__register_exitproc+0x2c>
   d969e:	4c25      	ldr	r4, [pc, #148]	; (d9734 <__register_exitproc+0xb4>)
   d96a0:	601c      	str	r4, [r3, #0]
   d96a2:	4b25      	ldr	r3, [pc, #148]	; (d9738 <__register_exitproc+0xb8>)
   d96a4:	b113      	cbz	r3, d96ac <__register_exitproc+0x2c>
   d96a6:	681b      	ldr	r3, [r3, #0]
   d96a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d96ac:	6863      	ldr	r3, [r4, #4]
   d96ae:	2b1f      	cmp	r3, #31
   d96b0:	dd07      	ble.n	d96c2 <__register_exitproc+0x42>
   d96b2:	f8d8 0000 	ldr.w	r0, [r8]
   d96b6:	f000 f847 	bl	d9748 <__retarget_lock_release_recursive>
   d96ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d96be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d96c2:	b34e      	cbz	r6, d9718 <__register_exitproc+0x98>
   d96c4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d96c8:	b988      	cbnz	r0, d96ee <__register_exitproc+0x6e>
   d96ca:	4b1c      	ldr	r3, [pc, #112]	; (d973c <__register_exitproc+0xbc>)
   d96cc:	b923      	cbnz	r3, d96d8 <__register_exitproc+0x58>
   d96ce:	f8d8 0000 	ldr.w	r0, [r8]
   d96d2:	f000 f838 	bl	d9746 <__retarget_lock_release>
   d96d6:	e7f0      	b.n	d96ba <__register_exitproc+0x3a>
   d96d8:	f44f 7084 	mov.w	r0, #264	; 0x108
   d96dc:	f7fc fdd0 	bl	d6280 <malloc>
   d96e0:	2800      	cmp	r0, #0
   d96e2:	d0f4      	beq.n	d96ce <__register_exitproc+0x4e>
   d96e4:	2300      	movs	r3, #0
   d96e6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d96ea:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d96ee:	6863      	ldr	r3, [r4, #4]
   d96f0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d96f4:	2201      	movs	r2, #1
   d96f6:	409a      	lsls	r2, r3
   d96f8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d96fc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d9700:	4313      	orrs	r3, r2
   d9702:	2e02      	cmp	r6, #2
   d9704:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d9708:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d970c:	bf02      	ittt	eq
   d970e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d9712:	431a      	orreq	r2, r3
   d9714:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d9718:	6863      	ldr	r3, [r4, #4]
   d971a:	f8d8 0000 	ldr.w	r0, [r8]
   d971e:	1c5a      	adds	r2, r3, #1
   d9720:	3302      	adds	r3, #2
   d9722:	6062      	str	r2, [r4, #4]
   d9724:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d9728:	f000 f80e 	bl	d9748 <__retarget_lock_release_recursive>
   d972c:	2000      	movs	r0, #0
   d972e:	e7c6      	b.n	d96be <__register_exitproc+0x3e>
   d9730:	2003e7e0 	.word	0x2003e7e0
   d9734:	2003e754 	.word	0x2003e754
   d9738:	00000000 	.word	0x00000000
   d973c:	000d6281 	.word	0x000d6281
   d9740:	2003df54 	.word	0x2003df54

000d9744 <__retarget_lock_acquire_recursive>:
   d9744:	4770      	bx	lr

000d9746 <__retarget_lock_release>:
   d9746:	4770      	bx	lr

000d9748 <__retarget_lock_release_recursive>:
   d9748:	4770      	bx	lr

000d974a <link_code_end>:
	...

000d974c <dynalib_user>:
   d974c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d975c:	0000 0000 6f6e 2074 6176 696c 0064 6e69     ....not valid.in
   d976c:	7469 6620 6961 656c 0064 7453 7261 7574     it failed.Startu
   d977c:	2070 6f63 706d 656c 6574 2d20 6220 7461     p complete - bat
   d978c:	6574 7972 2520 2e34 6632 2525 202c 6572     tery %4.2f%%, re
   d979c:	6f70 7472 6e69 2067 7665 7265 2079 7525     porting every %u
   d97ac:	7320 6365 6e6f 7364 6320 6f6c 6b63 6920      seconds clock i
   d97bc:	2073 7325 7500 736e 6375 6563 7373 7566     s %s.unsuccessfu
   d97cc:	006c 6553 646e 6e69 2067 6f74 6d20 6e61     l.Sending to man
   d97dc:	6761 7265 6d5f 7365 5f68 6573 7672 7265     ager_mesh_server
   d97ec:	0031 6573 646e 6e69 2067 656d 7373 6761     1.sending messag
   d97fc:	2065 6425 7000 7961 6f6c 6461 7420 206f     e %d.payload to 
   d980c:	6573 7672 7265 0031 6573 646e 6e69 0067     server1.sending.
   d981c:	654d 7373 6761 2065 6573 746e 5200 7365     Message sent.Res
   d982c:	6f70 736e 3a65 3020 2578 3230 2078 7372     ponse: 0x%02x rs
   d983c:	6973 253d 2064 202d 6564 696c 6576 7972     si=%d - delivery
   d984c:	2520 0073 6954 656d 6920 3a73 2520 756c      %s.Time is: %lu
   d985c:	5400 6d69 2065 6573 2074 6f74 2520 756c     .Time set to %lu
   d986c:	6c20 636f 6c61 7420 6d69 2065 7369 2520      local time is %
   d987c:	0073 654e 7478 7220 7065 726f 2074 6e69     s.Next report in
   d988c:	2520 2075 6573 6f63 646e 0073 7055 6164      %u seconds.Upda
   d989c:	6574 4e00 206f 6572 6c70 2c79 6920 2073     te.No reply, is 
   d98ac:	6672 3539 6d5f 7365 5f68 6573 7672 7265     rf95_mesh_server
   d98bc:	2c31 7220 3966 5f35 656d 6873 735f 7265     1, rf95_mesh_ser
   d98cc:	6576 3272 6120 646e 7220 3966 5f35 656d     ver2 and rf95_me
   d98dc:	6873 735f 7265 6576 3372 7220 6e75 696e     sh_server3 runni
   d98ec:	676e 003f 6573 646e 6f74 6157 7469 6620     ng?.sendtoWait f
   d98fc:	6961 656c 2e64 4120 6572 7420 6568 6920     ailed. Are the i
   d990c:	746e 7265 656d 6964 7461 2065 656d 6873     ntermediate mesh
   d991c:	7320 7265 6576 7372 7220 6e75 696e 676e      servers running
   d992c:	003f 0000                                   ?...

000d9930 <_ZTVN5spark10LogHandlerE>:
	...
   d9940:	40a5 000d 40c9 000d                         .@...@..

000d9948 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d9950:	40e1 000d 4115 000d 7bc9 000d 40cb 000d     .@...A...{...@..

000d9960 <_ZTV15RHGenericDriver>:
	...
   d9970:	4931 000d 40a5 000d 40a5 000d 40a5 000d     1I...@...@...@..
   d9980:	40a5 000d 4993 000d 4935 000d 49e3 000d     .@...I..5I...I..
   d9990:	49b1 000d 4a07 000d 493f 000d 4947 000d     .I...J..?I..GI..
   d99a0:	494b 000d 494f 000d 4953 000d 4957 000d     KI..OI..SI..WI..
   d99b0:	4943 000d 4963 000d 4967 000d 496b 000d     CI..cI..gI..kI..
   d99c0:	496f 000d 4973 000d 4979 000d 497d 000d     oI..sI..yI..}I..
   d99d0:	493f 000d 4981 000d 4987 000d 498d 000d     ?I...I...I...I..

000d99e0 <_ZTV12RHGenericSPI>:
	...
   d99e8:	40a5 000d 4a65 000d 4a67 000d 40a5 000d     .@..eJ..gJ...@..
   d99f8:	40a5 000d 4a6f 000d 4a73 000d 4a77 000d     .@..oJ..sJ..wJ..
   d9a08:	4a69 000d 4a6b 000d 4a6d 000d 6564 6166     iJ..kJ..mJ..defa
   d9a18:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   d9a28:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   d9a38:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   d9a48:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000d9a58 <_ZTVN8particle11SPISettingsE>:
	...
   d9a60:	4abd 000d 4a91 000d 4a93 000d               .J...J...J..

000d9a6c <_ZTV13RHHardwareSPI>:
	...
   d9a74:	4b71 000d 4b85 000d 4b93 000d 4ba1 000d     qK...K...K...K..
   d9a84:	4c0d 000d 4a6f 000d 4a73 000d 4a77 000d     .L..oJ..sJ..wJ..
   d9a94:	4c1b 000d 4c2f 000d 4c3d 000d               .L../L..=L..

000d9aa0 <_ZTV6RHMesh>:
	...
   d9aa8:	4d0d 000d 5015 000d 4c69 000d 4c55 000d     .M...P..iL..UL..

000d9ab8 <_ZTV8RHRouter>:
	...
   d9ac0:	527b 000d 52bf 000d                         {R...R..

000d9ac8 <_ZTV11RHSPIDriver>:
	...
   d9ad8:	555d 000d 40a5 000d 40a5 000d 40a5 000d     ]U...@...@...@..
   d9ae8:	40a5 000d 4993 000d 4935 000d 49e3 000d     .@...I..5I...I..
   d9af8:	49b1 000d 4a07 000d 493f 000d 4947 000d     .I...J..?I..GI..
   d9b08:	494b 000d 494f 000d 4953 000d 4957 000d     KI..OI..SI..WI..
   d9b18:	4943 000d 4963 000d 4967 000d 496b 000d     CI..cI..gI..kI..
   d9b28:	496f 000d 4973 000d 4979 000d 497d 000d     oI..sI..yI..}I..
   d9b38:	493f 000d 4981 000d 4987 000d 498d 000d     ?I...I...I...I..
   d9b48:	5589 000d 5593 000d                         .U...U..

000d9b50 <_ZL18MODEM_CONFIG_TABLE>:
   d9b50:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000d9b60 <_ZTV7RH_RF95>:
	...
   d9b68:	56fb 000d 5733 000d 5bf1 000d 5a57 000d     .V..3W...[..WZ..
   d9b78:	5769 000d 5a9f 000d 56f7 000d 4993 000d     iW...Z...V...I..
   d9b88:	4935 000d 49e3 000d 49b1 000d 4a07 000d     5I...I...I...J..
   d9b98:	56fd 000d 4947 000d 494b 000d 494f 000d     .V..GI..KI..OI..
   d9ba8:	4953 000d 4957 000d 4943 000d 4963 000d     SI..WI..CI..cI..
   d9bb8:	4967 000d 496b 000d 496f 000d 4973 000d     gI..kI..oI..sI..
   d9bc8:	4979 000d 497d 000d 5743 000d 4981 000d     yI..}I..CW...I..
   d9bd8:	4987 000d 498d 000d 5589 000d 5593 000d     .I...I...U...U..
   d9be8:	56f3 000d                                   .V..

000d9bec <_ZTVN5spark13CellularClassE>:
	...
   d9bf4:	63cb 000d 63c1 000d 63b7 000d 636d 000d     .c...c...c..mc..
   d9c04:	63ab 000d 639f 000d 7f21 000d 7f29 000d     .c...c..!...)...
   d9c14:	6393 000d 638b 000d 6381 000d 6377 000d     .c...c...c..wc..
   d9c24:	7f59 000d                                   Y...

000d9c28 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9c30:	6405 000d 640b 000d 645b 000d 6419 000d     .d...d..[d...d..
   d9c40:	6407 000d                                   .d..

000d9c44 <_ZTVN5spark13EthernetClassE>:
	...
   d9c4c:	69d3 000d 69c9 000d 69bf 000d 69b5 000d     .i...i...i...i..
   d9c5c:	69a9 000d 699d 000d 7f21 000d 7f29 000d     .i...i..!...)...
   d9c6c:	6991 000d 6989 000d 697f 000d 6975 000d     .i...i...i..ui..
   d9c7c:	7f59 000d                                   Y...

000d9c80 <_ZTV7TwoWire>:
	...
   d9c88:	69f1 000d 6a3b 000d 6a13 000d 69f3 000d     .i..;j...j...i..
   d9c98:	6a1b 000d 6a23 000d 6a2b 000d 6a33 000d     .j..#j..+j..3j..

000d9ca8 <_ZTV9IPAddress>:
	...
   d9cb0:	6ad5 000d 6ac5 000d 6ac7 000d 7525 7500     .j...j...j..%u.u
   d9cc0:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   d9cd0:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   d9ce0:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   d9cf0:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   d9d00:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d9d10:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d9d20:	006d 0063 0066 6e6c 6600 006e 6f63 6564     m.c.f.ln.fn.code
   d9d30:	6400 7465 6961 006c                         .detail.

000d9d38 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d9d40:	6f91 000d 6fb7 000d 6f75 000d 6bd5 000d     .o...o..uo...k..

000d9d50 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d9d58:	73e5 000d 73fd 000d 7bc9 000d 40cb 000d     .s...s...{...@..

000d9d68 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d9d70:	7411 000d 7425 000d 7d6d 000d 6f7d 000d     .t..%t..m}..}o..

000d9d80 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d9d88:	6f8f 000d 6fc5 000d 7b05 000d 6f7f 000d     .o...o...{...o..

000d9d98 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d9da0:	6f8d 000d 6fd3 000d 732d 000d 6ff1 000d     .o...o..-s...o..

000d9db0 <_ZTVN5spark12NetworkClassE>:
	...
   d9db8:	7ee1 000d 7eeb 000d 7ef5 000d 7eff 000d     .~...~...~...~..
   d9dc8:	7f09 000d 7f15 000d 7f21 000d 7f29 000d     ........!...)...
   d9dd8:	7f31 000d 7f3d 000d 7f45 000d 7f4f 000d     1...=...E...O...
   d9de8:	7f59 000d                                   Y...

000d9dec <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9dec:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   d9dfc:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d9e0c:	6d69 0065                                   ime.

000d9e10 <_ZTV11USARTSerial>:
	...
   d9e18:	862d 000d 869b 000d 8673 000d 8041 000d     -.......s...A...
   d9e28:	8643 000d 865f 000d 8651 000d 866d 000d     C..._...Q...m...
   d9e38:	862f 000d 8635 000d                         /...5...

000d9e40 <_ZTV9USBSerial>:
	...
   d9e48:	873b 000d 87a3 000d 8779 000d 8041 000d     ;.......y...A...
   d9e58:	876b 000d 873d 000d 874d 000d 879d 000d     k...=...M.......
   d9e68:	875d 000d 8735 000d                         ]...5...

000d9e70 <_ZSt7nothrow>:
   d9e70:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   d9e80:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000d9e91 <day_name.6145>:
   d9e91:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d9ea1:	6972 6153                                    riSat

000d9ea6 <mon_name.6146>:
   d9ea6:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d9eb6:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d9ec6:	4476 6365                                   vDec

000d9eca <_ctype_>:
   d9eca:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9eda:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9eea:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9efa:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d9f0a:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d9f1a:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d9f2a:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d9f3a:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d9f4a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d9fcb <link_const_variable_data_end>:
	...

000d9fcc <link_constructors_location>:
   d9fcc:	000d4745 	.word	0x000d4745
   d9fd0:	000d4c45 	.word	0x000d4c45
   d9fd4:	000d635d 	.word	0x000d635d
   d9fd8:	000d63d5 	.word	0x000d63d5
   d9fdc:	000d69dd 	.word	0x000d69dd
   d9fe0:	000d7bb9 	.word	0x000d7bb9
   d9fe4:	000d802d 	.word	0x000d802d
   d9fe8:	000d8181 	.word	0x000d8181
   d9fec:	000d8451 	.word	0x000d8451
   d9ff0:	000d8619 	.word	0x000d8619

000d9ff4 <link_constructors_end>:
	...
